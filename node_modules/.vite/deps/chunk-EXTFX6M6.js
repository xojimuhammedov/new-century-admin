import {
  getShadowRoot,
  init_shadow
} from "./chunk-ZLVYP5GH.js";
import {
  _assertThisInitialized,
  _classCallCheck,
  _createClass,
  _createSuper,
  _inherits,
  _toArray,
  _toConsumableArray,
  get,
  init_assertThisInitialized,
  init_classCallCheck,
  init_createClass,
  init_createSuper,
  init_es2,
  init_get,
  init_inherits,
  init_isEqual,
  init_toArray,
  init_toArray2,
  init_toConsumableArray,
  init_useEvent,
  init_useLayoutEffect,
  init_useMergedState,
  init_useState,
  isEqual_default,
  toArray,
  useEvent,
  useLayoutEffect_default,
  useMergedState,
  useSafeState
} from "./chunk-Q54EG7ZY.js";
import {
  FastColor,
  _defineProperty,
  _extends,
  _objectSpread2,
  _objectWithoutProperties,
  _slicedToArray,
  _typeof,
  canUseDom,
  composeRef,
  fillRef,
  getNodeRef,
  init_canUseDom,
  init_defineProperty,
  init_dynamicCSS,
  init_es,
  init_extends,
  init_objectSpread2,
  init_objectWithoutProperties,
  init_ref,
  init_slicedToArray,
  init_typeof,
  init_useMemo,
  init_warning,
  noteOnce,
  removeCSS,
  require_classnames,
  supportRef,
  updateCSS,
  useComposeRef,
  useMemo,
  warning,
  warning_default
} from "./chunk-7NK2GNZW.js";
import {
  require_react_dom
} from "./chunk-VLQGJDDQ.js";
import {
  require_react
} from "./chunk-FDMQADGV.js";
import {
  __esm,
  __export,
  __toESM
} from "./chunk-V4OQ3NZ2.js";

// node_modules/rc-util/es/Dom/findDOMNode.js
function isDOM(node) {
  return node instanceof HTMLElement || node instanceof SVGElement;
}
function getDOM(node) {
  if (node && _typeof(node) === "object" && isDOM(node.nativeElement)) {
    return node.nativeElement;
  }
  if (isDOM(node)) {
    return node;
  }
  return null;
}
function findDOMNode(node) {
  var domNode = getDOM(node);
  if (domNode) {
    return domNode;
  }
  if (node instanceof import_react.default.Component) {
    var _ReactDOM$findDOMNode;
    return (_ReactDOM$findDOMNode = import_react_dom.default.findDOMNode) === null || _ReactDOM$findDOMNode === void 0 ? void 0 : _ReactDOM$findDOMNode.call(import_react_dom.default, node);
  }
  return null;
}
var import_react, import_react_dom;
var init_findDOMNode = __esm({
  "node_modules/rc-util/es/Dom/findDOMNode.js"() {
    init_typeof();
    import_react = __toESM(require_react());
    import_react_dom = __toESM(require_react_dom());
  }
});

// node_modules/rc-resize-observer/es/Collection.js
function Collection(_ref) {
  var children = _ref.children, onBatchResize = _ref.onBatchResize;
  var resizeIdRef = React2.useRef(0);
  var resizeInfosRef = React2.useRef([]);
  var onCollectionResize = React2.useContext(CollectionContext);
  var onResize2 = React2.useCallback(function(size, element, data) {
    resizeIdRef.current += 1;
    var currentId = resizeIdRef.current;
    resizeInfosRef.current.push({
      size,
      element,
      data
    });
    Promise.resolve().then(function() {
      if (currentId === resizeIdRef.current) {
        onBatchResize === null || onBatchResize === void 0 || onBatchResize(resizeInfosRef.current);
        resizeInfosRef.current = [];
      }
    });
    onCollectionResize === null || onCollectionResize === void 0 || onCollectionResize(size, element, data);
  }, [onBatchResize, onCollectionResize]);
  return React2.createElement(CollectionContext.Provider, {
    value: onResize2
  }, children);
}
var React2, CollectionContext;
var init_Collection = __esm({
  "node_modules/rc-resize-observer/es/Collection.js"() {
    React2 = __toESM(require_react());
    CollectionContext = React2.createContext(null);
  }
});

// node_modules/resize-observer-polyfill/dist/ResizeObserver.es.js
function throttle(callback, delay) {
  var leadingCall = false, trailingCall = false, lastCallTime = 0;
  function resolvePending() {
    if (leadingCall) {
      leadingCall = false;
      callback();
    }
    if (trailingCall) {
      proxy();
    }
  }
  function timeoutCallback() {
    requestAnimationFrame$1(resolvePending);
  }
  function proxy() {
    var timeStamp = Date.now();
    if (leadingCall) {
      if (timeStamp - lastCallTime < trailingTimeout) {
        return;
      }
      trailingCall = true;
    } else {
      leadingCall = true;
      trailingCall = false;
      setTimeout(timeoutCallback, delay);
    }
    lastCallTime = timeStamp;
  }
  return proxy;
}
function toFloat(value) {
  return parseFloat(value) || 0;
}
function getBordersSize(styles) {
  var positions = [];
  for (var _i = 1; _i < arguments.length; _i++) {
    positions[_i - 1] = arguments[_i];
  }
  return positions.reduce(function(size, position) {
    var value = styles["border-" + position + "-width"];
    return size + toFloat(value);
  }, 0);
}
function getPaddings(styles) {
  var positions = ["top", "right", "bottom", "left"];
  var paddings = {};
  for (var _i = 0, positions_1 = positions; _i < positions_1.length; _i++) {
    var position = positions_1[_i];
    var value = styles["padding-" + position];
    paddings[position] = toFloat(value);
  }
  return paddings;
}
function getSVGContentRect(target) {
  var bbox = target.getBBox();
  return createRectInit(0, 0, bbox.width, bbox.height);
}
function getHTMLElementContentRect(target) {
  var clientWidth = target.clientWidth, clientHeight = target.clientHeight;
  if (!clientWidth && !clientHeight) {
    return emptyRect;
  }
  var styles = getWindowOf(target).getComputedStyle(target);
  var paddings = getPaddings(styles);
  var horizPad = paddings.left + paddings.right;
  var vertPad = paddings.top + paddings.bottom;
  var width = toFloat(styles.width), height = toFloat(styles.height);
  if (styles.boxSizing === "border-box") {
    if (Math.round(width + horizPad) !== clientWidth) {
      width -= getBordersSize(styles, "left", "right") + horizPad;
    }
    if (Math.round(height + vertPad) !== clientHeight) {
      height -= getBordersSize(styles, "top", "bottom") + vertPad;
    }
  }
  if (!isDocumentElement(target)) {
    var vertScrollbar = Math.round(width + horizPad) - clientWidth;
    var horizScrollbar = Math.round(height + vertPad) - clientHeight;
    if (Math.abs(vertScrollbar) !== 1) {
      width -= vertScrollbar;
    }
    if (Math.abs(horizScrollbar) !== 1) {
      height -= horizScrollbar;
    }
  }
  return createRectInit(paddings.left, paddings.top, width, height);
}
function isDocumentElement(target) {
  return target === getWindowOf(target).document.documentElement;
}
function getContentRect(target) {
  if (!isBrowser) {
    return emptyRect;
  }
  if (isSVGGraphicsElement(target)) {
    return getSVGContentRect(target);
  }
  return getHTMLElementContentRect(target);
}
function createReadOnlyRect(_a) {
  var x = _a.x, y = _a.y, width = _a.width, height = _a.height;
  var Constr = typeof DOMRectReadOnly !== "undefined" ? DOMRectReadOnly : Object;
  var rect = Object.create(Constr.prototype);
  defineConfigurable(rect, {
    x,
    y,
    width,
    height,
    top: y,
    right: x + width,
    bottom: height + y,
    left: x
  });
  return rect;
}
function createRectInit(x, y, width, height) {
  return { x, y, width, height };
}
var MapShim, isBrowser, global$1, requestAnimationFrame$1, trailingTimeout, REFRESH_DELAY, transitionKeys, mutationObserverSupported, ResizeObserverController, defineConfigurable, getWindowOf, emptyRect, isSVGGraphicsElement, ResizeObservation, ResizeObserverEntry, ResizeObserverSPI, observers, ResizeObserver, index, ResizeObserver_es_default;
var init_ResizeObserver_es = __esm({
  "node_modules/resize-observer-polyfill/dist/ResizeObserver.es.js"() {
    MapShim = (function() {
      if (typeof Map !== "undefined") {
        return Map;
      }
      function getIndex(arr, key) {
        var result = -1;
        arr.some(function(entry, index2) {
          if (entry[0] === key) {
            result = index2;
            return true;
          }
          return false;
        });
        return result;
      }
      return (
        /** @class */
        (function() {
          function class_1() {
            this.__entries__ = [];
          }
          Object.defineProperty(class_1.prototype, "size", {
            /**
             * @returns {boolean}
             */
            get: function() {
              return this.__entries__.length;
            },
            enumerable: true,
            configurable: true
          });
          class_1.prototype.get = function(key) {
            var index2 = getIndex(this.__entries__, key);
            var entry = this.__entries__[index2];
            return entry && entry[1];
          };
          class_1.prototype.set = function(key, value) {
            var index2 = getIndex(this.__entries__, key);
            if (~index2) {
              this.__entries__[index2][1] = value;
            } else {
              this.__entries__.push([key, value]);
            }
          };
          class_1.prototype.delete = function(key) {
            var entries = this.__entries__;
            var index2 = getIndex(entries, key);
            if (~index2) {
              entries.splice(index2, 1);
            }
          };
          class_1.prototype.has = function(key) {
            return !!~getIndex(this.__entries__, key);
          };
          class_1.prototype.clear = function() {
            this.__entries__.splice(0);
          };
          class_1.prototype.forEach = function(callback, ctx) {
            if (ctx === void 0) {
              ctx = null;
            }
            for (var _i = 0, _a = this.__entries__; _i < _a.length; _i++) {
              var entry = _a[_i];
              callback.call(ctx, entry[1], entry[0]);
            }
          };
          return class_1;
        })()
      );
    })();
    isBrowser = typeof window !== "undefined" && typeof document !== "undefined" && window.document === document;
    global$1 = (function() {
      if (typeof global !== "undefined" && global.Math === Math) {
        return global;
      }
      if (typeof self !== "undefined" && self.Math === Math) {
        return self;
      }
      if (typeof window !== "undefined" && window.Math === Math) {
        return window;
      }
      return Function("return this")();
    })();
    requestAnimationFrame$1 = (function() {
      if (typeof requestAnimationFrame === "function") {
        return requestAnimationFrame.bind(global$1);
      }
      return function(callback) {
        return setTimeout(function() {
          return callback(Date.now());
        }, 1e3 / 60);
      };
    })();
    trailingTimeout = 2;
    REFRESH_DELAY = 20;
    transitionKeys = ["top", "right", "bottom", "left", "width", "height", "size", "weight"];
    mutationObserverSupported = typeof MutationObserver !== "undefined";
    ResizeObserverController = /** @class */
    (function() {
      function ResizeObserverController2() {
        this.connected_ = false;
        this.mutationEventsAdded_ = false;
        this.mutationsObserver_ = null;
        this.observers_ = [];
        this.onTransitionEnd_ = this.onTransitionEnd_.bind(this);
        this.refresh = throttle(this.refresh.bind(this), REFRESH_DELAY);
      }
      ResizeObserverController2.prototype.addObserver = function(observer) {
        if (!~this.observers_.indexOf(observer)) {
          this.observers_.push(observer);
        }
        if (!this.connected_) {
          this.connect_();
        }
      };
      ResizeObserverController2.prototype.removeObserver = function(observer) {
        var observers2 = this.observers_;
        var index2 = observers2.indexOf(observer);
        if (~index2) {
          observers2.splice(index2, 1);
        }
        if (!observers2.length && this.connected_) {
          this.disconnect_();
        }
      };
      ResizeObserverController2.prototype.refresh = function() {
        var changesDetected = this.updateObservers_();
        if (changesDetected) {
          this.refresh();
        }
      };
      ResizeObserverController2.prototype.updateObservers_ = function() {
        var activeObservers = this.observers_.filter(function(observer) {
          return observer.gatherActive(), observer.hasActive();
        });
        activeObservers.forEach(function(observer) {
          return observer.broadcastActive();
        });
        return activeObservers.length > 0;
      };
      ResizeObserverController2.prototype.connect_ = function() {
        if (!isBrowser || this.connected_) {
          return;
        }
        document.addEventListener("transitionend", this.onTransitionEnd_);
        window.addEventListener("resize", this.refresh);
        if (mutationObserverSupported) {
          this.mutationsObserver_ = new MutationObserver(this.refresh);
          this.mutationsObserver_.observe(document, {
            attributes: true,
            childList: true,
            characterData: true,
            subtree: true
          });
        } else {
          document.addEventListener("DOMSubtreeModified", this.refresh);
          this.mutationEventsAdded_ = true;
        }
        this.connected_ = true;
      };
      ResizeObserverController2.prototype.disconnect_ = function() {
        if (!isBrowser || !this.connected_) {
          return;
        }
        document.removeEventListener("transitionend", this.onTransitionEnd_);
        window.removeEventListener("resize", this.refresh);
        if (this.mutationsObserver_) {
          this.mutationsObserver_.disconnect();
        }
        if (this.mutationEventsAdded_) {
          document.removeEventListener("DOMSubtreeModified", this.refresh);
        }
        this.mutationsObserver_ = null;
        this.mutationEventsAdded_ = false;
        this.connected_ = false;
      };
      ResizeObserverController2.prototype.onTransitionEnd_ = function(_a) {
        var _b = _a.propertyName, propertyName = _b === void 0 ? "" : _b;
        var isReflowProperty = transitionKeys.some(function(key) {
          return !!~propertyName.indexOf(key);
        });
        if (isReflowProperty) {
          this.refresh();
        }
      };
      ResizeObserverController2.getInstance = function() {
        if (!this.instance_) {
          this.instance_ = new ResizeObserverController2();
        }
        return this.instance_;
      };
      ResizeObserverController2.instance_ = null;
      return ResizeObserverController2;
    })();
    defineConfigurable = (function(target, props) {
      for (var _i = 0, _a = Object.keys(props); _i < _a.length; _i++) {
        var key = _a[_i];
        Object.defineProperty(target, key, {
          value: props[key],
          enumerable: false,
          writable: false,
          configurable: true
        });
      }
      return target;
    });
    getWindowOf = (function(target) {
      var ownerGlobal = target && target.ownerDocument && target.ownerDocument.defaultView;
      return ownerGlobal || global$1;
    });
    emptyRect = createRectInit(0, 0, 0, 0);
    isSVGGraphicsElement = (function() {
      if (typeof SVGGraphicsElement !== "undefined") {
        return function(target) {
          return target instanceof getWindowOf(target).SVGGraphicsElement;
        };
      }
      return function(target) {
        return target instanceof getWindowOf(target).SVGElement && typeof target.getBBox === "function";
      };
    })();
    ResizeObservation = /** @class */
    (function() {
      function ResizeObservation2(target) {
        this.broadcastWidth = 0;
        this.broadcastHeight = 0;
        this.contentRect_ = createRectInit(0, 0, 0, 0);
        this.target = target;
      }
      ResizeObservation2.prototype.isActive = function() {
        var rect = getContentRect(this.target);
        this.contentRect_ = rect;
        return rect.width !== this.broadcastWidth || rect.height !== this.broadcastHeight;
      };
      ResizeObservation2.prototype.broadcastRect = function() {
        var rect = this.contentRect_;
        this.broadcastWidth = rect.width;
        this.broadcastHeight = rect.height;
        return rect;
      };
      return ResizeObservation2;
    })();
    ResizeObserverEntry = /** @class */
    /* @__PURE__ */ (function() {
      function ResizeObserverEntry2(target, rectInit) {
        var contentRect = createReadOnlyRect(rectInit);
        defineConfigurable(this, { target, contentRect });
      }
      return ResizeObserverEntry2;
    })();
    ResizeObserverSPI = /** @class */
    (function() {
      function ResizeObserverSPI2(callback, controller, callbackCtx) {
        this.activeObservations_ = [];
        this.observations_ = new MapShim();
        if (typeof callback !== "function") {
          throw new TypeError("The callback provided as parameter 1 is not a function.");
        }
        this.callback_ = callback;
        this.controller_ = controller;
        this.callbackCtx_ = callbackCtx;
      }
      ResizeObserverSPI2.prototype.observe = function(target) {
        if (!arguments.length) {
          throw new TypeError("1 argument required, but only 0 present.");
        }
        if (typeof Element === "undefined" || !(Element instanceof Object)) {
          return;
        }
        if (!(target instanceof getWindowOf(target).Element)) {
          throw new TypeError('parameter 1 is not of type "Element".');
        }
        var observations = this.observations_;
        if (observations.has(target)) {
          return;
        }
        observations.set(target, new ResizeObservation(target));
        this.controller_.addObserver(this);
        this.controller_.refresh();
      };
      ResizeObserverSPI2.prototype.unobserve = function(target) {
        if (!arguments.length) {
          throw new TypeError("1 argument required, but only 0 present.");
        }
        if (typeof Element === "undefined" || !(Element instanceof Object)) {
          return;
        }
        if (!(target instanceof getWindowOf(target).Element)) {
          throw new TypeError('parameter 1 is not of type "Element".');
        }
        var observations = this.observations_;
        if (!observations.has(target)) {
          return;
        }
        observations.delete(target);
        if (!observations.size) {
          this.controller_.removeObserver(this);
        }
      };
      ResizeObserverSPI2.prototype.disconnect = function() {
        this.clearActive();
        this.observations_.clear();
        this.controller_.removeObserver(this);
      };
      ResizeObserverSPI2.prototype.gatherActive = function() {
        var _this = this;
        this.clearActive();
        this.observations_.forEach(function(observation) {
          if (observation.isActive()) {
            _this.activeObservations_.push(observation);
          }
        });
      };
      ResizeObserverSPI2.prototype.broadcastActive = function() {
        if (!this.hasActive()) {
          return;
        }
        var ctx = this.callbackCtx_;
        var entries = this.activeObservations_.map(function(observation) {
          return new ResizeObserverEntry(observation.target, observation.broadcastRect());
        });
        this.callback_.call(ctx, entries, ctx);
        this.clearActive();
      };
      ResizeObserverSPI2.prototype.clearActive = function() {
        this.activeObservations_.splice(0);
      };
      ResizeObserverSPI2.prototype.hasActive = function() {
        return this.activeObservations_.length > 0;
      };
      return ResizeObserverSPI2;
    })();
    observers = typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : new MapShim();
    ResizeObserver = /** @class */
    /* @__PURE__ */ (function() {
      function ResizeObserver3(callback) {
        if (!(this instanceof ResizeObserver3)) {
          throw new TypeError("Cannot call a class as a function.");
        }
        if (!arguments.length) {
          throw new TypeError("1 argument required, but only 0 present.");
        }
        var controller = ResizeObserverController.getInstance();
        var observer = new ResizeObserverSPI(callback, controller, this);
        observers.set(this, observer);
      }
      return ResizeObserver3;
    })();
    [
      "observe",
      "unobserve",
      "disconnect"
    ].forEach(function(method) {
      ResizeObserver.prototype[method] = function() {
        var _a;
        return (_a = observers.get(this))[method].apply(_a, arguments);
      };
    });
    index = (function() {
      if (typeof global$1.ResizeObserver !== "undefined") {
        return global$1.ResizeObserver;
      }
      return ResizeObserver;
    })();
    ResizeObserver_es_default = index;
  }
});

// node_modules/rc-resize-observer/es/utils/observerUtil.js
function onResize(entities) {
  entities.forEach(function(entity) {
    var _elementListeners$get;
    var target = entity.target;
    (_elementListeners$get = elementListeners.get(target)) === null || _elementListeners$get === void 0 || _elementListeners$get.forEach(function(listener) {
      return listener(target);
    });
  });
}
function observe(element, callback) {
  if (!elementListeners.has(element)) {
    elementListeners.set(element, /* @__PURE__ */ new Set());
    resizeObserver.observe(element);
  }
  elementListeners.get(element).add(callback);
}
function unobserve(element, callback) {
  if (elementListeners.has(element)) {
    elementListeners.get(element).delete(callback);
    if (!elementListeners.get(element).size) {
      resizeObserver.unobserve(element);
      elementListeners.delete(element);
    }
  }
}
var elementListeners, resizeObserver, _rs;
var init_observerUtil = __esm({
  "node_modules/rc-resize-observer/es/utils/observerUtil.js"() {
    init_ResizeObserver_es();
    elementListeners = /* @__PURE__ */ new Map();
    resizeObserver = new ResizeObserver_es_default(onResize);
    _rs = true ? onResize : null;
  }
});

// node_modules/rc-resize-observer/es/SingleObserver/DomWrapper.js
var React3, DomWrapper;
var init_DomWrapper = __esm({
  "node_modules/rc-resize-observer/es/SingleObserver/DomWrapper.js"() {
    init_classCallCheck();
    init_createClass();
    init_inherits();
    init_createSuper();
    React3 = __toESM(require_react());
    DomWrapper = (function(_React$Component) {
      _inherits(DomWrapper3, _React$Component);
      var _super = _createSuper(DomWrapper3);
      function DomWrapper3() {
        _classCallCheck(this, DomWrapper3);
        return _super.apply(this, arguments);
      }
      _createClass(DomWrapper3, [{
        key: "render",
        value: function render() {
          return this.props.children;
        }
      }]);
      return DomWrapper3;
    })(React3.Component);
  }
});

// node_modules/rc-resize-observer/es/SingleObserver/index.js
function SingleObserver(props, ref) {
  var children = props.children, disabled = props.disabled;
  var elementRef = React4.useRef(null);
  var wrapperRef = React4.useRef(null);
  var onCollectionResize = React4.useContext(CollectionContext);
  var isRenderProps = typeof children === "function";
  var mergedChildren = isRenderProps ? children(elementRef) : children;
  var sizeRef = React4.useRef({
    width: -1,
    height: -1,
    offsetWidth: -1,
    offsetHeight: -1
  });
  var canRef = !isRenderProps && React4.isValidElement(mergedChildren) && supportRef(mergedChildren);
  var originRef = canRef ? getNodeRef(mergedChildren) : null;
  var mergedRef = useComposeRef(originRef, elementRef);
  var getDom = function getDom2() {
    var _elementRef$current;
    return findDOMNode(elementRef.current) || // Support `nativeElement` format
    (elementRef.current && _typeof(elementRef.current) === "object" ? findDOMNode((_elementRef$current = elementRef.current) === null || _elementRef$current === void 0 ? void 0 : _elementRef$current.nativeElement) : null) || findDOMNode(wrapperRef.current);
  };
  React4.useImperativeHandle(ref, function() {
    return getDom();
  });
  var propsRef = React4.useRef(props);
  propsRef.current = props;
  var onInternalResize = React4.useCallback(function(target) {
    var _propsRef$current = propsRef.current, onResize2 = _propsRef$current.onResize, data = _propsRef$current.data;
    var _target$getBoundingCl = target.getBoundingClientRect(), width = _target$getBoundingCl.width, height = _target$getBoundingCl.height;
    var offsetWidth = target.offsetWidth, offsetHeight = target.offsetHeight;
    var fixedWidth = Math.floor(width);
    var fixedHeight = Math.floor(height);
    if (sizeRef.current.width !== fixedWidth || sizeRef.current.height !== fixedHeight || sizeRef.current.offsetWidth !== offsetWidth || sizeRef.current.offsetHeight !== offsetHeight) {
      var size = {
        width: fixedWidth,
        height: fixedHeight,
        offsetWidth,
        offsetHeight
      };
      sizeRef.current = size;
      var mergedOffsetWidth = offsetWidth === Math.round(width) ? width : offsetWidth;
      var mergedOffsetHeight = offsetHeight === Math.round(height) ? height : offsetHeight;
      var sizeInfo = _objectSpread2(_objectSpread2({}, size), {}, {
        offsetWidth: mergedOffsetWidth,
        offsetHeight: mergedOffsetHeight
      });
      onCollectionResize === null || onCollectionResize === void 0 || onCollectionResize(sizeInfo, target, data);
      if (onResize2) {
        Promise.resolve().then(function() {
          onResize2(sizeInfo, target);
        });
      }
    }
  }, []);
  React4.useEffect(function() {
    var currentElement = getDom();
    if (currentElement && !disabled) {
      observe(currentElement, onInternalResize);
    }
    return function() {
      return unobserve(currentElement, onInternalResize);
    };
  }, [elementRef.current, disabled]);
  return React4.createElement(DomWrapper, {
    ref: wrapperRef
  }, canRef ? React4.cloneElement(mergedChildren, {
    ref: mergedRef
  }) : mergedChildren);
}
var React4, RefSingleObserver, SingleObserver_default;
var init_SingleObserver = __esm({
  "node_modules/rc-resize-observer/es/SingleObserver/index.js"() {
    init_objectSpread2();
    init_typeof();
    init_findDOMNode();
    init_ref();
    React4 = __toESM(require_react());
    init_Collection();
    init_observerUtil();
    init_DomWrapper();
    RefSingleObserver = React4.forwardRef(SingleObserver);
    if (true) {
      RefSingleObserver.displayName = "SingleObserver";
    }
    SingleObserver_default = RefSingleObserver;
  }
});

// node_modules/rc-resize-observer/es/index.js
var es_exports = {};
__export(es_exports, {
  _rs: () => _rs,
  default: () => es_default
});
function ResizeObserver2(props, ref) {
  var children = props.children;
  var childNodes = typeof children === "function" ? [children] : toArray(children);
  if (true) {
    if (childNodes.length > 1) {
      warning(false, "Find more than one child node with `children` in ResizeObserver. Please use ResizeObserver.Collection instead.");
    } else if (childNodes.length === 0) {
      warning(false, "`children` of ResizeObserver is empty. Nothing is in observe.");
    }
  }
  return childNodes.map(function(child, index2) {
    var key = (child === null || child === void 0 ? void 0 : child.key) || "".concat(INTERNAL_PREFIX_KEY, "-").concat(index2);
    return React5.createElement(SingleObserver_default, _extends({}, props, {
      key,
      ref: index2 === 0 ? ref : void 0
    }), child);
  });
}
var React5, INTERNAL_PREFIX_KEY, RefResizeObserver, es_default;
var init_es3 = __esm({
  "node_modules/rc-resize-observer/es/index.js"() {
    init_extends();
    React5 = __toESM(require_react());
    init_toArray();
    init_warning();
    init_SingleObserver();
    init_Collection();
    init_observerUtil();
    INTERNAL_PREFIX_KEY = "rc-observer-key";
    RefResizeObserver = React5.forwardRef(ResizeObserver2);
    if (true) {
      RefResizeObserver.displayName = "ResizeObserver";
    }
    RefResizeObserver.Collection = Collection;
    es_default = RefResizeObserver;
  }
});

// node_modules/rc-util/es/raf.js
function cleanup(id) {
  rafIds.delete(id);
}
var raf, caf, rafUUID, rafIds, wrapperRaf, raf_default;
var init_raf = __esm({
  "node_modules/rc-util/es/raf.js"() {
    raf = function raf2(callback) {
      return +setTimeout(callback, 16);
    };
    caf = function caf2(num) {
      return clearTimeout(num);
    };
    if (typeof window !== "undefined" && "requestAnimationFrame" in window) {
      raf = function raf3(callback) {
        return window.requestAnimationFrame(callback);
      };
      caf = function caf3(handle) {
        return window.cancelAnimationFrame(handle);
      };
    }
    rafUUID = 0;
    rafIds = /* @__PURE__ */ new Map();
    wrapperRaf = function wrapperRaf2(callback) {
      var times = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
      rafUUID += 1;
      var id = rafUUID;
      function callRef(leftTimes) {
        if (leftTimes === 0) {
          cleanup(id);
          callback();
        } else {
          var realId = raf(function() {
            callRef(leftTimes - 1);
          });
          rafIds.set(id, realId);
        }
      }
      callRef(times);
      return id;
    };
    wrapperRaf.cancel = function(id) {
      var realId = rafIds.get(id);
      cleanup(id);
      return caf(realId);
    };
    if (true) {
      wrapperRaf.ids = function() {
        return rafIds;
      };
    }
    raf_default = wrapperRaf;
  }
});

// node_modules/rc-motion/es/context.js
function MotionProvider(_ref) {
  var children = _ref.children, props = _objectWithoutProperties(_ref, _excluded);
  return React6.createElement(Context.Provider, {
    value: props
  }, children);
}
var React6, _excluded, Context;
var init_context = __esm({
  "node_modules/rc-motion/es/context.js"() {
    init_objectWithoutProperties();
    React6 = __toESM(require_react());
    _excluded = ["children"];
    Context = React6.createContext({});
  }
});

// node_modules/rc-motion/es/DomWrapper.js
var React7, DomWrapper2, DomWrapper_default;
var init_DomWrapper2 = __esm({
  "node_modules/rc-motion/es/DomWrapper.js"() {
    init_classCallCheck();
    init_createClass();
    init_inherits();
    init_createSuper();
    React7 = __toESM(require_react());
    DomWrapper2 = (function(_React$Component) {
      _inherits(DomWrapper3, _React$Component);
      var _super = _createSuper(DomWrapper3);
      function DomWrapper3() {
        _classCallCheck(this, DomWrapper3);
        return _super.apply(this, arguments);
      }
      _createClass(DomWrapper3, [{
        key: "render",
        value: function render() {
          return this.props.children;
        }
      }]);
      return DomWrapper3;
    })(React7.Component);
    DomWrapper_default = DomWrapper2;
  }
});

// node_modules/rc-util/es/hooks/useSyncState.js
function useSyncState(defaultValue) {
  var _React$useReducer = React8.useReducer(function(x) {
    return x + 1;
  }, 0), _React$useReducer2 = _slicedToArray(_React$useReducer, 2), forceUpdate = _React$useReducer2[1];
  var currentValueRef = React8.useRef(defaultValue);
  var getValue = useEvent(function() {
    return currentValueRef.current;
  });
  var setValue = useEvent(function(updater) {
    currentValueRef.current = typeof updater === "function" ? updater(currentValueRef.current) : updater;
    forceUpdate();
  });
  return [getValue, setValue];
}
var React8;
var init_useSyncState = __esm({
  "node_modules/rc-util/es/hooks/useSyncState.js"() {
    init_slicedToArray();
    React8 = __toESM(require_react());
    init_useEvent();
  }
});

// node_modules/rc-motion/es/interface.js
var STATUS_NONE, STATUS_APPEAR, STATUS_ENTER, STATUS_LEAVE, STEP_NONE, STEP_PREPARE, STEP_START, STEP_ACTIVE, STEP_ACTIVATED, STEP_PREPARED;
var init_interface = __esm({
  "node_modules/rc-motion/es/interface.js"() {
    STATUS_NONE = "none";
    STATUS_APPEAR = "appear";
    STATUS_ENTER = "enter";
    STATUS_LEAVE = "leave";
    STEP_NONE = "none";
    STEP_PREPARE = "prepare";
    STEP_START = "start";
    STEP_ACTIVE = "active";
    STEP_ACTIVATED = "end";
    STEP_PREPARED = "prepared";
  }
});

// node_modules/rc-motion/es/util/motion.js
function makePrefixMap(styleProp, eventName) {
  var prefixes = {};
  prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
  prefixes["Webkit".concat(styleProp)] = "webkit".concat(eventName);
  prefixes["Moz".concat(styleProp)] = "moz".concat(eventName);
  prefixes["ms".concat(styleProp)] = "MS".concat(eventName);
  prefixes["O".concat(styleProp)] = "o".concat(eventName.toLowerCase());
  return prefixes;
}
function getVendorPrefixes(domSupport, win) {
  var prefixes = {
    animationend: makePrefixMap("Animation", "AnimationEnd"),
    transitionend: makePrefixMap("Transition", "TransitionEnd")
  };
  if (domSupport) {
    if (!("AnimationEvent" in win)) {
      delete prefixes.animationend.animation;
    }
    if (!("TransitionEvent" in win)) {
      delete prefixes.transitionend.transition;
    }
  }
  return prefixes;
}
function getVendorPrefixedEventName(eventName) {
  if (prefixedEventNames[eventName]) {
    return prefixedEventNames[eventName];
  }
  var prefixMap = vendorPrefixes[eventName];
  if (prefixMap) {
    var stylePropList = Object.keys(prefixMap);
    var len = stylePropList.length;
    for (var i = 0; i < len; i += 1) {
      var styleProp = stylePropList[i];
      if (Object.prototype.hasOwnProperty.call(prefixMap, styleProp) && styleProp in style) {
        prefixedEventNames[eventName] = prefixMap[styleProp];
        return prefixedEventNames[eventName];
      }
    }
  }
  return "";
}
function getTransitionName(transitionName, transitionType) {
  if (!transitionName) return null;
  if (_typeof(transitionName) === "object") {
    var type = transitionType.replace(/-\w/g, function(match2) {
      return match2[1].toUpperCase();
    });
    return transitionName[type];
  }
  return "".concat(transitionName, "-").concat(transitionType);
}
var vendorPrefixes, style, _document$createEleme, prefixedEventNames, internalAnimationEndName, internalTransitionEndName, supportTransition, animationEndName, transitionEndName;
var init_motion = __esm({
  "node_modules/rc-motion/es/util/motion.js"() {
    init_typeof();
    init_canUseDom();
    vendorPrefixes = getVendorPrefixes(canUseDom(), typeof window !== "undefined" ? window : {});
    style = {};
    if (canUseDom()) {
      _document$createEleme = document.createElement("div");
      style = _document$createEleme.style;
    }
    prefixedEventNames = {};
    internalAnimationEndName = getVendorPrefixedEventName("animationend");
    internalTransitionEndName = getVendorPrefixedEventName("transitionend");
    supportTransition = !!(internalAnimationEndName && internalTransitionEndName);
    animationEndName = internalAnimationEndName || "animationend";
    transitionEndName = internalTransitionEndName || "transitionend";
  }
});

// node_modules/rc-motion/es/hooks/useDomMotionEvents.js
var React9, import_react2, useDomMotionEvents_default;
var init_useDomMotionEvents = __esm({
  "node_modules/rc-motion/es/hooks/useDomMotionEvents.js"() {
    React9 = __toESM(require_react());
    import_react2 = __toESM(require_react());
    init_motion();
    useDomMotionEvents_default = (function(onInternalMotionEnd) {
      var cacheElementRef = (0, import_react2.useRef)();
      function removeMotionEvents(element) {
        if (element) {
          element.removeEventListener(transitionEndName, onInternalMotionEnd);
          element.removeEventListener(animationEndName, onInternalMotionEnd);
        }
      }
      function patchMotionEvents(element) {
        if (cacheElementRef.current && cacheElementRef.current !== element) {
          removeMotionEvents(cacheElementRef.current);
        }
        if (element && element !== cacheElementRef.current) {
          element.addEventListener(transitionEndName, onInternalMotionEnd);
          element.addEventListener(animationEndName, onInternalMotionEnd);
          cacheElementRef.current = element;
        }
      }
      React9.useEffect(function() {
        return function() {
          removeMotionEvents(cacheElementRef.current);
        };
      }, []);
      return [patchMotionEvents, removeMotionEvents];
    });
  }
});

// node_modules/rc-motion/es/hooks/useIsomorphicLayoutEffect.js
var import_react3, useIsomorphicLayoutEffect, useIsomorphicLayoutEffect_default;
var init_useIsomorphicLayoutEffect = __esm({
  "node_modules/rc-motion/es/hooks/useIsomorphicLayoutEffect.js"() {
    init_canUseDom();
    import_react3 = __toESM(require_react());
    useIsomorphicLayoutEffect = canUseDom() ? import_react3.useLayoutEffect : import_react3.useEffect;
    useIsomorphicLayoutEffect_default = useIsomorphicLayoutEffect;
  }
});

// node_modules/rc-motion/es/hooks/useNextFrame.js
var React10, useNextFrame_default;
var init_useNextFrame = __esm({
  "node_modules/rc-motion/es/hooks/useNextFrame.js"() {
    init_raf();
    React10 = __toESM(require_react());
    useNextFrame_default = (function() {
      var nextFrameRef = React10.useRef(null);
      function cancelNextFrame() {
        raf_default.cancel(nextFrameRef.current);
      }
      function nextFrame(callback) {
        var delay = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 2;
        cancelNextFrame();
        var nextFrameId = raf_default(function() {
          if (delay <= 1) {
            callback({
              isCanceled: function isCanceled() {
                return nextFrameId !== nextFrameRef.current;
              }
            });
          } else {
            nextFrame(callback, delay - 1);
          }
        });
        nextFrameRef.current = nextFrameId;
      }
      React10.useEffect(function() {
        return function() {
          cancelNextFrame();
        };
      }, []);
      return [nextFrame, cancelNextFrame];
    });
  }
});

// node_modules/rc-motion/es/hooks/useStepQueue.js
function isActive(step) {
  return step === STEP_ACTIVE || step === STEP_ACTIVATED;
}
var React11, FULL_STEP_QUEUE, SIMPLE_STEP_QUEUE, SkipStep, DoStep, useStepQueue_default;
var init_useStepQueue = __esm({
  "node_modules/rc-motion/es/hooks/useStepQueue.js"() {
    init_slicedToArray();
    init_useState();
    React11 = __toESM(require_react());
    init_interface();
    init_useIsomorphicLayoutEffect();
    init_useNextFrame();
    FULL_STEP_QUEUE = [STEP_PREPARE, STEP_START, STEP_ACTIVE, STEP_ACTIVATED];
    SIMPLE_STEP_QUEUE = [STEP_PREPARE, STEP_PREPARED];
    SkipStep = false;
    DoStep = true;
    useStepQueue_default = (function(status, prepareOnly, callback) {
      var _useState = useSafeState(STEP_NONE), _useState2 = _slicedToArray(_useState, 2), step = _useState2[0], setStep = _useState2[1];
      var _useNextFrame = useNextFrame_default(), _useNextFrame2 = _slicedToArray(_useNextFrame, 2), nextFrame = _useNextFrame2[0], cancelNextFrame = _useNextFrame2[1];
      function startQueue() {
        setStep(STEP_PREPARE, true);
      }
      var STEP_QUEUE = prepareOnly ? SIMPLE_STEP_QUEUE : FULL_STEP_QUEUE;
      useIsomorphicLayoutEffect_default(function() {
        if (step !== STEP_NONE && step !== STEP_ACTIVATED) {
          var index2 = STEP_QUEUE.indexOf(step);
          var nextStep = STEP_QUEUE[index2 + 1];
          var result = callback(step);
          if (result === SkipStep) {
            setStep(nextStep, true);
          } else if (nextStep) {
            nextFrame(function(info) {
              function doNext() {
                if (info.isCanceled()) return;
                setStep(nextStep, true);
              }
              if (result === true) {
                doNext();
              } else {
                Promise.resolve(result).then(doNext);
              }
            });
          }
        }
      }, [status, step]);
      React11.useEffect(function() {
        return function() {
          cancelNextFrame();
        };
      }, []);
      return [startQueue, step];
    });
  }
});

// node_modules/rc-motion/es/hooks/useStatus.js
function useStatus(supportMotion, visible, getElement, _ref) {
  var _ref$motionEnter = _ref.motionEnter, motionEnter = _ref$motionEnter === void 0 ? true : _ref$motionEnter, _ref$motionAppear = _ref.motionAppear, motionAppear = _ref$motionAppear === void 0 ? true : _ref$motionAppear, _ref$motionLeave = _ref.motionLeave, motionLeave = _ref$motionLeave === void 0 ? true : _ref$motionLeave, motionDeadline = _ref.motionDeadline, motionLeaveImmediately = _ref.motionLeaveImmediately, onAppearPrepare = _ref.onAppearPrepare, onEnterPrepare = _ref.onEnterPrepare, onLeavePrepare = _ref.onLeavePrepare, onAppearStart = _ref.onAppearStart, onEnterStart = _ref.onEnterStart, onLeaveStart = _ref.onLeaveStart, onAppearActive = _ref.onAppearActive, onEnterActive = _ref.onEnterActive, onLeaveActive = _ref.onLeaveActive, onAppearEnd = _ref.onAppearEnd, onEnterEnd = _ref.onEnterEnd, onLeaveEnd = _ref.onLeaveEnd, onVisibleChanged = _ref.onVisibleChanged;
  var _useState = useSafeState(), _useState2 = _slicedToArray(_useState, 2), asyncVisible = _useState2[0], setAsyncVisible = _useState2[1];
  var _useSyncState = useSyncState(STATUS_NONE), _useSyncState2 = _slicedToArray(_useSyncState, 2), getStatus = _useSyncState2[0], setStatus = _useSyncState2[1];
  var _useState3 = useSafeState(null), _useState4 = _slicedToArray(_useState3, 2), style2 = _useState4[0], setStyle = _useState4[1];
  var currentStatus = getStatus();
  var mountedRef = (0, import_react4.useRef)(false);
  var deadlineRef = (0, import_react4.useRef)(null);
  function getDomElement() {
    return getElement();
  }
  var activeRef = (0, import_react4.useRef)(false);
  function updateMotionEndStatus() {
    setStatus(STATUS_NONE);
    setStyle(null, true);
  }
  var onInternalMotionEnd = useEvent(function(event) {
    var status = getStatus();
    if (status === STATUS_NONE) {
      return;
    }
    var element = getDomElement();
    if (event && !event.deadline && event.target !== element) {
      return;
    }
    var currentActive = activeRef.current;
    var canEnd;
    if (status === STATUS_APPEAR && currentActive) {
      canEnd = onAppearEnd === null || onAppearEnd === void 0 ? void 0 : onAppearEnd(element, event);
    } else if (status === STATUS_ENTER && currentActive) {
      canEnd = onEnterEnd === null || onEnterEnd === void 0 ? void 0 : onEnterEnd(element, event);
    } else if (status === STATUS_LEAVE && currentActive) {
      canEnd = onLeaveEnd === null || onLeaveEnd === void 0 ? void 0 : onLeaveEnd(element, event);
    }
    if (currentActive && canEnd !== false) {
      updateMotionEndStatus();
    }
  });
  var _useDomMotionEvents = useDomMotionEvents_default(onInternalMotionEnd), _useDomMotionEvents2 = _slicedToArray(_useDomMotionEvents, 1), patchMotionEvents = _useDomMotionEvents2[0];
  var getEventHandlers = function getEventHandlers2(targetStatus) {
    switch (targetStatus) {
      case STATUS_APPEAR:
        return _defineProperty(_defineProperty(_defineProperty({}, STEP_PREPARE, onAppearPrepare), STEP_START, onAppearStart), STEP_ACTIVE, onAppearActive);
      case STATUS_ENTER:
        return _defineProperty(_defineProperty(_defineProperty({}, STEP_PREPARE, onEnterPrepare), STEP_START, onEnterStart), STEP_ACTIVE, onEnterActive);
      case STATUS_LEAVE:
        return _defineProperty(_defineProperty(_defineProperty({}, STEP_PREPARE, onLeavePrepare), STEP_START, onLeaveStart), STEP_ACTIVE, onLeaveActive);
      default:
        return {};
    }
  };
  var eventHandlers = React12.useMemo(function() {
    return getEventHandlers(currentStatus);
  }, [currentStatus]);
  var _useStepQueue = useStepQueue_default(currentStatus, !supportMotion, function(newStep) {
    if (newStep === STEP_PREPARE) {
      var onPrepare = eventHandlers[STEP_PREPARE];
      if (!onPrepare) {
        return SkipStep;
      }
      return onPrepare(getDomElement());
    }
    if (step in eventHandlers) {
      var _eventHandlers$step;
      setStyle(((_eventHandlers$step = eventHandlers[step]) === null || _eventHandlers$step === void 0 ? void 0 : _eventHandlers$step.call(eventHandlers, getDomElement(), null)) || null);
    }
    if (step === STEP_ACTIVE && currentStatus !== STATUS_NONE) {
      patchMotionEvents(getDomElement());
      if (motionDeadline > 0) {
        clearTimeout(deadlineRef.current);
        deadlineRef.current = setTimeout(function() {
          onInternalMotionEnd({
            deadline: true
          });
        }, motionDeadline);
      }
    }
    if (step === STEP_PREPARED) {
      updateMotionEndStatus();
    }
    return DoStep;
  }), _useStepQueue2 = _slicedToArray(_useStepQueue, 2), startStep = _useStepQueue2[0], step = _useStepQueue2[1];
  var active = isActive(step);
  activeRef.current = active;
  var visibleRef = (0, import_react4.useRef)(null);
  useIsomorphicLayoutEffect_default(function() {
    if (mountedRef.current && visibleRef.current === visible) {
      return;
    }
    setAsyncVisible(visible);
    var isMounted = mountedRef.current;
    mountedRef.current = true;
    var nextStatus;
    if (!isMounted && visible && motionAppear) {
      nextStatus = STATUS_APPEAR;
    }
    if (isMounted && visible && motionEnter) {
      nextStatus = STATUS_ENTER;
    }
    if (isMounted && !visible && motionLeave || !isMounted && motionLeaveImmediately && !visible && motionLeave) {
      nextStatus = STATUS_LEAVE;
    }
    var nextEventHandlers = getEventHandlers(nextStatus);
    if (nextStatus && (supportMotion || nextEventHandlers[STEP_PREPARE])) {
      setStatus(nextStatus);
      startStep();
    } else {
      setStatus(STATUS_NONE);
    }
    visibleRef.current = visible;
  }, [visible]);
  (0, import_react4.useEffect)(function() {
    if (
      // Cancel appear
      currentStatus === STATUS_APPEAR && !motionAppear || // Cancel enter
      currentStatus === STATUS_ENTER && !motionEnter || // Cancel leave
      currentStatus === STATUS_LEAVE && !motionLeave
    ) {
      setStatus(STATUS_NONE);
    }
  }, [motionAppear, motionEnter, motionLeave]);
  (0, import_react4.useEffect)(function() {
    return function() {
      mountedRef.current = false;
      clearTimeout(deadlineRef.current);
    };
  }, []);
  var firstMountChangeRef = React12.useRef(false);
  (0, import_react4.useEffect)(function() {
    if (asyncVisible) {
      firstMountChangeRef.current = true;
    }
    if (asyncVisible !== void 0 && currentStatus === STATUS_NONE) {
      if (firstMountChangeRef.current || asyncVisible) {
        onVisibleChanged === null || onVisibleChanged === void 0 || onVisibleChanged(asyncVisible);
      }
      firstMountChangeRef.current = true;
    }
  }, [asyncVisible, currentStatus]);
  var mergedStyle = style2;
  if (eventHandlers[STEP_PREPARE] && step === STEP_START) {
    mergedStyle = _objectSpread2({
      transition: "none"
    }, mergedStyle);
  }
  return [currentStatus, step, mergedStyle, asyncVisible !== null && asyncVisible !== void 0 ? asyncVisible : visible];
}
var React12, import_react4;
var init_useStatus = __esm({
  "node_modules/rc-motion/es/hooks/useStatus.js"() {
    init_objectSpread2();
    init_defineProperty();
    init_slicedToArray();
    init_es2();
    init_useState();
    init_useSyncState();
    React12 = __toESM(require_react());
    import_react4 = __toESM(require_react());
    init_interface();
    init_useDomMotionEvents();
    init_useIsomorphicLayoutEffect();
    init_useStepQueue();
  }
});

// node_modules/rc-motion/es/CSSMotion.js
function genCSSMotion(config) {
  var transitionSupport = config;
  if (_typeof(config) === "object") {
    transitionSupport = config.transitionSupport;
  }
  function isSupportTransition(props, contextMotion) {
    return !!(props.motionName && transitionSupport && contextMotion !== false);
  }
  var CSSMotion = React13.forwardRef(function(props, ref) {
    var _props$visible = props.visible, visible = _props$visible === void 0 ? true : _props$visible, _props$removeOnLeave = props.removeOnLeave, removeOnLeave = _props$removeOnLeave === void 0 ? true : _props$removeOnLeave, forceRender = props.forceRender, children = props.children, motionName = props.motionName, leavedClassName = props.leavedClassName, eventProps = props.eventProps;
    var _React$useContext = React13.useContext(Context), contextMotion = _React$useContext.motion;
    var supportMotion = isSupportTransition(props, contextMotion);
    var nodeRef = (0, import_react5.useRef)();
    var wrapperNodeRef = (0, import_react5.useRef)();
    function getDomElement() {
      try {
        return nodeRef.current instanceof HTMLElement ? nodeRef.current : findDOMNode(wrapperNodeRef.current);
      } catch (e) {
        return null;
      }
    }
    var _useStatus = useStatus(supportMotion, visible, getDomElement, props), _useStatus2 = _slicedToArray(_useStatus, 4), status = _useStatus2[0], statusStep = _useStatus2[1], statusStyle = _useStatus2[2], mergedVisible = _useStatus2[3];
    var renderedRef = React13.useRef(mergedVisible);
    if (mergedVisible) {
      renderedRef.current = true;
    }
    var setNodeRef = React13.useCallback(function(node) {
      nodeRef.current = node;
      fillRef(ref, node);
    }, [ref]);
    var motionChildren;
    var mergedProps = _objectSpread2(_objectSpread2({}, eventProps), {}, {
      visible
    });
    if (!children) {
      motionChildren = null;
    } else if (status === STATUS_NONE) {
      if (mergedVisible) {
        motionChildren = children(_objectSpread2({}, mergedProps), setNodeRef);
      } else if (!removeOnLeave && renderedRef.current && leavedClassName) {
        motionChildren = children(_objectSpread2(_objectSpread2({}, mergedProps), {}, {
          className: leavedClassName
        }), setNodeRef);
      } else if (forceRender || !removeOnLeave && !leavedClassName) {
        motionChildren = children(_objectSpread2(_objectSpread2({}, mergedProps), {}, {
          style: {
            display: "none"
          }
        }), setNodeRef);
      } else {
        motionChildren = null;
      }
    } else {
      var statusSuffix;
      if (statusStep === STEP_PREPARE) {
        statusSuffix = "prepare";
      } else if (isActive(statusStep)) {
        statusSuffix = "active";
      } else if (statusStep === STEP_START) {
        statusSuffix = "start";
      }
      var motionCls = getTransitionName(motionName, "".concat(status, "-").concat(statusSuffix));
      motionChildren = children(_objectSpread2(_objectSpread2({}, mergedProps), {}, {
        className: (0, import_classnames.default)(getTransitionName(motionName, status), _defineProperty(_defineProperty({}, motionCls, motionCls && statusSuffix), motionName, typeof motionName === "string")),
        style: statusStyle
      }), setNodeRef);
    }
    if (React13.isValidElement(motionChildren) && supportRef(motionChildren)) {
      var originNodeRef = getNodeRef(motionChildren);
      if (!originNodeRef) {
        motionChildren = React13.cloneElement(motionChildren, {
          ref: setNodeRef
        });
      }
    }
    return React13.createElement(DomWrapper_default, {
      ref: wrapperNodeRef
    }, motionChildren);
  });
  CSSMotion.displayName = "CSSMotion";
  return CSSMotion;
}
var import_classnames, React13, import_react5, CSSMotion_default;
var init_CSSMotion = __esm({
  "node_modules/rc-motion/es/CSSMotion.js"() {
    init_defineProperty();
    init_objectSpread2();
    init_slicedToArray();
    init_typeof();
    import_classnames = __toESM(require_classnames());
    init_findDOMNode();
    init_ref();
    React13 = __toESM(require_react());
    import_react5 = __toESM(require_react());
    init_context();
    init_DomWrapper2();
    init_useStatus();
    init_useStepQueue();
    init_interface();
    init_motion();
    CSSMotion_default = genCSSMotion(supportTransition);
  }
});

// node_modules/rc-motion/es/util/diff.js
function wrapKeyToObject(key) {
  var keyObj;
  if (key && _typeof(key) === "object" && "key" in key) {
    keyObj = key;
  } else {
    keyObj = {
      key
    };
  }
  return _objectSpread2(_objectSpread2({}, keyObj), {}, {
    key: String(keyObj.key)
  });
}
function parseKeys() {
  var keys = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
  return keys.map(wrapKeyToObject);
}
function diffKeys() {
  var prevKeys = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
  var currentKeys = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
  var list = [];
  var currentIndex = 0;
  var currentLen = currentKeys.length;
  var prevKeyObjects = parseKeys(prevKeys);
  var currentKeyObjects = parseKeys(currentKeys);
  prevKeyObjects.forEach(function(keyObj) {
    var hit = false;
    for (var i = currentIndex; i < currentLen; i += 1) {
      var currentKeyObj = currentKeyObjects[i];
      if (currentKeyObj.key === keyObj.key) {
        if (currentIndex < i) {
          list = list.concat(currentKeyObjects.slice(currentIndex, i).map(function(obj) {
            return _objectSpread2(_objectSpread2({}, obj), {}, {
              status: STATUS_ADD
            });
          }));
          currentIndex = i;
        }
        list.push(_objectSpread2(_objectSpread2({}, currentKeyObj), {}, {
          status: STATUS_KEEP
        }));
        currentIndex += 1;
        hit = true;
        break;
      }
    }
    if (!hit) {
      list.push(_objectSpread2(_objectSpread2({}, keyObj), {}, {
        status: STATUS_REMOVE
      }));
    }
  });
  if (currentIndex < currentLen) {
    list = list.concat(currentKeyObjects.slice(currentIndex).map(function(obj) {
      return _objectSpread2(_objectSpread2({}, obj), {}, {
        status: STATUS_ADD
      });
    }));
  }
  var keys = {};
  list.forEach(function(_ref) {
    var key = _ref.key;
    keys[key] = (keys[key] || 0) + 1;
  });
  var duplicatedKeys = Object.keys(keys).filter(function(key) {
    return keys[key] > 1;
  });
  duplicatedKeys.forEach(function(matchKey) {
    list = list.filter(function(_ref2) {
      var key = _ref2.key, status = _ref2.status;
      return key !== matchKey || status !== STATUS_REMOVE;
    });
    list.forEach(function(node) {
      if (node.key === matchKey) {
        node.status = STATUS_KEEP;
      }
    });
  });
  return list;
}
var STATUS_ADD, STATUS_KEEP, STATUS_REMOVE, STATUS_REMOVED;
var init_diff = __esm({
  "node_modules/rc-motion/es/util/diff.js"() {
    init_objectSpread2();
    init_typeof();
    STATUS_ADD = "add";
    STATUS_KEEP = "keep";
    STATUS_REMOVE = "remove";
    STATUS_REMOVED = "removed";
  }
});

// node_modules/rc-motion/es/CSSMotionList.js
function genCSSMotionList(transitionSupport) {
  var CSSMotion = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : CSSMotion_default;
  var CSSMotionList = (function(_React$Component) {
    _inherits(CSSMotionList2, _React$Component);
    var _super = _createSuper(CSSMotionList2);
    function CSSMotionList2() {
      var _this;
      _classCallCheck(this, CSSMotionList2);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _super.call.apply(_super, [this].concat(args));
      _defineProperty(_assertThisInitialized(_this), "state", {
        keyEntities: []
      });
      _defineProperty(_assertThisInitialized(_this), "removeKey", function(removeKey) {
        _this.setState(function(prevState) {
          var nextKeyEntities = prevState.keyEntities.map(function(entity) {
            if (entity.key !== removeKey) return entity;
            return _objectSpread2(_objectSpread2({}, entity), {}, {
              status: STATUS_REMOVED
            });
          });
          return {
            keyEntities: nextKeyEntities
          };
        }, function() {
          var keyEntities = _this.state.keyEntities;
          var restKeysCount = keyEntities.filter(function(_ref) {
            var status = _ref.status;
            return status !== STATUS_REMOVED;
          }).length;
          if (restKeysCount === 0 && _this.props.onAllRemoved) {
            _this.props.onAllRemoved();
          }
        });
      });
      return _this;
    }
    _createClass(CSSMotionList2, [{
      key: "render",
      value: function render() {
        var _this2 = this;
        var keyEntities = this.state.keyEntities;
        var _this$props = this.props, component = _this$props.component, children = _this$props.children, _onVisibleChanged = _this$props.onVisibleChanged, onAllRemoved = _this$props.onAllRemoved, restProps = _objectWithoutProperties(_this$props, _excluded2);
        var Component6 = component || React14.Fragment;
        var motionProps = {};
        MOTION_PROP_NAMES.forEach(function(prop) {
          motionProps[prop] = restProps[prop];
          delete restProps[prop];
        });
        delete restProps.keys;
        return React14.createElement(Component6, restProps, keyEntities.map(function(_ref2, index2) {
          var status = _ref2.status, eventProps = _objectWithoutProperties(_ref2, _excluded22);
          var visible = status === STATUS_ADD || status === STATUS_KEEP;
          return React14.createElement(CSSMotion, _extends({}, motionProps, {
            key: eventProps.key,
            visible,
            eventProps,
            onVisibleChanged: function onVisibleChanged(changedVisible) {
              _onVisibleChanged === null || _onVisibleChanged === void 0 || _onVisibleChanged(changedVisible, {
                key: eventProps.key
              });
              if (!changedVisible) {
                _this2.removeKey(eventProps.key);
              }
            }
          }), function(props, ref) {
            return children(_objectSpread2(_objectSpread2({}, props), {}, {
              index: index2
            }), ref);
          });
        }));
      }
    }], [{
      key: "getDerivedStateFromProps",
      value: function getDerivedStateFromProps(_ref3, _ref4) {
        var keys = _ref3.keys;
        var keyEntities = _ref4.keyEntities;
        var parsedKeyObjects = parseKeys(keys);
        var mixedKeyEntities = diffKeys(keyEntities, parsedKeyObjects);
        return {
          keyEntities: mixedKeyEntities.filter(function(entity) {
            var prevEntity = keyEntities.find(function(_ref5) {
              var key = _ref5.key;
              return entity.key === key;
            });
            if (prevEntity && prevEntity.status === STATUS_REMOVED && entity.status === STATUS_REMOVE) {
              return false;
            }
            return true;
          })
        };
      }
    }]);
    return CSSMotionList2;
  })(React14.Component);
  _defineProperty(CSSMotionList, "defaultProps", {
    component: "div"
  });
  return CSSMotionList;
}
var React14, _excluded2, _excluded22, MOTION_PROP_NAMES, CSSMotionList_default;
var init_CSSMotionList = __esm({
  "node_modules/rc-motion/es/CSSMotionList.js"() {
    init_extends();
    init_objectWithoutProperties();
    init_objectSpread2();
    init_classCallCheck();
    init_createClass();
    init_assertThisInitialized();
    init_inherits();
    init_createSuper();
    init_defineProperty();
    React14 = __toESM(require_react());
    init_CSSMotion();
    init_diff();
    init_motion();
    _excluded2 = ["component", "children", "onVisibleChanged", "onAllRemoved"];
    _excluded22 = ["status"];
    MOTION_PROP_NAMES = ["eventProps", "visible", "children", "motionName", "motionAppear", "motionEnter", "motionLeave", "motionLeaveImmediately", "motionDeadline", "removeOnLeave", "leavedClassName", "onAppearPrepare", "onAppearStart", "onAppearActive", "onAppearEnd", "onEnterStart", "onEnterActive", "onEnterEnd", "onLeaveStart", "onLeaveActive", "onLeaveEnd"];
    CSSMotionList_default = genCSSMotionList(supportTransition);
  }
});

// node_modules/rc-motion/es/index.js
var es_exports2 = {};
__export(es_exports2, {
  CSSMotionList: () => CSSMotionList_default,
  Provider: () => MotionProvider,
  default: () => es_default2
});
var es_default2;
var init_es4 = __esm({
  "node_modules/rc-motion/es/index.js"() {
    init_CSSMotion();
    init_CSSMotionList();
    init_context();
    es_default2 = CSSMotion_default;
  }
});

// node_modules/rc-util/es/pickAttrs.js
function match(key, prefix) {
  return key.indexOf(prefix) === 0;
}
function pickAttrs(props) {
  var ariaOnly = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
  var mergedConfig;
  if (ariaOnly === false) {
    mergedConfig = {
      aria: true,
      data: true,
      attr: true
    };
  } else if (ariaOnly === true) {
    mergedConfig = {
      aria: true
    };
  } else {
    mergedConfig = _objectSpread2({}, ariaOnly);
  }
  var attrs = {};
  Object.keys(props).forEach(function(key) {
    if (
      // Aria
      mergedConfig.aria && (key === "role" || match(key, ariaPrefix)) || // Data
      mergedConfig.data && match(key, dataPrefix) || // Attr
      mergedConfig.attr && propList.includes(key)
    ) {
      attrs[key] = props[key];
    }
  });
  return attrs;
}
var attributes, eventsName, propList, ariaPrefix, dataPrefix;
var init_pickAttrs = __esm({
  "node_modules/rc-util/es/pickAttrs.js"() {
    init_objectSpread2();
    attributes = "accept acceptCharset accessKey action allowFullScreen allowTransparency\n    alt async autoComplete autoFocus autoPlay capture cellPadding cellSpacing challenge\n    charSet checked classID className colSpan cols content contentEditable contextMenu\n    controls coords crossOrigin data dateTime default defer dir disabled download draggable\n    encType form formAction formEncType formMethod formNoValidate formTarget frameBorder\n    headers height hidden high href hrefLang htmlFor httpEquiv icon id inputMode integrity\n    is keyParams keyType kind label lang list loop low manifest marginHeight marginWidth max maxLength media\n    mediaGroup method min minLength multiple muted name noValidate nonce open\n    optimum pattern placeholder poster preload radioGroup readOnly rel required\n    reversed role rowSpan rows sandbox scope scoped scrolling seamless selected\n    shape size sizes span spellCheck src srcDoc srcLang srcSet start step style\n    summary tabIndex target title type useMap value width wmode wrap";
    eventsName = "onCopy onCut onPaste onCompositionEnd onCompositionStart onCompositionUpdate onKeyDown\n    onKeyPress onKeyUp onFocus onBlur onChange onInput onSubmit onClick onContextMenu onDoubleClick\n    onDrag onDragEnd onDragEnter onDragExit onDragLeave onDragOver onDragStart onDrop onMouseDown\n    onMouseEnter onMouseLeave onMouseMove onMouseOut onMouseOver onMouseUp onSelect onTouchCancel\n    onTouchEnd onTouchMove onTouchStart onScroll onWheel onAbort onCanPlay onCanPlayThrough\n    onDurationChange onEmptied onEncrypted onEnded onError onLoadedData onLoadedMetadata\n    onLoadStart onPause onPlay onPlaying onProgress onRateChange onSeeked onSeeking onStalled onSuspend onTimeUpdate onVolumeChange onWaiting onLoad onError";
    propList = "".concat(attributes, " ").concat(eventsName).split(/[\s\n]+/);
    ariaPrefix = "aria-";
    dataPrefix = "data-";
  }
});

// node_modules/rc-util/es/KeyCode.js
var KeyCode, KeyCode_default;
var init_KeyCode = __esm({
  "node_modules/rc-util/es/KeyCode.js"() {
    KeyCode = {
      /**
       * MAC_ENTER
       */
      MAC_ENTER: 3,
      /**
       * BACKSPACE
       */
      BACKSPACE: 8,
      /**
       * TAB
       */
      TAB: 9,
      /**
       * NUMLOCK on FF/Safari Mac
       */
      NUM_CENTER: 12,
      // NUMLOCK on FF/Safari Mac
      /**
       * ENTER
       */
      ENTER: 13,
      /**
       * SHIFT
       */
      SHIFT: 16,
      /**
       * CTRL
       */
      CTRL: 17,
      /**
       * ALT
       */
      ALT: 18,
      /**
       * PAUSE
       */
      PAUSE: 19,
      /**
       * CAPS_LOCK
       */
      CAPS_LOCK: 20,
      /**
       * ESC
       */
      ESC: 27,
      /**
       * SPACE
       */
      SPACE: 32,
      /**
       * PAGE_UP
       */
      PAGE_UP: 33,
      // also NUM_NORTH_EAST
      /**
       * PAGE_DOWN
       */
      PAGE_DOWN: 34,
      // also NUM_SOUTH_EAST
      /**
       * END
       */
      END: 35,
      // also NUM_SOUTH_WEST
      /**
       * HOME
       */
      HOME: 36,
      // also NUM_NORTH_WEST
      /**
       * LEFT
       */
      LEFT: 37,
      // also NUM_WEST
      /**
       * UP
       */
      UP: 38,
      // also NUM_NORTH
      /**
       * RIGHT
       */
      RIGHT: 39,
      // also NUM_EAST
      /**
       * DOWN
       */
      DOWN: 40,
      // also NUM_SOUTH
      /**
       * PRINT_SCREEN
       */
      PRINT_SCREEN: 44,
      /**
       * INSERT
       */
      INSERT: 45,
      // also NUM_INSERT
      /**
       * DELETE
       */
      DELETE: 46,
      // also NUM_DELETE
      /**
       * ZERO
       */
      ZERO: 48,
      /**
       * ONE
       */
      ONE: 49,
      /**
       * TWO
       */
      TWO: 50,
      /**
       * THREE
       */
      THREE: 51,
      /**
       * FOUR
       */
      FOUR: 52,
      /**
       * FIVE
       */
      FIVE: 53,
      /**
       * SIX
       */
      SIX: 54,
      /**
       * SEVEN
       */
      SEVEN: 55,
      /**
       * EIGHT
       */
      EIGHT: 56,
      /**
       * NINE
       */
      NINE: 57,
      /**
       * QUESTION_MARK
       */
      QUESTION_MARK: 63,
      // needs localization
      /**
       * A
       */
      A: 65,
      /**
       * B
       */
      B: 66,
      /**
       * C
       */
      C: 67,
      /**
       * D
       */
      D: 68,
      /**
       * E
       */
      E: 69,
      /**
       * F
       */
      F: 70,
      /**
       * G
       */
      G: 71,
      /**
       * H
       */
      H: 72,
      /**
       * I
       */
      I: 73,
      /**
       * J
       */
      J: 74,
      /**
       * K
       */
      K: 75,
      /**
       * L
       */
      L: 76,
      /**
       * M
       */
      M: 77,
      /**
       * N
       */
      N: 78,
      /**
       * O
       */
      O: 79,
      /**
       * P
       */
      P: 80,
      /**
       * Q
       */
      Q: 81,
      /**
       * R
       */
      R: 82,
      /**
       * S
       */
      S: 83,
      /**
       * T
       */
      T: 84,
      /**
       * U
       */
      U: 85,
      /**
       * V
       */
      V: 86,
      /**
       * W
       */
      W: 87,
      /**
       * X
       */
      X: 88,
      /**
       * Y
       */
      Y: 89,
      /**
       * Z
       */
      Z: 90,
      /**
       * META
       */
      META: 91,
      // WIN_KEY_LEFT
      /**
       * WIN_KEY_RIGHT
       */
      WIN_KEY_RIGHT: 92,
      /**
       * CONTEXT_MENU
       */
      CONTEXT_MENU: 93,
      /**
       * NUM_ZERO
       */
      NUM_ZERO: 96,
      /**
       * NUM_ONE
       */
      NUM_ONE: 97,
      /**
       * NUM_TWO
       */
      NUM_TWO: 98,
      /**
       * NUM_THREE
       */
      NUM_THREE: 99,
      /**
       * NUM_FOUR
       */
      NUM_FOUR: 100,
      /**
       * NUM_FIVE
       */
      NUM_FIVE: 101,
      /**
       * NUM_SIX
       */
      NUM_SIX: 102,
      /**
       * NUM_SEVEN
       */
      NUM_SEVEN: 103,
      /**
       * NUM_EIGHT
       */
      NUM_EIGHT: 104,
      /**
       * NUM_NINE
       */
      NUM_NINE: 105,
      /**
       * NUM_MULTIPLY
       */
      NUM_MULTIPLY: 106,
      /**
       * NUM_PLUS
       */
      NUM_PLUS: 107,
      /**
       * NUM_MINUS
       */
      NUM_MINUS: 109,
      /**
       * NUM_PERIOD
       */
      NUM_PERIOD: 110,
      /**
       * NUM_DIVISION
       */
      NUM_DIVISION: 111,
      /**
       * F1
       */
      F1: 112,
      /**
       * F2
       */
      F2: 113,
      /**
       * F3
       */
      F3: 114,
      /**
       * F4
       */
      F4: 115,
      /**
       * F5
       */
      F5: 116,
      /**
       * F6
       */
      F6: 117,
      /**
       * F7
       */
      F7: 118,
      /**
       * F8
       */
      F8: 119,
      /**
       * F9
       */
      F9: 120,
      /**
       * F10
       */
      F10: 121,
      /**
       * F11
       */
      F11: 122,
      /**
       * F12
       */
      F12: 123,
      /**
       * NUMLOCK
       */
      NUMLOCK: 144,
      /**
       * SEMICOLON
       */
      SEMICOLON: 186,
      // needs localization
      /**
       * DASH
       */
      DASH: 189,
      // needs localization
      /**
       * EQUALS
       */
      EQUALS: 187,
      // needs localization
      /**
       * COMMA
       */
      COMMA: 188,
      // needs localization
      /**
       * PERIOD
       */
      PERIOD: 190,
      // needs localization
      /**
       * SLASH
       */
      SLASH: 191,
      // needs localization
      /**
       * APOSTROPHE
       */
      APOSTROPHE: 192,
      // needs localization
      /**
       * SINGLE_QUOTE
       */
      SINGLE_QUOTE: 222,
      // needs localization
      /**
       * OPEN_SQUARE_BRACKET
       */
      OPEN_SQUARE_BRACKET: 219,
      // needs localization
      /**
       * BACKSLASH
       */
      BACKSLASH: 220,
      // needs localization
      /**
       * CLOSE_SQUARE_BRACKET
       */
      CLOSE_SQUARE_BRACKET: 221,
      // needs localization
      /**
       * WIN_KEY
       */
      WIN_KEY: 224,
      /**
       * MAC_FF_META
       */
      MAC_FF_META: 224,
      // Firefox (Gecko) fires this for the meta key instead of 91
      /**
       * WIN_IME
       */
      WIN_IME: 229,
      // ======================== Function ========================
      /**
       * whether text and modified key is entered at the same time.
       */
      isTextModifyingKeyEvent: function isTextModifyingKeyEvent(e) {
        var keyCode = e.keyCode;
        if (e.altKey && !e.ctrlKey || e.metaKey || // Function keys don't generate text
        keyCode >= KeyCode.F1 && keyCode <= KeyCode.F12) {
          return false;
        }
        switch (keyCode) {
          case KeyCode.ALT:
          case KeyCode.CAPS_LOCK:
          case KeyCode.CONTEXT_MENU:
          case KeyCode.CTRL:
          case KeyCode.DOWN:
          case KeyCode.END:
          case KeyCode.ESC:
          case KeyCode.HOME:
          case KeyCode.INSERT:
          case KeyCode.LEFT:
          case KeyCode.MAC_FF_META:
          case KeyCode.META:
          case KeyCode.NUMLOCK:
          case KeyCode.NUM_CENTER:
          case KeyCode.PAGE_DOWN:
          case KeyCode.PAGE_UP:
          case KeyCode.PAUSE:
          case KeyCode.PRINT_SCREEN:
          case KeyCode.RIGHT:
          case KeyCode.SHIFT:
          case KeyCode.UP:
          case KeyCode.WIN_KEY:
          case KeyCode.WIN_KEY_RIGHT:
            return false;
          default:
            return true;
        }
      },
      /**
       * whether character is entered.
       */
      isCharacterKey: function isCharacterKey(keyCode) {
        if (keyCode >= KeyCode.ZERO && keyCode <= KeyCode.NINE) {
          return true;
        }
        if (keyCode >= KeyCode.NUM_ZERO && keyCode <= KeyCode.NUM_MULTIPLY) {
          return true;
        }
        if (keyCode >= KeyCode.A && keyCode <= KeyCode.Z) {
          return true;
        }
        if (window.navigator.userAgent.indexOf("WebKit") !== -1 && keyCode === 0) {
          return true;
        }
        switch (keyCode) {
          case KeyCode.SPACE:
          case KeyCode.QUESTION_MARK:
          case KeyCode.NUM_PLUS:
          case KeyCode.NUM_MINUS:
          case KeyCode.NUM_PERIOD:
          case KeyCode.NUM_DIVISION:
          case KeyCode.SEMICOLON:
          case KeyCode.DASH:
          case KeyCode.EQUALS:
          case KeyCode.COMMA:
          case KeyCode.PERIOD:
          case KeyCode.SLASH:
          case KeyCode.APOSTROPHE:
          case KeyCode.SINGLE_QUOTE:
          case KeyCode.OPEN_SQUARE_BRACKET:
          case KeyCode.BACKSLASH:
          case KeyCode.CLOSE_SQUARE_BRACKET:
            return true;
          default:
            return false;
        }
      }
    };
    KeyCode_default = KeyCode;
  }
});

// node_modules/rc-util/es/omit.js
function omit(obj, fields) {
  var clone = Object.assign({}, obj);
  if (Array.isArray(fields)) {
    fields.forEach(function(key) {
      delete clone[key];
    });
  }
  return clone;
}
var init_omit = __esm({
  "node_modules/rc-util/es/omit.js"() {
  }
});

// node_modules/rc-util/es/hooks/useId.js
function getUseId() {
  var fullClone = _objectSpread2({}, React15);
  return fullClone.useId;
}
var React15, uuid, useOriginId, useId_default;
var init_useId = __esm({
  "node_modules/rc-util/es/hooks/useId.js"() {
    init_slicedToArray();
    init_objectSpread2();
    React15 = __toESM(require_react());
    uuid = 0;
    useOriginId = getUseId();
    useId_default = useOriginId ? (
      // Use React `useId`
      function useId(id) {
        var reactId = useOriginId();
        if (id) {
          return id;
        }
        if (false) {
          return "test-id";
        }
        return reactId;
      }
    ) : (
      // Use compatible of `useId`
      function useCompatId(id) {
        var _React$useState = React15.useState("ssr-id"), _React$useState2 = _slicedToArray(_React$useState, 2), innerId = _React$useState2[0], setInnerId = _React$useState2[1];
        React15.useEffect(function() {
          var nextId = uuid;
          uuid += 1;
          setInnerId("rc_unique_".concat(nextId));
        }, []);
        if (id) {
          return id;
        }
        if (false) {
          return "test-id";
        }
        return innerId;
      }
    );
  }
});

// node_modules/rc-select/es/OptGroup.js
var OptGroup, OptGroup_default;
var init_OptGroup = __esm({
  "node_modules/rc-select/es/OptGroup.js"() {
    OptGroup = function OptGroup2() {
      return null;
    };
    OptGroup.isSelectOptGroup = true;
    OptGroup_default = OptGroup;
  }
});

// node_modules/rc-select/es/Option.js
var Option, Option_default;
var init_Option = __esm({
  "node_modules/rc-select/es/Option.js"() {
    Option = function Option2() {
      return null;
    };
    Option.isSelectOption = true;
    Option_default = Option;
  }
});

// node_modules/rc-util/es/isMobile.js
var isMobile_default;
var init_isMobile = __esm({
  "node_modules/rc-util/es/isMobile.js"() {
    isMobile_default = (function() {
      if (typeof navigator === "undefined" || typeof window === "undefined") {
        return false;
      }
      var agent = navigator.userAgent || navigator.vendor || window.opera;
      return /(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(agent) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw-(n|u)|c55\/|capi|ccwa|cdm-|cell|chtm|cldc|cmd-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc-s|devi|dica|dmob|do(c|p)o|ds(12|-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(-|_)|g1 u|g560|gene|gf-5|g-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd-(m|p|t)|hei-|hi(pt|ta)|hp( i|ip)|hs-c|ht(c(-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i-(20|go|ma)|i230|iac( |-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|-[a-w])|libw|lynx|m1-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|-([1-8]|c))|phil|pire|pl(ay|uc)|pn-2|po(ck|rt|se)|prox|psio|pt-g|qa-a|qc(07|12|21|32|60|-[2-7]|i-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h-|oo|p-)|sdk\/|se(c(-|0|1)|47|mc|nd|ri)|sgh-|shar|sie(-|m)|sk-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h-|v-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl-|tdg-|tel(i|m)|tim-|t-mo|to(pl|sh)|ts(70|m-|m3|m5)|tx-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas-|your|zeto|zte-/i.test(agent === null || agent === void 0 ? void 0 : agent.substr(0, 4));
    });
  }
});

// node_modules/rc-select/es/TransBtn.js
var React16, import_classnames2, TransBtn, TransBtn_default;
var init_TransBtn = __esm({
  "node_modules/rc-select/es/TransBtn.js"() {
    React16 = __toESM(require_react());
    import_classnames2 = __toESM(require_classnames());
    TransBtn = function TransBtn2(props) {
      var className = props.className, customizeIcon = props.customizeIcon, customizeIconProps = props.customizeIconProps, children = props.children, _onMouseDown = props.onMouseDown, onClick = props.onClick;
      var icon = typeof customizeIcon === "function" ? customizeIcon(customizeIconProps) : customizeIcon;
      return React16.createElement("span", {
        className,
        onMouseDown: function onMouseDown(event) {
          event.preventDefault();
          _onMouseDown === null || _onMouseDown === void 0 || _onMouseDown(event);
        },
        style: {
          userSelect: "none",
          WebkitUserSelect: "none"
        },
        unselectable: "on",
        onClick,
        "aria-hidden": true
      }, icon !== void 0 ? icon : React16.createElement("span", {
        className: (0, import_classnames2.default)(className.split(/\s+/).map(function(cls) {
          return "".concat(cls, "-icon");
        }))
      }, children));
    };
    TransBtn_default = TransBtn;
  }
});

// node_modules/rc-select/es/hooks/useAllowClear.js
var import_react6, useAllowClear;
var init_useAllowClear = __esm({
  "node_modules/rc-select/es/hooks/useAllowClear.js"() {
    init_typeof();
    init_TransBtn();
    import_react6 = __toESM(require_react());
    useAllowClear = function useAllowClear2(prefixCls, onClearMouseDown, displayValues, allowClear, clearIcon) {
      var disabled = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : false;
      var mergedSearchValue = arguments.length > 6 ? arguments[6] : void 0;
      var mode = arguments.length > 7 ? arguments[7] : void 0;
      var mergedClearIcon = import_react6.default.useMemo(function() {
        if (_typeof(allowClear) === "object") {
          return allowClear.clearIcon;
        }
        if (clearIcon) {
          return clearIcon;
        }
      }, [allowClear, clearIcon]);
      var mergedAllowClear = import_react6.default.useMemo(function() {
        if (!disabled && !!allowClear && (displayValues.length || mergedSearchValue) && !(mode === "combobox" && mergedSearchValue === "")) {
          return true;
        }
        return false;
      }, [allowClear, disabled, displayValues.length, mergedSearchValue, mode]);
      return {
        allowClear: mergedAllowClear,
        clearIcon: import_react6.default.createElement(TransBtn_default, {
          className: "".concat(prefixCls, "-clear"),
          onMouseDown: onClearMouseDown,
          customizeIcon: mergedClearIcon
        }, "×")
      };
    };
  }
});

// node_modules/rc-select/es/hooks/useBaseProps.js
function useBaseProps() {
  return React18.useContext(BaseSelectContext);
}
var React18, BaseSelectContext;
var init_useBaseProps = __esm({
  "node_modules/rc-select/es/hooks/useBaseProps.js"() {
    React18 = __toESM(require_react());
    BaseSelectContext = React18.createContext(null);
  }
});

// node_modules/rc-select/es/hooks/useDelayReset.js
function useDelayReset() {
  var timeout = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 10;
  var _React$useState = React19.useState(false), _React$useState2 = _slicedToArray(_React$useState, 2), bool = _React$useState2[0], setBool = _React$useState2[1];
  var delayRef = React19.useRef(null);
  var cancelLatest = function cancelLatest2() {
    window.clearTimeout(delayRef.current);
  };
  React19.useEffect(function() {
    return cancelLatest;
  }, []);
  var delaySetBool = function delaySetBool2(value, callback) {
    cancelLatest();
    delayRef.current = window.setTimeout(function() {
      setBool(value);
      if (callback) {
        callback();
      }
    }, timeout);
  };
  return [bool, delaySetBool, cancelLatest];
}
var React19;
var init_useDelayReset = __esm({
  "node_modules/rc-select/es/hooks/useDelayReset.js"() {
    init_slicedToArray();
    React19 = __toESM(require_react());
  }
});

// node_modules/rc-select/es/hooks/useLock.js
function useLock() {
  var duration = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 250;
  var lockRef = React20.useRef(null);
  var timeoutRef = React20.useRef(null);
  React20.useEffect(function() {
    return function() {
      window.clearTimeout(timeoutRef.current);
    };
  }, []);
  function doLock(locked) {
    if (locked || lockRef.current === null) {
      lockRef.current = locked;
    }
    window.clearTimeout(timeoutRef.current);
    timeoutRef.current = window.setTimeout(function() {
      lockRef.current = null;
    }, duration);
  }
  return [function() {
    return lockRef.current;
  }, doLock];
}
var React20;
var init_useLock = __esm({
  "node_modules/rc-select/es/hooks/useLock.js"() {
    React20 = __toESM(require_react());
  }
});

// node_modules/rc-select/es/hooks/useSelectTriggerControl.js
function useSelectTriggerControl(elements, open, triggerOpen, customizedTrigger) {
  var propsRef = React21.useRef(null);
  propsRef.current = {
    open,
    triggerOpen,
    customizedTrigger
  };
  React21.useEffect(function() {
    function onGlobalMouseDown(event) {
      var _propsRef$current;
      if ((_propsRef$current = propsRef.current) !== null && _propsRef$current !== void 0 && _propsRef$current.customizedTrigger) {
        return;
      }
      var target = event.target;
      if (target.shadowRoot && event.composed) {
        target = event.composedPath()[0] || target;
      }
      if (propsRef.current.open && elements().filter(function(element) {
        return element;
      }).every(function(element) {
        return !element.contains(target) && element !== target;
      })) {
        propsRef.current.triggerOpen(false);
      }
    }
    window.addEventListener("mousedown", onGlobalMouseDown);
    return function() {
      return window.removeEventListener("mousedown", onGlobalMouseDown);
    };
  }, []);
}
var React21;
var init_useSelectTriggerControl = __esm({
  "node_modules/rc-select/es/hooks/useSelectTriggerControl.js"() {
    React21 = __toESM(require_react());
  }
});

// node_modules/rc-select/es/utils/keyUtil.js
function isValidateOpenKey(currentKeyCode) {
  return (
    // Undefined for Edge bug:
    // https://github.com/ant-design/ant-design/issues/51292
    currentKeyCode && // Other keys
    ![
      // System function button
      KeyCode_default.ESC,
      KeyCode_default.SHIFT,
      KeyCode_default.BACKSPACE,
      KeyCode_default.TAB,
      KeyCode_default.WIN_KEY,
      KeyCode_default.ALT,
      KeyCode_default.META,
      KeyCode_default.WIN_KEY_RIGHT,
      KeyCode_default.CTRL,
      KeyCode_default.SEMICOLON,
      KeyCode_default.EQUALS,
      KeyCode_default.CAPS_LOCK,
      KeyCode_default.CONTEXT_MENU,
      // F1-F12
      KeyCode_default.F1,
      KeyCode_default.F2,
      KeyCode_default.F3,
      KeyCode_default.F4,
      KeyCode_default.F5,
      KeyCode_default.F6,
      KeyCode_default.F7,
      KeyCode_default.F8,
      KeyCode_default.F9,
      KeyCode_default.F10,
      KeyCode_default.F11,
      KeyCode_default.F12
    ].includes(currentKeyCode)
  );
}
var init_keyUtil = __esm({
  "node_modules/rc-select/es/utils/keyUtil.js"() {
    init_KeyCode();
  }
});

// node_modules/rc-overflow/es/Item.js
function InternalItem(props, ref) {
  var prefixCls = props.prefixCls, invalidate = props.invalidate, item = props.item, renderItem = props.renderItem, responsive = props.responsive, responsiveDisabled = props.responsiveDisabled, registerSize = props.registerSize, itemKey3 = props.itemKey, className = props.className, style2 = props.style, children = props.children, display = props.display, order = props.order, _props$component = props.component, Component6 = _props$component === void 0 ? "div" : _props$component, restProps = _objectWithoutProperties(props, _excluded3);
  var mergedHidden = responsive && !display;
  function internalRegisterSize(width) {
    registerSize(itemKey3, width);
  }
  React22.useEffect(function() {
    return function() {
      internalRegisterSize(null);
    };
  }, []);
  var childNode = renderItem && item !== UNDEFINED ? renderItem(item, {
    index: order
  }) : children;
  var overflowStyle;
  if (!invalidate) {
    overflowStyle = {
      opacity: mergedHidden ? 0 : 1,
      height: mergedHidden ? 0 : UNDEFINED,
      overflowY: mergedHidden ? "hidden" : UNDEFINED,
      order: responsive ? order : UNDEFINED,
      pointerEvents: mergedHidden ? "none" : UNDEFINED,
      position: mergedHidden ? "absolute" : UNDEFINED
    };
  }
  var overflowProps = {};
  if (mergedHidden) {
    overflowProps["aria-hidden"] = true;
  }
  var itemNode = React22.createElement(Component6, _extends({
    className: (0, import_classnames3.default)(!invalidate && prefixCls, className),
    style: _objectSpread2(_objectSpread2({}, overflowStyle), style2)
  }, overflowProps, restProps, {
    ref
  }), childNode);
  if (responsive) {
    itemNode = React22.createElement(es_default, {
      onResize: function onResize2(_ref) {
        var offsetWidth = _ref.offsetWidth;
        internalRegisterSize(offsetWidth);
      },
      disabled: responsiveDisabled
    }, itemNode);
  }
  return itemNode;
}
var React22, import_classnames3, _excluded3, UNDEFINED, Item, Item_default;
var init_Item = __esm({
  "node_modules/rc-overflow/es/Item.js"() {
    init_extends();
    init_objectSpread2();
    init_objectWithoutProperties();
    React22 = __toESM(require_react());
    import_classnames3 = __toESM(require_classnames());
    init_es3();
    _excluded3 = ["prefixCls", "invalidate", "item", "renderItem", "responsive", "responsiveDisabled", "registerSize", "itemKey", "className", "style", "children", "display", "order", "component"];
    UNDEFINED = void 0;
    Item = React22.forwardRef(InternalItem);
    Item.displayName = "Item";
    Item_default = Item;
  }
});

// node_modules/rc-overflow/es/hooks/channelUpdate.js
function channelUpdate(callback) {
  if (typeof MessageChannel === "undefined") {
    raf_default(callback);
  } else {
    var channel = new MessageChannel();
    channel.port1.onmessage = function() {
      return callback();
    };
    channel.port2.postMessage(void 0);
  }
}
var init_channelUpdate = __esm({
  "node_modules/rc-overflow/es/hooks/channelUpdate.js"() {
    init_raf();
  }
});

// node_modules/rc-overflow/es/hooks/useEffectState.js
function useBatcher() {
  var updateFuncRef = React23.useRef(null);
  var notifyEffectUpdate = function notifyEffectUpdate2(callback) {
    if (!updateFuncRef.current) {
      updateFuncRef.current = [];
      channelUpdate(function() {
        (0, import_react_dom2.unstable_batchedUpdates)(function() {
          updateFuncRef.current.forEach(function(fn) {
            fn();
          });
          updateFuncRef.current = null;
        });
      });
    }
    updateFuncRef.current.push(callback);
  };
  return notifyEffectUpdate;
}
function useEffectState(notifyEffectUpdate, defaultValue) {
  var _React$useState = React23.useState(defaultValue), _React$useState2 = _slicedToArray(_React$useState, 2), stateValue = _React$useState2[0], setStateValue = _React$useState2[1];
  var setEffectVal = useEvent(function(nextValue) {
    notifyEffectUpdate(function() {
      setStateValue(nextValue);
    });
  });
  return [stateValue, setEffectVal];
}
var React23, import_react_dom2;
var init_useEffectState = __esm({
  "node_modules/rc-overflow/es/hooks/useEffectState.js"() {
    init_slicedToArray();
    init_useEvent();
    React23 = __toESM(require_react());
    import_react_dom2 = __toESM(require_react_dom());
    init_channelUpdate();
  }
});

// node_modules/rc-overflow/es/context.js
var import_react7, OverflowContext;
var init_context2 = __esm({
  "node_modules/rc-overflow/es/context.js"() {
    import_react7 = __toESM(require_react());
    OverflowContext = import_react7.default.createContext(null);
  }
});

// node_modules/rc-overflow/es/RawItem.js
var React25, import_classnames4, _excluded4, _excluded23, _excluded32, InternalRawItem, RawItem, RawItem_default;
var init_RawItem = __esm({
  "node_modules/rc-overflow/es/RawItem.js"() {
    init_extends();
    init_objectWithoutProperties();
    React25 = __toESM(require_react());
    import_classnames4 = __toESM(require_classnames());
    init_Item();
    init_context2();
    _excluded4 = ["component"];
    _excluded23 = ["className"];
    _excluded32 = ["className"];
    InternalRawItem = function InternalRawItem2(props, ref) {
      var context = React25.useContext(OverflowContext);
      if (!context) {
        var _props$component = props.component, Component6 = _props$component === void 0 ? "div" : _props$component, _restProps = _objectWithoutProperties(props, _excluded4);
        return React25.createElement(Component6, _extends({}, _restProps, {
          ref
        }));
      }
      var contextClassName = context.className, restContext = _objectWithoutProperties(context, _excluded23);
      var className = props.className, restProps = _objectWithoutProperties(props, _excluded32);
      return React25.createElement(OverflowContext.Provider, {
        value: null
      }, React25.createElement(Item_default, _extends({
        ref,
        className: (0, import_classnames4.default)(contextClassName, className)
      }, restContext, restProps)));
    };
    RawItem = React25.forwardRef(InternalRawItem);
    RawItem.displayName = "RawItem";
    RawItem_default = RawItem;
  }
});

// node_modules/rc-overflow/es/Overflow.js
function defaultRenderRest(omittedItems) {
  return "+ ".concat(omittedItems.length, " ...");
}
function Overflow(props, ref) {
  var _props$prefixCls = props.prefixCls, prefixCls = _props$prefixCls === void 0 ? "rc-overflow" : _props$prefixCls, _props$data = props.data, data = _props$data === void 0 ? [] : _props$data, renderItem = props.renderItem, renderRawItem = props.renderRawItem, itemKey3 = props.itemKey, _props$itemWidth = props.itemWidth, itemWidth = _props$itemWidth === void 0 ? 10 : _props$itemWidth, ssr = props.ssr, style2 = props.style, className = props.className, maxCount = props.maxCount, renderRest = props.renderRest, renderRawRest = props.renderRawRest, suffix = props.suffix, _props$component = props.component, Component6 = _props$component === void 0 ? "div" : _props$component, itemComponent = props.itemComponent, onVisibleChange = props.onVisibleChange, restProps = _objectWithoutProperties(props, _excluded5);
  var fullySSR = ssr === "full";
  var notifyEffectUpdate = useBatcher();
  var _useEffectState = useEffectState(notifyEffectUpdate, null), _useEffectState2 = _slicedToArray(_useEffectState, 2), containerWidth = _useEffectState2[0], setContainerWidth = _useEffectState2[1];
  var mergedContainerWidth = containerWidth || 0;
  var _useEffectState3 = useEffectState(notifyEffectUpdate, /* @__PURE__ */ new Map()), _useEffectState4 = _slicedToArray(_useEffectState3, 2), itemWidths = _useEffectState4[0], setItemWidths = _useEffectState4[1];
  var _useEffectState5 = useEffectState(notifyEffectUpdate, 0), _useEffectState6 = _slicedToArray(_useEffectState5, 2), prevRestWidth = _useEffectState6[0], setPrevRestWidth = _useEffectState6[1];
  var _useEffectState7 = useEffectState(notifyEffectUpdate, 0), _useEffectState8 = _slicedToArray(_useEffectState7, 2), restWidth = _useEffectState8[0], setRestWidth = _useEffectState8[1];
  var _useEffectState9 = useEffectState(notifyEffectUpdate, 0), _useEffectState10 = _slicedToArray(_useEffectState9, 2), suffixWidth = _useEffectState10[0], setSuffixWidth = _useEffectState10[1];
  var _useState = (0, import_react8.useState)(null), _useState2 = _slicedToArray(_useState, 2), suffixFixedStart = _useState2[0], setSuffixFixedStart = _useState2[1];
  var _useState3 = (0, import_react8.useState)(null), _useState4 = _slicedToArray(_useState3, 2), displayCount = _useState4[0], setDisplayCount = _useState4[1];
  var mergedDisplayCount = React26.useMemo(function() {
    if (displayCount === null && fullySSR) {
      return Number.MAX_SAFE_INTEGER;
    }
    return displayCount || 0;
  }, [displayCount, containerWidth]);
  var _useState5 = (0, import_react8.useState)(false), _useState6 = _slicedToArray(_useState5, 2), restReady = _useState6[0], setRestReady = _useState6[1];
  var itemPrefixCls = "".concat(prefixCls, "-item");
  var mergedRestWidth = Math.max(prevRestWidth, restWidth);
  var isResponsive = maxCount === RESPONSIVE;
  var shouldResponsive = data.length && isResponsive;
  var invalidate = maxCount === INVALIDATE;
  var showRest = shouldResponsive || typeof maxCount === "number" && data.length > maxCount;
  var mergedData = (0, import_react8.useMemo)(function() {
    var items = data;
    if (shouldResponsive) {
      if (containerWidth === null && fullySSR) {
        items = data;
      } else {
        items = data.slice(0, Math.min(data.length, mergedContainerWidth / itemWidth));
      }
    } else if (typeof maxCount === "number") {
      items = data.slice(0, maxCount);
    }
    return items;
  }, [data, itemWidth, containerWidth, maxCount, shouldResponsive]);
  var omittedItems = (0, import_react8.useMemo)(function() {
    if (shouldResponsive) {
      return data.slice(mergedDisplayCount + 1);
    }
    return data.slice(mergedData.length);
  }, [data, mergedData, shouldResponsive, mergedDisplayCount]);
  var getKey3 = (0, import_react8.useCallback)(function(item, index2) {
    var _ref;
    if (typeof itemKey3 === "function") {
      return itemKey3(item);
    }
    return (_ref = itemKey3 && (item === null || item === void 0 ? void 0 : item[itemKey3])) !== null && _ref !== void 0 ? _ref : index2;
  }, [itemKey3]);
  var mergedRenderItem = (0, import_react8.useCallback)(renderItem || function(item) {
    return item;
  }, [renderItem]);
  function updateDisplayCount(count, suffixFixedStartVal, notReady) {
    if (displayCount === count && (suffixFixedStartVal === void 0 || suffixFixedStartVal === suffixFixedStart)) {
      return;
    }
    setDisplayCount(count);
    if (!notReady) {
      setRestReady(count < data.length - 1);
      onVisibleChange === null || onVisibleChange === void 0 || onVisibleChange(count);
    }
    if (suffixFixedStartVal !== void 0) {
      setSuffixFixedStart(suffixFixedStartVal);
    }
  }
  function onOverflowResize(_, element) {
    setContainerWidth(element.clientWidth);
  }
  function registerSize(key, width) {
    setItemWidths(function(origin) {
      var clone = new Map(origin);
      if (width === null) {
        clone.delete(key);
      } else {
        clone.set(key, width);
      }
      return clone;
    });
  }
  function registerOverflowSize(_, width) {
    setRestWidth(width);
    setPrevRestWidth(restWidth);
  }
  function registerSuffixSize(_, width) {
    setSuffixWidth(width);
  }
  function getItemWidth(index2) {
    return itemWidths.get(getKey3(mergedData[index2], index2));
  }
  useLayoutEffect_default(function() {
    if (mergedContainerWidth && typeof mergedRestWidth === "number" && mergedData) {
      var totalWidth = suffixWidth;
      var len = mergedData.length;
      var lastIndex = len - 1;
      if (!len) {
        updateDisplayCount(0, null);
        return;
      }
      for (var i = 0; i < len; i += 1) {
        var currentItemWidth = getItemWidth(i);
        if (fullySSR) {
          currentItemWidth = currentItemWidth || 0;
        }
        if (currentItemWidth === void 0) {
          updateDisplayCount(i - 1, void 0, true);
          break;
        }
        totalWidth += currentItemWidth;
        if (
          // Only one means `totalWidth` is the final width
          lastIndex === 0 && totalWidth <= mergedContainerWidth || // Last two width will be the final width
          i === lastIndex - 1 && totalWidth + getItemWidth(lastIndex) <= mergedContainerWidth
        ) {
          updateDisplayCount(lastIndex, null);
          break;
        } else if (totalWidth + mergedRestWidth > mergedContainerWidth) {
          updateDisplayCount(i - 1, totalWidth - currentItemWidth - suffixWidth + restWidth);
          break;
        }
      }
      if (suffix && getItemWidth(0) + suffixWidth > mergedContainerWidth) {
        setSuffixFixedStart(null);
      }
    }
  }, [mergedContainerWidth, itemWidths, restWidth, suffixWidth, getKey3, mergedData]);
  var displayRest = restReady && !!omittedItems.length;
  var suffixStyle = {};
  if (suffixFixedStart !== null && shouldResponsive) {
    suffixStyle = {
      position: "absolute",
      left: suffixFixedStart,
      top: 0
    };
  }
  var itemSharedProps = {
    prefixCls: itemPrefixCls,
    responsive: shouldResponsive,
    component: itemComponent,
    invalidate
  };
  var internalRenderItemNode = renderRawItem ? function(item, index2) {
    var key = getKey3(item, index2);
    return React26.createElement(OverflowContext.Provider, {
      key,
      value: _objectSpread2(_objectSpread2({}, itemSharedProps), {}, {
        order: index2,
        item,
        itemKey: key,
        registerSize,
        display: index2 <= mergedDisplayCount
      })
    }, renderRawItem(item, index2));
  } : function(item, index2) {
    var key = getKey3(item, index2);
    return React26.createElement(Item_default, _extends({}, itemSharedProps, {
      order: index2,
      key,
      item,
      renderItem: mergedRenderItem,
      itemKey: key,
      registerSize,
      display: index2 <= mergedDisplayCount
    }));
  };
  var restContextProps = {
    order: displayRest ? mergedDisplayCount : Number.MAX_SAFE_INTEGER,
    className: "".concat(itemPrefixCls, "-rest"),
    registerSize: registerOverflowSize,
    display: displayRest
  };
  var mergedRenderRest = renderRest || defaultRenderRest;
  var restNode = renderRawRest ? React26.createElement(OverflowContext.Provider, {
    value: _objectSpread2(_objectSpread2({}, itemSharedProps), restContextProps)
  }, renderRawRest(omittedItems)) : React26.createElement(Item_default, _extends({}, itemSharedProps, restContextProps), typeof mergedRenderRest === "function" ? mergedRenderRest(omittedItems) : mergedRenderRest);
  var overflowNode = React26.createElement(Component6, _extends({
    className: (0, import_classnames5.default)(!invalidate && prefixCls, className),
    style: style2,
    ref
  }, restProps), mergedData.map(internalRenderItemNode), showRest ? restNode : null, suffix && React26.createElement(Item_default, _extends({}, itemSharedProps, {
    responsive: isResponsive,
    responsiveDisabled: !shouldResponsive,
    order: mergedDisplayCount,
    className: "".concat(itemPrefixCls, "-suffix"),
    registerSize: registerSuffixSize,
    display: true,
    style: suffixStyle
  }), suffix));
  return isResponsive ? React26.createElement(es_default, {
    onResize: onOverflowResize,
    disabled: !shouldResponsive
  }, overflowNode) : overflowNode;
}
var React26, import_react8, import_classnames5, _excluded5, RESPONSIVE, INVALIDATE, ForwardOverflow, Overflow_default;
var init_Overflow = __esm({
  "node_modules/rc-overflow/es/Overflow.js"() {
    init_extends();
    init_objectSpread2();
    init_slicedToArray();
    init_objectWithoutProperties();
    React26 = __toESM(require_react());
    import_react8 = __toESM(require_react());
    import_classnames5 = __toESM(require_classnames());
    init_es3();
    init_useLayoutEffect();
    init_Item();
    init_useEffectState();
    init_RawItem();
    init_context2();
    init_context2();
    _excluded5 = ["prefixCls", "data", "renderItem", "renderRawItem", "itemKey", "itemWidth", "ssr", "style", "className", "maxCount", "renderRest", "renderRawRest", "suffix", "component", "itemComponent", "onVisibleChange"];
    RESPONSIVE = "responsive";
    INVALIDATE = "invalidate";
    ForwardOverflow = React26.forwardRef(Overflow);
    ForwardOverflow.displayName = "Overflow";
    ForwardOverflow.Item = RawItem_default;
    ForwardOverflow.RESPONSIVE = RESPONSIVE;
    ForwardOverflow.INVALIDATE = INVALIDATE;
    Overflow_default = ForwardOverflow;
  }
});

// node_modules/rc-overflow/es/index.js
var es_default3;
var init_es5 = __esm({
  "node_modules/rc-overflow/es/index.js"() {
    init_Overflow();
    es_default3 = Overflow_default;
  }
});

// node_modules/rc-util/es/composeProps.js
function composeProps(originProps, patchProps, isAll) {
  var composedProps = _objectSpread2(_objectSpread2({}, originProps), isAll ? patchProps : {});
  Object.keys(patchProps).forEach(function(key) {
    var func = patchProps[key];
    if (typeof func === "function") {
      composedProps[key] = function() {
        var _originProps$key;
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        func.apply(void 0, args);
        return (_originProps$key = originProps[key]) === null || _originProps$key === void 0 ? void 0 : _originProps$key.call.apply(_originProps$key, [originProps].concat(args));
      };
    }
  });
  return composedProps;
}
var composeProps_default;
var init_composeProps = __esm({
  "node_modules/rc-util/es/composeProps.js"() {
    init_objectSpread2();
    composeProps_default = composeProps;
  }
});

// node_modules/rc-select/es/Selector/Input.js
var React27, import_classnames6, _excluded6, Input, RefInput, Input_default;
var init_Input = __esm({
  "node_modules/rc-select/es/Selector/Input.js"() {
    init_objectSpread2();
    init_objectWithoutProperties();
    React27 = __toESM(require_react());
    import_classnames6 = __toESM(require_classnames());
    init_ref();
    init_warning();
    init_composeProps();
    _excluded6 = ["prefixCls", "id", "inputElement", "autoFocus", "autoComplete", "editable", "activeDescendantId", "value", "open", "attrs"];
    Input = function Input2(props, ref) {
      var prefixCls = props.prefixCls, id = props.id, inputElement = props.inputElement, autoFocus = props.autoFocus, autoComplete = props.autoComplete, editable = props.editable, activeDescendantId = props.activeDescendantId, value = props.value, open = props.open, attrs = props.attrs, restProps = _objectWithoutProperties(props, _excluded6);
      var inputNode = inputElement || React27.createElement("input", null);
      var _inputNode = inputNode, originRef = _inputNode.ref, originProps = _inputNode.props;
      warning(!("maxLength" in inputNode.props), "Passing 'maxLength' to input element directly may not work because input in BaseSelect is controlled.");
      inputNode = React27.cloneElement(inputNode, _objectSpread2(_objectSpread2(_objectSpread2({
        type: "search"
      }, composeProps_default(restProps, originProps, true)), {}, {
        // Override over origin props
        id,
        ref: composeRef(ref, originRef),
        autoComplete: autoComplete || "off",
        autoFocus,
        className: (0, import_classnames6.default)("".concat(prefixCls, "-selection-search-input"), originProps === null || originProps === void 0 ? void 0 : originProps.className),
        role: "combobox",
        "aria-expanded": open || false,
        "aria-haspopup": "listbox",
        "aria-owns": "".concat(id, "_list"),
        "aria-autocomplete": "list",
        "aria-controls": "".concat(id, "_list"),
        "aria-activedescendant": open ? activeDescendantId : void 0
      }, attrs), {}, {
        value: editable ? value : "",
        readOnly: !editable,
        unselectable: !editable ? "on" : null,
        style: _objectSpread2(_objectSpread2({}, originProps.style), {}, {
          opacity: editable ? null : 0
        })
      }));
      return inputNode;
    };
    RefInput = React27.forwardRef(Input);
    if (true) {
      RefInput.displayName = "Input";
    }
    Input_default = RefInput;
  }
});

// node_modules/rc-select/es/utils/commonUtil.js
function toArray2(value) {
  if (Array.isArray(value)) {
    return value;
  }
  return value !== void 0 ? [value] : [];
}
function hasValue(value) {
  return value !== void 0 && value !== null;
}
function isComboNoValue(value) {
  return !value && value !== 0;
}
function isTitleType(title) {
  return ["string", "number"].includes(_typeof(title));
}
function getTitle(item) {
  var title = void 0;
  if (item) {
    if (isTitleType(item.title)) {
      title = item.title.toString();
    } else if (isTitleType(item.label)) {
      title = item.label.toString();
    }
  }
  return title;
}
var isClient, isBrowserClient;
var init_commonUtil = __esm({
  "node_modules/rc-select/es/utils/commonUtil.js"() {
    init_typeof();
    isClient = typeof window !== "undefined" && window.document && window.document.documentElement;
    isBrowserClient = isClient;
  }
});

// node_modules/rc-select/es/hooks/useLayoutEffect.js
function useLayoutEffect3(effect, deps) {
  if (isBrowserClient) {
    React28.useLayoutEffect(effect, deps);
  } else {
    React28.useEffect(effect, deps);
  }
}
var React28;
var init_useLayoutEffect2 = __esm({
  "node_modules/rc-select/es/hooks/useLayoutEffect.js"() {
    React28 = __toESM(require_react());
    init_commonUtil();
  }
});

// node_modules/rc-select/es/Selector/MultipleSelector.js
function itemKey(value) {
  var _value$key;
  return (_value$key = value.key) !== null && _value$key !== void 0 ? _value$key : value.value;
}
var React29, import_react9, import_classnames7, onPreventMouseDown, SelectSelector, MultipleSelector_default;
var init_MultipleSelector = __esm({
  "node_modules/rc-select/es/Selector/MultipleSelector.js"() {
    init_defineProperty();
    init_slicedToArray();
    React29 = __toESM(require_react());
    import_react9 = __toESM(require_react());
    import_classnames7 = __toESM(require_classnames());
    init_pickAttrs();
    init_es5();
    init_TransBtn();
    init_Input();
    init_useLayoutEffect2();
    init_commonUtil();
    onPreventMouseDown = function onPreventMouseDown2(event) {
      event.preventDefault();
      event.stopPropagation();
    };
    SelectSelector = function SelectSelector2(props) {
      var id = props.id, prefixCls = props.prefixCls, values = props.values, open = props.open, searchValue = props.searchValue, autoClearSearchValue = props.autoClearSearchValue, inputRef = props.inputRef, placeholder = props.placeholder, disabled = props.disabled, mode = props.mode, showSearch = props.showSearch, autoFocus = props.autoFocus, autoComplete = props.autoComplete, activeDescendantId = props.activeDescendantId, tabIndex = props.tabIndex, removeIcon = props.removeIcon, maxTagCount = props.maxTagCount, maxTagTextLength = props.maxTagTextLength, _props$maxTagPlacehol = props.maxTagPlaceholder, maxTagPlaceholder = _props$maxTagPlacehol === void 0 ? function(omittedValues) {
        return "+ ".concat(omittedValues.length, " ...");
      } : _props$maxTagPlacehol, tagRender = props.tagRender, onToggleOpen = props.onToggleOpen, onRemove = props.onRemove, onInputChange = props.onInputChange, onInputPaste = props.onInputPaste, onInputKeyDown = props.onInputKeyDown, onInputMouseDown = props.onInputMouseDown, onInputCompositionStart = props.onInputCompositionStart, onInputCompositionEnd = props.onInputCompositionEnd, onInputBlur = props.onInputBlur;
      var measureRef = React29.useRef(null);
      var _useState = (0, import_react9.useState)(0), _useState2 = _slicedToArray(_useState, 2), inputWidth = _useState2[0], setInputWidth = _useState2[1];
      var _useState3 = (0, import_react9.useState)(false), _useState4 = _slicedToArray(_useState3, 2), focused = _useState4[0], setFocused = _useState4[1];
      var selectionPrefixCls = "".concat(prefixCls, "-selection");
      var inputValue = open || mode === "multiple" && autoClearSearchValue === false || mode === "tags" ? searchValue : "";
      var inputEditable = mode === "tags" || mode === "multiple" && autoClearSearchValue === false || showSearch && (open || focused);
      useLayoutEffect3(function() {
        setInputWidth(measureRef.current.scrollWidth);
      }, [inputValue]);
      var defaultRenderSelector = function defaultRenderSelector2(item, content, itemDisabled, closable, onClose) {
        return React29.createElement("span", {
          title: getTitle(item),
          className: (0, import_classnames7.default)("".concat(selectionPrefixCls, "-item"), _defineProperty({}, "".concat(selectionPrefixCls, "-item-disabled"), itemDisabled))
        }, React29.createElement("span", {
          className: "".concat(selectionPrefixCls, "-item-content")
        }, content), closable && React29.createElement(TransBtn_default, {
          className: "".concat(selectionPrefixCls, "-item-remove"),
          onMouseDown: onPreventMouseDown,
          onClick: onClose,
          customizeIcon: removeIcon
        }, "×"));
      };
      var customizeRenderSelector = function customizeRenderSelector2(value, content, itemDisabled, closable, onClose, isMaxTag) {
        var onMouseDown = function onMouseDown2(e) {
          onPreventMouseDown(e);
          onToggleOpen(!open);
        };
        return React29.createElement("span", {
          onMouseDown
        }, tagRender({
          label: content,
          value,
          disabled: itemDisabled,
          closable,
          onClose,
          isMaxTag: !!isMaxTag
        }));
      };
      var renderItem = function renderItem2(valueItem) {
        var itemDisabled = valueItem.disabled, label = valueItem.label, value = valueItem.value;
        var closable = !disabled && !itemDisabled;
        var displayLabel = label;
        if (typeof maxTagTextLength === "number") {
          if (typeof label === "string" || typeof label === "number") {
            var strLabel = String(displayLabel);
            if (strLabel.length > maxTagTextLength) {
              displayLabel = "".concat(strLabel.slice(0, maxTagTextLength), "...");
            }
          }
        }
        var onClose = function onClose2(event) {
          if (event) {
            event.stopPropagation();
          }
          onRemove(valueItem);
        };
        return typeof tagRender === "function" ? customizeRenderSelector(value, displayLabel, itemDisabled, closable, onClose) : defaultRenderSelector(valueItem, displayLabel, itemDisabled, closable, onClose);
      };
      var renderRest = function renderRest2(omittedValues) {
        if (!values.length) {
          return null;
        }
        var content = typeof maxTagPlaceholder === "function" ? maxTagPlaceholder(omittedValues) : maxTagPlaceholder;
        return typeof tagRender === "function" ? customizeRenderSelector(void 0, content, false, false, void 0, true) : defaultRenderSelector({
          title: content
        }, content, false);
      };
      var inputNode = React29.createElement("div", {
        className: "".concat(selectionPrefixCls, "-search"),
        style: {
          width: inputWidth
        },
        onFocus: function onFocus() {
          setFocused(true);
        },
        onBlur: function onBlur() {
          setFocused(false);
        }
      }, React29.createElement(Input_default, {
        ref: inputRef,
        open,
        prefixCls,
        id,
        inputElement: null,
        disabled,
        autoFocus,
        autoComplete,
        editable: inputEditable,
        activeDescendantId,
        value: inputValue,
        onKeyDown: onInputKeyDown,
        onMouseDown: onInputMouseDown,
        onChange: onInputChange,
        onPaste: onInputPaste,
        onCompositionStart: onInputCompositionStart,
        onCompositionEnd: onInputCompositionEnd,
        onBlur: onInputBlur,
        tabIndex,
        attrs: pickAttrs(props, true)
      }), React29.createElement("span", {
        ref: measureRef,
        className: "".concat(selectionPrefixCls, "-search-mirror"),
        "aria-hidden": true
      }, inputValue, " "));
      var selectionNode = React29.createElement(es_default3, {
        prefixCls: "".concat(selectionPrefixCls, "-overflow"),
        data: values,
        renderItem,
        renderRest,
        suffix: inputNode,
        itemKey,
        maxCount: maxTagCount
      });
      return React29.createElement("span", {
        className: "".concat(selectionPrefixCls, "-wrap")
      }, selectionNode, !values.length && !inputValue && React29.createElement("span", {
        className: "".concat(selectionPrefixCls, "-placeholder")
      }, placeholder));
    };
    MultipleSelector_default = SelectSelector;
  }
});

// node_modules/rc-select/es/Selector/SingleSelector.js
var React30, SingleSelector, SingleSelector_default;
var init_SingleSelector = __esm({
  "node_modules/rc-select/es/Selector/SingleSelector.js"() {
    init_slicedToArray();
    React30 = __toESM(require_react());
    init_pickAttrs();
    init_Input();
    init_commonUtil();
    SingleSelector = function SingleSelector2(props) {
      var inputElement = props.inputElement, prefixCls = props.prefixCls, id = props.id, inputRef = props.inputRef, disabled = props.disabled, autoFocus = props.autoFocus, autoComplete = props.autoComplete, activeDescendantId = props.activeDescendantId, mode = props.mode, open = props.open, values = props.values, placeholder = props.placeholder, tabIndex = props.tabIndex, showSearch = props.showSearch, searchValue = props.searchValue, activeValue = props.activeValue, maxLength = props.maxLength, onInputKeyDown = props.onInputKeyDown, onInputMouseDown = props.onInputMouseDown, onInputChange = props.onInputChange, onInputPaste = props.onInputPaste, onInputCompositionStart = props.onInputCompositionStart, onInputCompositionEnd = props.onInputCompositionEnd, onInputBlur = props.onInputBlur, title = props.title;
      var _React$useState = React30.useState(false), _React$useState2 = _slicedToArray(_React$useState, 2), inputChanged = _React$useState2[0], setInputChanged = _React$useState2[1];
      var combobox = mode === "combobox";
      var inputEditable = combobox || showSearch;
      var item = values[0];
      var inputValue = searchValue || "";
      if (combobox && activeValue && !inputChanged) {
        inputValue = activeValue;
      }
      React30.useEffect(function() {
        if (combobox) {
          setInputChanged(false);
        }
      }, [combobox, activeValue]);
      var hasTextInput = mode !== "combobox" && !open && !showSearch ? false : !!inputValue;
      var selectionTitle = title === void 0 ? getTitle(item) : title;
      var placeholderNode = React30.useMemo(function() {
        if (item) {
          return null;
        }
        return React30.createElement("span", {
          className: "".concat(prefixCls, "-selection-placeholder"),
          style: hasTextInput ? {
            visibility: "hidden"
          } : void 0
        }, placeholder);
      }, [item, hasTextInput, placeholder, prefixCls]);
      return React30.createElement("span", {
        className: "".concat(prefixCls, "-selection-wrap")
      }, React30.createElement("span", {
        className: "".concat(prefixCls, "-selection-search")
      }, React30.createElement(Input_default, {
        ref: inputRef,
        prefixCls,
        id,
        open,
        inputElement,
        disabled,
        autoFocus,
        autoComplete,
        editable: inputEditable,
        activeDescendantId,
        value: inputValue,
        onKeyDown: onInputKeyDown,
        onMouseDown: onInputMouseDown,
        onChange: function onChange(e) {
          setInputChanged(true);
          onInputChange(e);
        },
        onPaste: onInputPaste,
        onCompositionStart: onInputCompositionStart,
        onCompositionEnd: onInputCompositionEnd,
        onBlur: onInputBlur,
        tabIndex,
        attrs: pickAttrs(props, true),
        maxLength: combobox ? maxLength : void 0
      })), !combobox && item ? React30.createElement("span", {
        className: "".concat(prefixCls, "-selection-item"),
        title: selectionTitle,
        style: hasTextInput ? {
          visibility: "hidden"
        } : void 0
      }, item.label) : null, placeholderNode);
    };
    SingleSelector_default = SingleSelector;
  }
});

// node_modules/rc-select/es/Selector/index.js
var React31, import_react10, Selector, ForwardSelector, Selector_default;
var init_Selector = __esm({
  "node_modules/rc-select/es/Selector/index.js"() {
    init_extends();
    init_slicedToArray();
    init_KeyCode();
    React31 = __toESM(require_react());
    import_react10 = __toESM(require_react());
    init_useLock();
    init_keyUtil();
    init_MultipleSelector();
    init_SingleSelector();
    Selector = function Selector2(props, ref) {
      var inputRef = (0, import_react10.useRef)(null);
      var compositionStatusRef = (0, import_react10.useRef)(false);
      var prefixCls = props.prefixCls, open = props.open, mode = props.mode, showSearch = props.showSearch, tokenWithEnter = props.tokenWithEnter, disabled = props.disabled, prefix = props.prefix, autoClearSearchValue = props.autoClearSearchValue, onSearch = props.onSearch, onSearchSubmit = props.onSearchSubmit, onToggleOpen = props.onToggleOpen, onInputKeyDown = props.onInputKeyDown, onInputBlur = props.onInputBlur, domRef = props.domRef;
      React31.useImperativeHandle(ref, function() {
        return {
          focus: function focus(options) {
            inputRef.current.focus(options);
          },
          blur: function blur() {
            inputRef.current.blur();
          }
        };
      });
      var _useLock = useLock(0), _useLock2 = _slicedToArray(_useLock, 2), getInputMouseDown = _useLock2[0], setInputMouseDown = _useLock2[1];
      var onInternalInputKeyDown = function onInternalInputKeyDown2(event) {
        var which = event.which;
        var isTextAreaElement = inputRef.current instanceof HTMLTextAreaElement;
        if (!isTextAreaElement && open && (which === KeyCode_default.UP || which === KeyCode_default.DOWN)) {
          event.preventDefault();
        }
        if (onInputKeyDown) {
          onInputKeyDown(event);
        }
        if (which === KeyCode_default.ENTER && mode === "tags" && !compositionStatusRef.current && !open) {
          onSearchSubmit === null || onSearchSubmit === void 0 || onSearchSubmit(event.target.value);
        }
        if (isTextAreaElement && !open && ~[KeyCode_default.UP, KeyCode_default.DOWN, KeyCode_default.LEFT, KeyCode_default.RIGHT].indexOf(which)) {
          return;
        }
        if (isValidateOpenKey(which)) {
          onToggleOpen(true);
        }
      };
      var onInternalInputMouseDown = function onInternalInputMouseDown2() {
        setInputMouseDown(true);
      };
      var pastedTextRef = (0, import_react10.useRef)(null);
      var triggerOnSearch = function triggerOnSearch2(value) {
        if (onSearch(value, true, compositionStatusRef.current) !== false) {
          onToggleOpen(true);
        }
      };
      var onInputCompositionStart = function onInputCompositionStart2() {
        compositionStatusRef.current = true;
      };
      var onInputCompositionEnd = function onInputCompositionEnd2(e) {
        compositionStatusRef.current = false;
        if (mode !== "combobox") {
          triggerOnSearch(e.target.value);
        }
      };
      var onInputChange = function onInputChange2(event) {
        var value = event.target.value;
        if (tokenWithEnter && pastedTextRef.current && /[\r\n]/.test(pastedTextRef.current)) {
          var replacedText = pastedTextRef.current.replace(/[\r\n]+$/, "").replace(/\r\n/g, " ").replace(/[\r\n]/g, " ");
          value = value.replace(replacedText, pastedTextRef.current);
        }
        pastedTextRef.current = null;
        triggerOnSearch(value);
      };
      var onInputPaste = function onInputPaste2(e) {
        var clipboardData = e.clipboardData;
        var value = clipboardData === null || clipboardData === void 0 ? void 0 : clipboardData.getData("text");
        pastedTextRef.current = value || "";
      };
      var onClick = function onClick2(_ref) {
        var target = _ref.target;
        if (target !== inputRef.current) {
          var isIE = document.body.style.msTouchAction !== void 0;
          if (isIE) {
            setTimeout(function() {
              inputRef.current.focus();
            });
          } else {
            inputRef.current.focus();
          }
        }
      };
      var onMouseDown = function onMouseDown2(event) {
        var inputMouseDown = getInputMouseDown();
        if (event.target !== inputRef.current && !inputMouseDown && !(mode === "combobox" && disabled)) {
          event.preventDefault();
        }
        if (mode !== "combobox" && (!showSearch || !inputMouseDown) || !open) {
          if (open && autoClearSearchValue !== false) {
            onSearch("", true, false);
          }
          onToggleOpen();
        }
      };
      var sharedProps = {
        inputRef,
        onInputKeyDown: onInternalInputKeyDown,
        onInputMouseDown: onInternalInputMouseDown,
        onInputChange,
        onInputPaste,
        onInputCompositionStart,
        onInputCompositionEnd,
        onInputBlur
      };
      var selectNode = mode === "multiple" || mode === "tags" ? React31.createElement(MultipleSelector_default, _extends({}, props, sharedProps)) : React31.createElement(SingleSelector_default, _extends({}, props, sharedProps));
      return React31.createElement("div", {
        ref: domRef,
        className: "".concat(prefixCls, "-selector"),
        onClick,
        onMouseDown
      }, prefix && React31.createElement("div", {
        className: "".concat(prefixCls, "-prefix")
      }, prefix), selectNode);
    };
    ForwardSelector = React31.forwardRef(Selector);
    if (true) {
      ForwardSelector.displayName = "Selector";
    }
    Selector_default = ForwardSelector;
  }
});

// node_modules/@rc-component/portal/es/Context.js
var React32, OrderContext, Context_default;
var init_Context = __esm({
  "node_modules/@rc-component/portal/es/Context.js"() {
    React32 = __toESM(require_react());
    OrderContext = React32.createContext(null);
    Context_default = OrderContext;
  }
});

// node_modules/@rc-component/portal/es/useDom.js
function useDom(render, debug) {
  var _React$useState = React33.useState(function() {
    if (!canUseDom()) {
      return null;
    }
    var defaultEle = document.createElement("div");
    if (debug) {
      defaultEle.setAttribute("data-debug", debug);
    }
    return defaultEle;
  }), _React$useState2 = _slicedToArray(_React$useState, 1), ele = _React$useState2[0];
  var appendedRef = React33.useRef(false);
  var queueCreate = React33.useContext(Context_default);
  var _React$useState3 = React33.useState(EMPTY_LIST), _React$useState4 = _slicedToArray(_React$useState3, 2), queue = _React$useState4[0], setQueue = _React$useState4[1];
  var mergedQueueCreate = queueCreate || (appendedRef.current ? void 0 : function(appendFn) {
    setQueue(function(origin) {
      var newQueue = [appendFn].concat(_toConsumableArray(origin));
      return newQueue;
    });
  });
  function append() {
    if (!ele.parentElement) {
      document.body.appendChild(ele);
    }
    appendedRef.current = true;
  }
  function cleanup2() {
    var _ele$parentElement;
    (_ele$parentElement = ele.parentElement) === null || _ele$parentElement === void 0 ? void 0 : _ele$parentElement.removeChild(ele);
    appendedRef.current = false;
  }
  useLayoutEffect_default(function() {
    if (render) {
      if (queueCreate) {
        queueCreate(append);
      } else {
        append();
      }
    } else {
      cleanup2();
    }
    return cleanup2;
  }, [render]);
  useLayoutEffect_default(function() {
    if (queue.length) {
      queue.forEach(function(appendFn) {
        return appendFn();
      });
      setQueue(EMPTY_LIST);
    }
  }, [queue]);
  return [ele, mergedQueueCreate];
}
var React33, EMPTY_LIST;
var init_useDom = __esm({
  "node_modules/@rc-component/portal/es/useDom.js"() {
    init_toConsumableArray();
    init_slicedToArray();
    React33 = __toESM(require_react());
    init_useLayoutEffect();
    init_canUseDom();
    init_Context();
    EMPTY_LIST = [];
  }
});

// node_modules/rc-util/es/getScrollBarSize.js
function measureScrollbarSize(ele) {
  var randomId = "rc-scrollbar-measure-".concat(Math.random().toString(36).substring(7));
  var measureEle = document.createElement("div");
  measureEle.id = randomId;
  var measureStyle = measureEle.style;
  measureStyle.position = "absolute";
  measureStyle.left = "0";
  measureStyle.top = "0";
  measureStyle.width = "100px";
  measureStyle.height = "100px";
  measureStyle.overflow = "scroll";
  var fallbackWidth;
  var fallbackHeight;
  if (ele) {
    var targetStyle = getComputedStyle(ele);
    measureStyle.scrollbarColor = targetStyle.scrollbarColor;
    measureStyle.scrollbarWidth = targetStyle.scrollbarWidth;
    var webkitScrollbarStyle = getComputedStyle(ele, "::-webkit-scrollbar");
    var width = parseInt(webkitScrollbarStyle.width, 10);
    var height = parseInt(webkitScrollbarStyle.height, 10);
    try {
      var widthStyle = width ? "width: ".concat(webkitScrollbarStyle.width, ";") : "";
      var heightStyle = height ? "height: ".concat(webkitScrollbarStyle.height, ";") : "";
      updateCSS("\n#".concat(randomId, "::-webkit-scrollbar {\n").concat(widthStyle, "\n").concat(heightStyle, "\n}"), randomId);
    } catch (e) {
      console.error(e);
      fallbackWidth = width;
      fallbackHeight = height;
    }
  }
  document.body.appendChild(measureEle);
  var scrollWidth = ele && fallbackWidth && !isNaN(fallbackWidth) ? fallbackWidth : measureEle.offsetWidth - measureEle.clientWidth;
  var scrollHeight = ele && fallbackHeight && !isNaN(fallbackHeight) ? fallbackHeight : measureEle.offsetHeight - measureEle.clientHeight;
  document.body.removeChild(measureEle);
  removeCSS(randomId);
  return {
    width: scrollWidth,
    height: scrollHeight
  };
}
function getScrollBarSize(fresh) {
  if (typeof document === "undefined") {
    return 0;
  }
  if (fresh || cached === void 0) {
    cached = measureScrollbarSize();
  }
  return cached.width;
}
function getTargetScrollBarSize(target) {
  if (typeof document === "undefined" || !target || !(target instanceof Element)) {
    return {
      width: 0,
      height: 0
    };
  }
  return measureScrollbarSize(target);
}
var cached;
var init_getScrollBarSize = __esm({
  "node_modules/rc-util/es/getScrollBarSize.js"() {
    init_dynamicCSS();
  }
});

// node_modules/@rc-component/portal/es/util.js
function isBodyOverflowing() {
  return document.body.scrollHeight > (window.innerHeight || document.documentElement.clientHeight) && window.innerWidth > document.body.offsetWidth;
}
var init_util = __esm({
  "node_modules/@rc-component/portal/es/util.js"() {
  }
});

// node_modules/@rc-component/portal/es/useScrollLocker.js
function useScrollLocker(lock) {
  var mergedLock = !!lock;
  var _React$useState = React34.useState(function() {
    uuid2 += 1;
    return "".concat(UNIQUE_ID, "_").concat(uuid2);
  }), _React$useState2 = _slicedToArray(_React$useState, 1), id = _React$useState2[0];
  useLayoutEffect_default(function() {
    if (mergedLock) {
      var scrollbarSize = getTargetScrollBarSize(document.body).width;
      var isOverflow = isBodyOverflowing();
      updateCSS("\nhtml body {\n  overflow-y: hidden;\n  ".concat(isOverflow ? "width: calc(100% - ".concat(scrollbarSize, "px);") : "", "\n}"), id);
    } else {
      removeCSS(id);
    }
    return function() {
      removeCSS(id);
    };
  }, [mergedLock, id]);
}
var React34, UNIQUE_ID, uuid2;
var init_useScrollLocker = __esm({
  "node_modules/@rc-component/portal/es/useScrollLocker.js"() {
    init_slicedToArray();
    React34 = __toESM(require_react());
    init_dynamicCSS();
    init_useLayoutEffect();
    init_getScrollBarSize();
    init_util();
    UNIQUE_ID = "rc-util-locker-".concat(Date.now());
    uuid2 = 0;
  }
});

// node_modules/@rc-component/portal/es/mock.js
function inlineMock(nextInline) {
  if (typeof nextInline === "boolean") {
    inline = nextInline;
  }
  return inline;
}
var inline;
var init_mock = __esm({
  "node_modules/@rc-component/portal/es/mock.js"() {
    inline = false;
  }
});

// node_modules/@rc-component/portal/es/Portal.js
var React35, import_react_dom3, getPortalContainer, Portal, Portal_default;
var init_Portal = __esm({
  "node_modules/@rc-component/portal/es/Portal.js"() {
    init_slicedToArray();
    React35 = __toESM(require_react());
    import_react_dom3 = __toESM(require_react_dom());
    init_canUseDom();
    init_warning();
    init_ref();
    init_Context();
    init_useDom();
    init_useScrollLocker();
    init_mock();
    getPortalContainer = function getPortalContainer2(getContainer) {
      if (getContainer === false) {
        return false;
      }
      if (!canUseDom() || !getContainer) {
        return null;
      }
      if (typeof getContainer === "string") {
        return document.querySelector(getContainer);
      }
      if (typeof getContainer === "function") {
        return getContainer();
      }
      return getContainer;
    };
    Portal = React35.forwardRef(function(props, ref) {
      var open = props.open, autoLock = props.autoLock, getContainer = props.getContainer, debug = props.debug, _props$autoDestroy = props.autoDestroy, autoDestroy = _props$autoDestroy === void 0 ? true : _props$autoDestroy, children = props.children;
      var _React$useState = React35.useState(open), _React$useState2 = _slicedToArray(_React$useState, 2), shouldRender = _React$useState2[0], setShouldRender = _React$useState2[1];
      var mergedRender = shouldRender || open;
      if (true) {
        warning_default(canUseDom() || !open, "Portal only work in client side. Please call 'useEffect' to show Portal instead default render in SSR.");
      }
      React35.useEffect(function() {
        if (autoDestroy || open) {
          setShouldRender(open);
        }
      }, [open, autoDestroy]);
      var _React$useState3 = React35.useState(function() {
        return getPortalContainer(getContainer);
      }), _React$useState4 = _slicedToArray(_React$useState3, 2), innerContainer = _React$useState4[0], setInnerContainer = _React$useState4[1];
      React35.useEffect(function() {
        var customizeContainer = getPortalContainer(getContainer);
        setInnerContainer(customizeContainer !== null && customizeContainer !== void 0 ? customizeContainer : null);
      });
      var _useDom = useDom(mergedRender && !innerContainer, debug), _useDom2 = _slicedToArray(_useDom, 2), defaultContainer2 = _useDom2[0], queueCreate = _useDom2[1];
      var mergedContainer = innerContainer !== null && innerContainer !== void 0 ? innerContainer : defaultContainer2;
      useScrollLocker(autoLock && open && canUseDom() && (mergedContainer === defaultContainer2 || mergedContainer === document.body));
      var childRef = null;
      if (children && supportRef(children) && ref) {
        var _ref = children;
        childRef = _ref.ref;
      }
      var mergedRef = useComposeRef(childRef, ref);
      if (!mergedRender || !canUseDom() || innerContainer === void 0) {
        return null;
      }
      var renderInline = mergedContainer === false || inlineMock();
      var reffedChildren = children;
      if (ref) {
        reffedChildren = React35.cloneElement(children, {
          ref: mergedRef
        });
      }
      return React35.createElement(Context_default.Provider, {
        value: queueCreate
      }, renderInline ? reffedChildren : (0, import_react_dom3.createPortal)(reffedChildren, mergedContainer));
    });
    if (true) {
      Portal.displayName = "Portal";
    }
    Portal_default = Portal;
  }
});

// node_modules/@rc-component/portal/es/index.js
var es_default4;
var init_es6 = __esm({
  "node_modules/@rc-component/portal/es/index.js"() {
    init_Portal();
    init_mock();
    es_default4 = Portal_default;
  }
});

// node_modules/@rc-component/trigger/es/Popup/Arrow.js
function Arrow(props) {
  var prefixCls = props.prefixCls, align = props.align, arrow = props.arrow, arrowPos = props.arrowPos;
  var _ref = arrow || {}, className = _ref.className, content = _ref.content;
  var _arrowPos$x = arrowPos.x, x = _arrowPos$x === void 0 ? 0 : _arrowPos$x, _arrowPos$y = arrowPos.y, y = _arrowPos$y === void 0 ? 0 : _arrowPos$y;
  var arrowRef = React36.useRef();
  if (!align || !align.points) {
    return null;
  }
  var alignStyle = {
    position: "absolute"
  };
  if (align.autoArrow !== false) {
    var popupPoints = align.points[0];
    var targetPoints = align.points[1];
    var popupTB = popupPoints[0];
    var popupLR = popupPoints[1];
    var targetTB = targetPoints[0];
    var targetLR = targetPoints[1];
    if (popupTB === targetTB || !["t", "b"].includes(popupTB)) {
      alignStyle.top = y;
    } else if (popupTB === "t") {
      alignStyle.top = 0;
    } else {
      alignStyle.bottom = 0;
    }
    if (popupLR === targetLR || !["l", "r"].includes(popupLR)) {
      alignStyle.left = x;
    } else if (popupLR === "l") {
      alignStyle.left = 0;
    } else {
      alignStyle.right = 0;
    }
  }
  return React36.createElement("div", {
    ref: arrowRef,
    className: (0, import_classnames8.default)("".concat(prefixCls, "-arrow"), className),
    style: alignStyle
  }, content);
}
var import_classnames8, React36;
var init_Arrow = __esm({
  "node_modules/@rc-component/trigger/es/Popup/Arrow.js"() {
    import_classnames8 = __toESM(require_classnames());
    React36 = __toESM(require_react());
  }
});

// node_modules/@rc-component/trigger/es/Popup/Mask.js
function Mask(props) {
  var prefixCls = props.prefixCls, open = props.open, zIndex = props.zIndex, mask = props.mask, motion = props.motion;
  if (!mask) {
    return null;
  }
  return React37.createElement(es_default2, _extends({}, motion, {
    motionAppear: true,
    visible: open,
    removeOnLeave: true
  }), function(_ref) {
    var className = _ref.className;
    return React37.createElement("div", {
      style: {
        zIndex
      },
      className: (0, import_classnames9.default)("".concat(prefixCls, "-mask"), className)
    });
  });
}
var import_classnames9, React37;
var init_Mask = __esm({
  "node_modules/@rc-component/trigger/es/Popup/Mask.js"() {
    init_extends();
    import_classnames9 = __toESM(require_classnames());
    init_es4();
    React37 = __toESM(require_react());
  }
});

// node_modules/@rc-component/trigger/es/Popup/PopupContent.js
var React38, PopupContent, PopupContent_default;
var init_PopupContent = __esm({
  "node_modules/@rc-component/trigger/es/Popup/PopupContent.js"() {
    React38 = __toESM(require_react());
    PopupContent = React38.memo(function(_ref) {
      var children = _ref.children;
      return children;
    }, function(_, next) {
      return next.cache;
    });
    if (true) {
      PopupContent.displayName = "PopupContent";
    }
    PopupContent_default = PopupContent;
  }
});

// node_modules/@rc-component/trigger/es/Popup/index.js
var import_classnames10, React39, Popup, Popup_default;
var init_Popup = __esm({
  "node_modules/@rc-component/trigger/es/Popup/index.js"() {
    init_extends();
    init_objectSpread2();
    init_slicedToArray();
    import_classnames10 = __toESM(require_classnames());
    init_es4();
    init_es3();
    init_useLayoutEffect();
    init_ref();
    React39 = __toESM(require_react());
    init_Arrow();
    init_Mask();
    init_PopupContent();
    Popup = React39.forwardRef(function(props, ref) {
      var popup = props.popup, className = props.className, prefixCls = props.prefixCls, style2 = props.style, target = props.target, _onVisibleChanged = props.onVisibleChanged, open = props.open, keepDom = props.keepDom, fresh = props.fresh, onClick = props.onClick, mask = props.mask, arrow = props.arrow, arrowPos = props.arrowPos, align = props.align, motion = props.motion, maskMotion = props.maskMotion, forceRender = props.forceRender, getPopupContainer = props.getPopupContainer, autoDestroy = props.autoDestroy, Portal2 = props.portal, zIndex = props.zIndex, onMouseEnter = props.onMouseEnter, onMouseLeave = props.onMouseLeave, onPointerEnter = props.onPointerEnter, onPointerDownCapture = props.onPointerDownCapture, ready = props.ready, offsetX = props.offsetX, offsetY = props.offsetY, offsetR = props.offsetR, offsetB = props.offsetB, onAlign = props.onAlign, onPrepare = props.onPrepare, stretch = props.stretch, targetWidth = props.targetWidth, targetHeight = props.targetHeight;
      var childNode = typeof popup === "function" ? popup() : popup;
      var isNodeVisible = open || keepDom;
      var getPopupContainerNeedParams = (getPopupContainer === null || getPopupContainer === void 0 ? void 0 : getPopupContainer.length) > 0;
      var _React$useState = React39.useState(!getPopupContainer || !getPopupContainerNeedParams), _React$useState2 = _slicedToArray(_React$useState, 2), show = _React$useState2[0], setShow = _React$useState2[1];
      useLayoutEffect_default(function() {
        if (!show && getPopupContainerNeedParams && target) {
          setShow(true);
        }
      }, [show, getPopupContainerNeedParams, target]);
      if (!show) {
        return null;
      }
      var AUTO = "auto";
      var offsetStyle = {
        left: "-1000vw",
        top: "-1000vh",
        right: AUTO,
        bottom: AUTO
      };
      if (ready || !open) {
        var _experimental;
        var points = align.points;
        var dynamicInset = align.dynamicInset || ((_experimental = align._experimental) === null || _experimental === void 0 ? void 0 : _experimental.dynamicInset);
        var alignRight = dynamicInset && points[0][1] === "r";
        var alignBottom = dynamicInset && points[0][0] === "b";
        if (alignRight) {
          offsetStyle.right = offsetR;
          offsetStyle.left = AUTO;
        } else {
          offsetStyle.left = offsetX;
          offsetStyle.right = AUTO;
        }
        if (alignBottom) {
          offsetStyle.bottom = offsetB;
          offsetStyle.top = AUTO;
        } else {
          offsetStyle.top = offsetY;
          offsetStyle.bottom = AUTO;
        }
      }
      var miscStyle = {};
      if (stretch) {
        if (stretch.includes("height") && targetHeight) {
          miscStyle.height = targetHeight;
        } else if (stretch.includes("minHeight") && targetHeight) {
          miscStyle.minHeight = targetHeight;
        }
        if (stretch.includes("width") && targetWidth) {
          miscStyle.width = targetWidth;
        } else if (stretch.includes("minWidth") && targetWidth) {
          miscStyle.minWidth = targetWidth;
        }
      }
      if (!open) {
        miscStyle.pointerEvents = "none";
      }
      return React39.createElement(Portal2, {
        open: forceRender || isNodeVisible,
        getContainer: getPopupContainer && function() {
          return getPopupContainer(target);
        },
        autoDestroy
      }, React39.createElement(Mask, {
        prefixCls,
        open,
        zIndex,
        mask,
        motion: maskMotion
      }), React39.createElement(es_default, {
        onResize: onAlign,
        disabled: !open
      }, function(resizeObserverRef) {
        return React39.createElement(es_default2, _extends({
          motionAppear: true,
          motionEnter: true,
          motionLeave: true,
          removeOnLeave: false,
          forceRender,
          leavedClassName: "".concat(prefixCls, "-hidden")
        }, motion, {
          onAppearPrepare: onPrepare,
          onEnterPrepare: onPrepare,
          visible: open,
          onVisibleChanged: function onVisibleChanged(nextVisible) {
            var _motion$onVisibleChan;
            motion === null || motion === void 0 || (_motion$onVisibleChan = motion.onVisibleChanged) === null || _motion$onVisibleChan === void 0 || _motion$onVisibleChan.call(motion, nextVisible);
            _onVisibleChanged(nextVisible);
          }
        }), function(_ref, motionRef) {
          var motionClassName = _ref.className, motionStyle = _ref.style;
          var cls = (0, import_classnames10.default)(prefixCls, motionClassName, className);
          return React39.createElement("div", {
            ref: composeRef(resizeObserverRef, ref, motionRef),
            className: cls,
            style: _objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2({
              "--arrow-x": "".concat(arrowPos.x || 0, "px"),
              "--arrow-y": "".concat(arrowPos.y || 0, "px")
            }, offsetStyle), miscStyle), motionStyle), {}, {
              boxSizing: "border-box",
              zIndex
            }, style2),
            onMouseEnter,
            onMouseLeave,
            onPointerEnter,
            onClick,
            onPointerDownCapture
          }, arrow && React39.createElement(Arrow, {
            prefixCls,
            arrow,
            arrowPos,
            align
          }), React39.createElement(PopupContent_default, {
            cache: !open && !fresh
          }, childNode));
        });
      }));
    });
    if (true) {
      Popup.displayName = "Popup";
    }
    Popup_default = Popup;
  }
});

// node_modules/@rc-component/trigger/es/TriggerWrapper.js
var React40, TriggerWrapper, TriggerWrapper_default;
var init_TriggerWrapper = __esm({
  "node_modules/@rc-component/trigger/es/TriggerWrapper.js"() {
    init_ref();
    React40 = __toESM(require_react());
    TriggerWrapper = React40.forwardRef(function(props, ref) {
      var children = props.children, getTriggerDOMNode = props.getTriggerDOMNode;
      var canUseRef = supportRef(children);
      var setRef = React40.useCallback(function(node) {
        fillRef(ref, getTriggerDOMNode ? getTriggerDOMNode(node) : node);
      }, [getTriggerDOMNode]);
      var mergedRef = useComposeRef(setRef, getNodeRef(children));
      return canUseRef ? React40.cloneElement(children, {
        ref: mergedRef
      }) : children;
    });
    if (true) {
      TriggerWrapper.displayName = "TriggerWrapper";
    }
    TriggerWrapper_default = TriggerWrapper;
  }
});

// node_modules/@rc-component/trigger/es/context.js
var React41, TriggerContext, context_default;
var init_context3 = __esm({
  "node_modules/@rc-component/trigger/es/context.js"() {
    React41 = __toESM(require_react());
    TriggerContext = React41.createContext(null);
    context_default = TriggerContext;
  }
});

// node_modules/@rc-component/trigger/es/hooks/useAction.js
function toArray3(val) {
  return val ? Array.isArray(val) ? val : [val] : [];
}
function useAction(mobile, action, showAction, hideAction) {
  return React42.useMemo(function() {
    var mergedShowAction = toArray3(showAction !== null && showAction !== void 0 ? showAction : action);
    var mergedHideAction = toArray3(hideAction !== null && hideAction !== void 0 ? hideAction : action);
    var showActionSet = new Set(mergedShowAction);
    var hideActionSet = new Set(mergedHideAction);
    if (mobile) {
      if (showActionSet.has("hover")) {
        showActionSet.delete("hover");
        showActionSet.add("click");
      }
      if (hideActionSet.has("hover")) {
        hideActionSet.delete("hover");
        hideActionSet.add("click");
      }
    }
    return [showActionSet, hideActionSet];
  }, [mobile, action, showAction, hideAction]);
}
var React42;
var init_useAction = __esm({
  "node_modules/@rc-component/trigger/es/hooks/useAction.js"() {
    React42 = __toESM(require_react());
  }
});

// node_modules/rc-util/es/Dom/isVisible.js
var isVisible_default;
var init_isVisible = __esm({
  "node_modules/rc-util/es/Dom/isVisible.js"() {
    isVisible_default = (function(element) {
      if (!element) {
        return false;
      }
      if (element instanceof Element) {
        if (element.offsetParent) {
          return true;
        }
        if (element.getBBox) {
          var _getBBox = element.getBBox(), width = _getBBox.width, height = _getBBox.height;
          if (width || height) {
            return true;
          }
        }
        if (element.getBoundingClientRect) {
          var _element$getBoundingC = element.getBoundingClientRect(), _width = _element$getBoundingC.width, _height = _element$getBoundingC.height;
          if (_width || _height) {
            return true;
          }
        }
      }
      return false;
    });
  }
});

// node_modules/@rc-component/trigger/es/util.js
function isPointsEq() {
  var a1 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
  var a2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
  var isAlignPoint = arguments.length > 2 ? arguments[2] : void 0;
  if (isAlignPoint) {
    return a1[0] === a2[0];
  }
  return a1[0] === a2[0] && a1[1] === a2[1];
}
function getAlignPopupClassName(builtinPlacements, prefixCls, align, isAlignPoint) {
  var points = align.points;
  var placements4 = Object.keys(builtinPlacements);
  for (var i = 0; i < placements4.length; i += 1) {
    var _builtinPlacements$pl;
    var placement = placements4[i];
    if (isPointsEq((_builtinPlacements$pl = builtinPlacements[placement]) === null || _builtinPlacements$pl === void 0 ? void 0 : _builtinPlacements$pl.points, points, isAlignPoint)) {
      return "".concat(prefixCls, "-placement-").concat(placement);
    }
  }
  return "";
}
function getMotion(prefixCls, motion, animation, transitionName) {
  if (motion) {
    return motion;
  }
  if (animation) {
    return {
      motionName: "".concat(prefixCls, "-").concat(animation)
    };
  }
  if (transitionName) {
    return {
      motionName: transitionName
    };
  }
  return null;
}
function getWin(ele) {
  return ele.ownerDocument.defaultView;
}
function collectScroller(ele) {
  var scrollerList = [];
  var current = ele === null || ele === void 0 ? void 0 : ele.parentElement;
  var scrollStyle = ["hidden", "scroll", "clip", "auto"];
  while (current) {
    var _getWin$getComputedSt = getWin(current).getComputedStyle(current), overflowX = _getWin$getComputedSt.overflowX, overflowY = _getWin$getComputedSt.overflowY, overflow = _getWin$getComputedSt.overflow;
    if ([overflowX, overflowY, overflow].some(function(o) {
      return scrollStyle.includes(o);
    })) {
      scrollerList.push(current);
    }
    current = current.parentElement;
  }
  return scrollerList;
}
function toNum(num) {
  var defaultValue = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
  return Number.isNaN(num) ? defaultValue : num;
}
function getPxValue(val) {
  return toNum(parseFloat(val), 0);
}
function getVisibleArea(initArea, scrollerList) {
  var visibleArea = _objectSpread2({}, initArea);
  (scrollerList || []).forEach(function(ele) {
    if (ele instanceof HTMLBodyElement || ele instanceof HTMLHtmlElement) {
      return;
    }
    var _getWin$getComputedSt2 = getWin(ele).getComputedStyle(ele), overflow = _getWin$getComputedSt2.overflow, overflowClipMargin = _getWin$getComputedSt2.overflowClipMargin, borderTopWidth = _getWin$getComputedSt2.borderTopWidth, borderBottomWidth = _getWin$getComputedSt2.borderBottomWidth, borderLeftWidth = _getWin$getComputedSt2.borderLeftWidth, borderRightWidth = _getWin$getComputedSt2.borderRightWidth;
    var eleRect = ele.getBoundingClientRect();
    var eleOutHeight = ele.offsetHeight, eleInnerHeight = ele.clientHeight, eleOutWidth = ele.offsetWidth, eleInnerWidth = ele.clientWidth;
    var borderTopNum = getPxValue(borderTopWidth);
    var borderBottomNum = getPxValue(borderBottomWidth);
    var borderLeftNum = getPxValue(borderLeftWidth);
    var borderRightNum = getPxValue(borderRightWidth);
    var scaleX = toNum(Math.round(eleRect.width / eleOutWidth * 1e3) / 1e3);
    var scaleY = toNum(Math.round(eleRect.height / eleOutHeight * 1e3) / 1e3);
    var eleScrollWidth = (eleOutWidth - eleInnerWidth - borderLeftNum - borderRightNum) * scaleX;
    var eleScrollHeight = (eleOutHeight - eleInnerHeight - borderTopNum - borderBottomNum) * scaleY;
    var scaledBorderTopWidth = borderTopNum * scaleY;
    var scaledBorderBottomWidth = borderBottomNum * scaleY;
    var scaledBorderLeftWidth = borderLeftNum * scaleX;
    var scaledBorderRightWidth = borderRightNum * scaleX;
    var clipMarginWidth = 0;
    var clipMarginHeight = 0;
    if (overflow === "clip") {
      var clipNum = getPxValue(overflowClipMargin);
      clipMarginWidth = clipNum * scaleX;
      clipMarginHeight = clipNum * scaleY;
    }
    var eleLeft = eleRect.x + scaledBorderLeftWidth - clipMarginWidth;
    var eleTop = eleRect.y + scaledBorderTopWidth - clipMarginHeight;
    var eleRight = eleLeft + eleRect.width + 2 * clipMarginWidth - scaledBorderLeftWidth - scaledBorderRightWidth - eleScrollWidth;
    var eleBottom = eleTop + eleRect.height + 2 * clipMarginHeight - scaledBorderTopWidth - scaledBorderBottomWidth - eleScrollHeight;
    visibleArea.left = Math.max(visibleArea.left, eleLeft);
    visibleArea.top = Math.max(visibleArea.top, eleTop);
    visibleArea.right = Math.min(visibleArea.right, eleRight);
    visibleArea.bottom = Math.min(visibleArea.bottom, eleBottom);
  });
  return visibleArea;
}
var init_util2 = __esm({
  "node_modules/@rc-component/trigger/es/util.js"() {
    init_objectSpread2();
  }
});

// node_modules/@rc-component/trigger/es/hooks/useAlign.js
function getUnitOffset(size) {
  var offset = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
  var offsetStr = "".concat(offset);
  var cells = offsetStr.match(/^(.*)\%$/);
  if (cells) {
    return size * (parseFloat(cells[1]) / 100);
  }
  return parseFloat(offsetStr);
}
function getNumberOffset(rect, offset) {
  var _ref = offset || [], _ref2 = _slicedToArray(_ref, 2), offsetX = _ref2[0], offsetY = _ref2[1];
  return [getUnitOffset(rect.width, offsetX), getUnitOffset(rect.height, offsetY)];
}
function splitPoints() {
  var points = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
  return [points[0], points[1]];
}
function getAlignPoint(rect, points) {
  var topBottom = points[0];
  var leftRight = points[1];
  var x;
  var y;
  if (topBottom === "t") {
    y = rect.y;
  } else if (topBottom === "b") {
    y = rect.y + rect.height;
  } else {
    y = rect.y + rect.height / 2;
  }
  if (leftRight === "l") {
    x = rect.x;
  } else if (leftRight === "r") {
    x = rect.x + rect.width;
  } else {
    x = rect.x + rect.width / 2;
  }
  return {
    x,
    y
  };
}
function reversePoints(points, index2) {
  var reverseMap = {
    t: "b",
    b: "t",
    l: "r",
    r: "l"
  };
  return points.map(function(point, i) {
    if (i === index2) {
      return reverseMap[point] || "c";
    }
    return point;
  }).join("");
}
function useAlign(open, popupEle, target, placement, builtinPlacements, popupAlign, onPopupAlign) {
  var _React$useState = React43.useState({
    ready: false,
    offsetX: 0,
    offsetY: 0,
    offsetR: 0,
    offsetB: 0,
    arrowX: 0,
    arrowY: 0,
    scaleX: 1,
    scaleY: 1,
    align: builtinPlacements[placement] || {}
  }), _React$useState2 = _slicedToArray(_React$useState, 2), offsetInfo = _React$useState2[0], setOffsetInfo = _React$useState2[1];
  var alignCountRef = React43.useRef(0);
  var scrollerList = React43.useMemo(function() {
    if (!popupEle) {
      return [];
    }
    return collectScroller(popupEle);
  }, [popupEle]);
  var prevFlipRef = React43.useRef({});
  var resetFlipCache = function resetFlipCache2() {
    prevFlipRef.current = {};
  };
  if (!open) {
    resetFlipCache();
  }
  var onAlign = useEvent(function() {
    if (popupEle && target && open) {
      let getIntersectionVisibleArea = function(offsetX, offsetY) {
        var area = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : visibleArea;
        var l = popupRect.x + offsetX;
        var t = popupRect.y + offsetY;
        var r = l + popupWidth;
        var b = t + popupHeight;
        var visibleL = Math.max(l, area.left);
        var visibleT = Math.max(t, area.top);
        var visibleR = Math.min(r, area.right);
        var visibleB = Math.min(b, area.bottom);
        return Math.max(0, (visibleR - visibleL) * (visibleB - visibleT));
      }, syncNextPopupPosition = function() {
        nextPopupY = popupRect.y + nextOffsetY;
        nextPopupBottom = nextPopupY + popupHeight;
        nextPopupX = popupRect.x + nextOffsetX;
        nextPopupRight = nextPopupX + popupWidth;
      };
      var _popupElement$parentE, _popupRect$x, _popupRect$y, _popupElement$parentE2;
      var popupElement = popupEle;
      var doc = popupElement.ownerDocument;
      var win = getWin(popupElement);
      var _win$getComputedStyle = win.getComputedStyle(popupElement), popupPosition = _win$getComputedStyle.position;
      var originLeft = popupElement.style.left;
      var originTop = popupElement.style.top;
      var originRight = popupElement.style.right;
      var originBottom = popupElement.style.bottom;
      var originOverflow = popupElement.style.overflow;
      var placementInfo = _objectSpread2(_objectSpread2({}, builtinPlacements[placement]), popupAlign);
      var placeholderElement = doc.createElement("div");
      (_popupElement$parentE = popupElement.parentElement) === null || _popupElement$parentE === void 0 || _popupElement$parentE.appendChild(placeholderElement);
      placeholderElement.style.left = "".concat(popupElement.offsetLeft, "px");
      placeholderElement.style.top = "".concat(popupElement.offsetTop, "px");
      placeholderElement.style.position = popupPosition;
      placeholderElement.style.height = "".concat(popupElement.offsetHeight, "px");
      placeholderElement.style.width = "".concat(popupElement.offsetWidth, "px");
      popupElement.style.left = "0";
      popupElement.style.top = "0";
      popupElement.style.right = "auto";
      popupElement.style.bottom = "auto";
      popupElement.style.overflow = "hidden";
      var targetRect;
      if (Array.isArray(target)) {
        targetRect = {
          x: target[0],
          y: target[1],
          width: 0,
          height: 0
        };
      } else {
        var _rect$x, _rect$y;
        var rect = target.getBoundingClientRect();
        rect.x = (_rect$x = rect.x) !== null && _rect$x !== void 0 ? _rect$x : rect.left;
        rect.y = (_rect$y = rect.y) !== null && _rect$y !== void 0 ? _rect$y : rect.top;
        targetRect = {
          x: rect.x,
          y: rect.y,
          width: rect.width,
          height: rect.height
        };
      }
      var popupRect = popupElement.getBoundingClientRect();
      var _win$getComputedStyle2 = win.getComputedStyle(popupElement), height = _win$getComputedStyle2.height, width = _win$getComputedStyle2.width;
      popupRect.x = (_popupRect$x = popupRect.x) !== null && _popupRect$x !== void 0 ? _popupRect$x : popupRect.left;
      popupRect.y = (_popupRect$y = popupRect.y) !== null && _popupRect$y !== void 0 ? _popupRect$y : popupRect.top;
      var _doc$documentElement = doc.documentElement, clientWidth = _doc$documentElement.clientWidth, clientHeight = _doc$documentElement.clientHeight, scrollWidth = _doc$documentElement.scrollWidth, scrollHeight = _doc$documentElement.scrollHeight, scrollTop = _doc$documentElement.scrollTop, scrollLeft = _doc$documentElement.scrollLeft;
      var popupHeight = popupRect.height;
      var popupWidth = popupRect.width;
      var targetHeight = targetRect.height;
      var targetWidth = targetRect.width;
      var visibleRegion = {
        left: 0,
        top: 0,
        right: clientWidth,
        bottom: clientHeight
      };
      var scrollRegion = {
        left: -scrollLeft,
        top: -scrollTop,
        right: scrollWidth - scrollLeft,
        bottom: scrollHeight - scrollTop
      };
      var htmlRegion = placementInfo.htmlRegion;
      var VISIBLE = "visible";
      var VISIBLE_FIRST = "visibleFirst";
      if (htmlRegion !== "scroll" && htmlRegion !== VISIBLE_FIRST) {
        htmlRegion = VISIBLE;
      }
      var isVisibleFirst = htmlRegion === VISIBLE_FIRST;
      var scrollRegionArea = getVisibleArea(scrollRegion, scrollerList);
      var visibleRegionArea = getVisibleArea(visibleRegion, scrollerList);
      var visibleArea = htmlRegion === VISIBLE ? visibleRegionArea : scrollRegionArea;
      var adjustCheckVisibleArea = isVisibleFirst ? visibleRegionArea : visibleArea;
      popupElement.style.left = "auto";
      popupElement.style.top = "auto";
      popupElement.style.right = "0";
      popupElement.style.bottom = "0";
      var popupMirrorRect = popupElement.getBoundingClientRect();
      popupElement.style.left = originLeft;
      popupElement.style.top = originTop;
      popupElement.style.right = originRight;
      popupElement.style.bottom = originBottom;
      popupElement.style.overflow = originOverflow;
      (_popupElement$parentE2 = popupElement.parentElement) === null || _popupElement$parentE2 === void 0 || _popupElement$parentE2.removeChild(placeholderElement);
      var _scaleX = toNum(Math.round(popupWidth / parseFloat(width) * 1e3) / 1e3);
      var _scaleY = toNum(Math.round(popupHeight / parseFloat(height) * 1e3) / 1e3);
      if (_scaleX === 0 || _scaleY === 0 || isDOM(target) && !isVisible_default(target)) {
        return;
      }
      var offset = placementInfo.offset, targetOffset3 = placementInfo.targetOffset;
      var _getNumberOffset = getNumberOffset(popupRect, offset), _getNumberOffset2 = _slicedToArray(_getNumberOffset, 2), popupOffsetX = _getNumberOffset2[0], popupOffsetY = _getNumberOffset2[1];
      var _getNumberOffset3 = getNumberOffset(targetRect, targetOffset3), _getNumberOffset4 = _slicedToArray(_getNumberOffset3, 2), targetOffsetX = _getNumberOffset4[0], targetOffsetY = _getNumberOffset4[1];
      targetRect.x -= targetOffsetX;
      targetRect.y -= targetOffsetY;
      var _ref3 = placementInfo.points || [], _ref4 = _slicedToArray(_ref3, 2), popupPoint = _ref4[0], targetPoint = _ref4[1];
      var targetPoints = splitPoints(targetPoint);
      var popupPoints = splitPoints(popupPoint);
      var targetAlignPoint = getAlignPoint(targetRect, targetPoints);
      var popupAlignPoint = getAlignPoint(popupRect, popupPoints);
      var nextAlignInfo = _objectSpread2({}, placementInfo);
      var nextOffsetX = targetAlignPoint.x - popupAlignPoint.x + popupOffsetX;
      var nextOffsetY = targetAlignPoint.y - popupAlignPoint.y + popupOffsetY;
      var originIntersectionVisibleArea = getIntersectionVisibleArea(nextOffsetX, nextOffsetY);
      var originIntersectionRecommendArea = getIntersectionVisibleArea(nextOffsetX, nextOffsetY, visibleRegionArea);
      var targetAlignPointTL = getAlignPoint(targetRect, ["t", "l"]);
      var popupAlignPointTL = getAlignPoint(popupRect, ["t", "l"]);
      var targetAlignPointBR = getAlignPoint(targetRect, ["b", "r"]);
      var popupAlignPointBR = getAlignPoint(popupRect, ["b", "r"]);
      var overflow = placementInfo.overflow || {};
      var adjustX = overflow.adjustX, adjustY = overflow.adjustY, shiftX = overflow.shiftX, shiftY = overflow.shiftY;
      var supportAdjust = function supportAdjust2(val) {
        if (typeof val === "boolean") {
          return val;
        }
        return val >= 0;
      };
      var nextPopupY;
      var nextPopupBottom;
      var nextPopupX;
      var nextPopupRight;
      syncNextPopupPosition();
      var needAdjustY = supportAdjust(adjustY);
      var sameTB = popupPoints[0] === targetPoints[0];
      if (needAdjustY && popupPoints[0] === "t" && (nextPopupBottom > adjustCheckVisibleArea.bottom || prevFlipRef.current.bt)) {
        var tmpNextOffsetY = nextOffsetY;
        if (sameTB) {
          tmpNextOffsetY -= popupHeight - targetHeight;
        } else {
          tmpNextOffsetY = targetAlignPointTL.y - popupAlignPointBR.y - popupOffsetY;
        }
        var newVisibleArea = getIntersectionVisibleArea(nextOffsetX, tmpNextOffsetY);
        var newVisibleRecommendArea = getIntersectionVisibleArea(nextOffsetX, tmpNextOffsetY, visibleRegionArea);
        if (
          // Of course use larger one
          newVisibleArea > originIntersectionVisibleArea || newVisibleArea === originIntersectionVisibleArea && (!isVisibleFirst || // Choose recommend one
          newVisibleRecommendArea >= originIntersectionRecommendArea)
        ) {
          prevFlipRef.current.bt = true;
          nextOffsetY = tmpNextOffsetY;
          popupOffsetY = -popupOffsetY;
          nextAlignInfo.points = [reversePoints(popupPoints, 0), reversePoints(targetPoints, 0)];
        } else {
          prevFlipRef.current.bt = false;
        }
      }
      if (needAdjustY && popupPoints[0] === "b" && (nextPopupY < adjustCheckVisibleArea.top || prevFlipRef.current.tb)) {
        var _tmpNextOffsetY = nextOffsetY;
        if (sameTB) {
          _tmpNextOffsetY += popupHeight - targetHeight;
        } else {
          _tmpNextOffsetY = targetAlignPointBR.y - popupAlignPointTL.y - popupOffsetY;
        }
        var _newVisibleArea = getIntersectionVisibleArea(nextOffsetX, _tmpNextOffsetY);
        var _newVisibleRecommendArea = getIntersectionVisibleArea(nextOffsetX, _tmpNextOffsetY, visibleRegionArea);
        if (
          // Of course use larger one
          _newVisibleArea > originIntersectionVisibleArea || _newVisibleArea === originIntersectionVisibleArea && (!isVisibleFirst || // Choose recommend one
          _newVisibleRecommendArea >= originIntersectionRecommendArea)
        ) {
          prevFlipRef.current.tb = true;
          nextOffsetY = _tmpNextOffsetY;
          popupOffsetY = -popupOffsetY;
          nextAlignInfo.points = [reversePoints(popupPoints, 0), reversePoints(targetPoints, 0)];
        } else {
          prevFlipRef.current.tb = false;
        }
      }
      var needAdjustX = supportAdjust(adjustX);
      var sameLR = popupPoints[1] === targetPoints[1];
      if (needAdjustX && popupPoints[1] === "l" && (nextPopupRight > adjustCheckVisibleArea.right || prevFlipRef.current.rl)) {
        var tmpNextOffsetX = nextOffsetX;
        if (sameLR) {
          tmpNextOffsetX -= popupWidth - targetWidth;
        } else {
          tmpNextOffsetX = targetAlignPointTL.x - popupAlignPointBR.x - popupOffsetX;
        }
        var _newVisibleArea2 = getIntersectionVisibleArea(tmpNextOffsetX, nextOffsetY);
        var _newVisibleRecommendArea2 = getIntersectionVisibleArea(tmpNextOffsetX, nextOffsetY, visibleRegionArea);
        if (
          // Of course use larger one
          _newVisibleArea2 > originIntersectionVisibleArea || _newVisibleArea2 === originIntersectionVisibleArea && (!isVisibleFirst || // Choose recommend one
          _newVisibleRecommendArea2 >= originIntersectionRecommendArea)
        ) {
          prevFlipRef.current.rl = true;
          nextOffsetX = tmpNextOffsetX;
          popupOffsetX = -popupOffsetX;
          nextAlignInfo.points = [reversePoints(popupPoints, 1), reversePoints(targetPoints, 1)];
        } else {
          prevFlipRef.current.rl = false;
        }
      }
      if (needAdjustX && popupPoints[1] === "r" && (nextPopupX < adjustCheckVisibleArea.left || prevFlipRef.current.lr)) {
        var _tmpNextOffsetX = nextOffsetX;
        if (sameLR) {
          _tmpNextOffsetX += popupWidth - targetWidth;
        } else {
          _tmpNextOffsetX = targetAlignPointBR.x - popupAlignPointTL.x - popupOffsetX;
        }
        var _newVisibleArea3 = getIntersectionVisibleArea(_tmpNextOffsetX, nextOffsetY);
        var _newVisibleRecommendArea3 = getIntersectionVisibleArea(_tmpNextOffsetX, nextOffsetY, visibleRegionArea);
        if (
          // Of course use larger one
          _newVisibleArea3 > originIntersectionVisibleArea || _newVisibleArea3 === originIntersectionVisibleArea && (!isVisibleFirst || // Choose recommend one
          _newVisibleRecommendArea3 >= originIntersectionRecommendArea)
        ) {
          prevFlipRef.current.lr = true;
          nextOffsetX = _tmpNextOffsetX;
          popupOffsetX = -popupOffsetX;
          nextAlignInfo.points = [reversePoints(popupPoints, 1), reversePoints(targetPoints, 1)];
        } else {
          prevFlipRef.current.lr = false;
        }
      }
      syncNextPopupPosition();
      var numShiftX = shiftX === true ? 0 : shiftX;
      if (typeof numShiftX === "number") {
        if (nextPopupX < visibleRegionArea.left) {
          nextOffsetX -= nextPopupX - visibleRegionArea.left - popupOffsetX;
          if (targetRect.x + targetWidth < visibleRegionArea.left + numShiftX) {
            nextOffsetX += targetRect.x - visibleRegionArea.left + targetWidth - numShiftX;
          }
        }
        if (nextPopupRight > visibleRegionArea.right) {
          nextOffsetX -= nextPopupRight - visibleRegionArea.right - popupOffsetX;
          if (targetRect.x > visibleRegionArea.right - numShiftX) {
            nextOffsetX += targetRect.x - visibleRegionArea.right + numShiftX;
          }
        }
      }
      var numShiftY = shiftY === true ? 0 : shiftY;
      if (typeof numShiftY === "number") {
        if (nextPopupY < visibleRegionArea.top) {
          nextOffsetY -= nextPopupY - visibleRegionArea.top - popupOffsetY;
          if (targetRect.y + targetHeight < visibleRegionArea.top + numShiftY) {
            nextOffsetY += targetRect.y - visibleRegionArea.top + targetHeight - numShiftY;
          }
        }
        if (nextPopupBottom > visibleRegionArea.bottom) {
          nextOffsetY -= nextPopupBottom - visibleRegionArea.bottom - popupOffsetY;
          if (targetRect.y > visibleRegionArea.bottom - numShiftY) {
            nextOffsetY += targetRect.y - visibleRegionArea.bottom + numShiftY;
          }
        }
      }
      var popupLeft = popupRect.x + nextOffsetX;
      var popupRight = popupLeft + popupWidth;
      var popupTop = popupRect.y + nextOffsetY;
      var popupBottom = popupTop + popupHeight;
      var targetLeft = targetRect.x;
      var targetRight = targetLeft + targetWidth;
      var targetTop = targetRect.y;
      var targetBottom = targetTop + targetHeight;
      var maxLeft = Math.max(popupLeft, targetLeft);
      var minRight = Math.min(popupRight, targetRight);
      var xCenter = (maxLeft + minRight) / 2;
      var nextArrowX = xCenter - popupLeft;
      var maxTop = Math.max(popupTop, targetTop);
      var minBottom = Math.min(popupBottom, targetBottom);
      var yCenter = (maxTop + minBottom) / 2;
      var nextArrowY = yCenter - popupTop;
      onPopupAlign === null || onPopupAlign === void 0 || onPopupAlign(popupEle, nextAlignInfo);
      var offsetX4Right = popupMirrorRect.right - popupRect.x - (nextOffsetX + popupRect.width);
      var offsetY4Bottom = popupMirrorRect.bottom - popupRect.y - (nextOffsetY + popupRect.height);
      if (_scaleX === 1) {
        nextOffsetX = Math.round(nextOffsetX);
        offsetX4Right = Math.round(offsetX4Right);
      }
      if (_scaleY === 1) {
        nextOffsetY = Math.round(nextOffsetY);
        offsetY4Bottom = Math.round(offsetY4Bottom);
      }
      var nextOffsetInfo = {
        ready: true,
        offsetX: nextOffsetX / _scaleX,
        offsetY: nextOffsetY / _scaleY,
        offsetR: offsetX4Right / _scaleX,
        offsetB: offsetY4Bottom / _scaleY,
        arrowX: nextArrowX / _scaleX,
        arrowY: nextArrowY / _scaleY,
        scaleX: _scaleX,
        scaleY: _scaleY,
        align: nextAlignInfo
      };
      setOffsetInfo(nextOffsetInfo);
    }
  });
  var triggerAlign = function triggerAlign2() {
    alignCountRef.current += 1;
    var id = alignCountRef.current;
    Promise.resolve().then(function() {
      if (alignCountRef.current === id) {
        onAlign();
      }
    });
  };
  var resetReady = function resetReady2() {
    setOffsetInfo(function(ori) {
      return _objectSpread2(_objectSpread2({}, ori), {}, {
        ready: false
      });
    });
  };
  useLayoutEffect_default(resetReady, [placement]);
  useLayoutEffect_default(function() {
    if (!open) {
      resetReady();
    }
  }, [open]);
  return [offsetInfo.ready, offsetInfo.offsetX, offsetInfo.offsetY, offsetInfo.offsetR, offsetInfo.offsetB, offsetInfo.arrowX, offsetInfo.arrowY, offsetInfo.scaleX, offsetInfo.scaleY, offsetInfo.align, triggerAlign];
}
var React43;
var init_useAlign = __esm({
  "node_modules/@rc-component/trigger/es/hooks/useAlign.js"() {
    init_objectSpread2();
    init_slicedToArray();
    init_findDOMNode();
    init_isVisible();
    init_useEvent();
    init_useLayoutEffect();
    React43 = __toESM(require_react());
    init_util2();
  }
});

// node_modules/@rc-component/trigger/es/hooks/useWatch.js
function useWatch(open, target, popup, onAlign, onScroll) {
  useLayoutEffect_default(function() {
    if (open && target && popup) {
      let notifyScroll = function() {
        onAlign();
        onScroll();
      };
      var targetElement = target;
      var popupElement = popup;
      var targetScrollList = collectScroller(targetElement);
      var popupScrollList = collectScroller(popupElement);
      var win = getWin(popupElement);
      var mergedList = new Set([win].concat(_toConsumableArray(targetScrollList), _toConsumableArray(popupScrollList)));
      mergedList.forEach(function(scroller) {
        scroller.addEventListener("scroll", notifyScroll, {
          passive: true
        });
      });
      win.addEventListener("resize", notifyScroll, {
        passive: true
      });
      onAlign();
      return function() {
        mergedList.forEach(function(scroller) {
          scroller.removeEventListener("scroll", notifyScroll);
          win.removeEventListener("resize", notifyScroll);
        });
      };
    }
  }, [open, target, popup]);
}
var init_useWatch = __esm({
  "node_modules/@rc-component/trigger/es/hooks/useWatch.js"() {
    init_toConsumableArray();
    init_useLayoutEffect();
    init_util2();
  }
});

// node_modules/@rc-component/trigger/es/hooks/useWinClick.js
function useWinClick(open, clickToHide, targetEle, popupEle, mask, maskClosable, inPopupOrChild, triggerOpen) {
  var openRef = React44.useRef(open);
  openRef.current = open;
  var popupPointerDownRef = React44.useRef(false);
  React44.useEffect(function() {
    if (clickToHide && popupEle && (!mask || maskClosable)) {
      var onPointerDown = function onPointerDown2() {
        popupPointerDownRef.current = false;
      };
      var onTriggerClose = function onTriggerClose2(e) {
        var _e$composedPath;
        if (openRef.current && !inPopupOrChild(((_e$composedPath = e.composedPath) === null || _e$composedPath === void 0 || (_e$composedPath = _e$composedPath.call(e)) === null || _e$composedPath === void 0 ? void 0 : _e$composedPath[0]) || e.target) && !popupPointerDownRef.current) {
          triggerOpen(false);
        }
      };
      var win = getWin(popupEle);
      win.addEventListener("pointerdown", onPointerDown, true);
      win.addEventListener("mousedown", onTriggerClose, true);
      win.addEventListener("contextmenu", onTriggerClose, true);
      var targetShadowRoot = getShadowRoot(targetEle);
      if (targetShadowRoot) {
        targetShadowRoot.addEventListener("mousedown", onTriggerClose, true);
        targetShadowRoot.addEventListener("contextmenu", onTriggerClose, true);
      }
      if (true) {
        var _targetEle$getRootNod, _popupEle$getRootNode;
        var targetRoot = targetEle === null || targetEle === void 0 || (_targetEle$getRootNod = targetEle.getRootNode) === null || _targetEle$getRootNod === void 0 ? void 0 : _targetEle$getRootNod.call(targetEle);
        var popupRoot = (_popupEle$getRootNode = popupEle.getRootNode) === null || _popupEle$getRootNode === void 0 ? void 0 : _popupEle$getRootNode.call(popupEle);
        warning(targetRoot === popupRoot, "trigger element and popup element should in same shadow root.");
      }
      return function() {
        win.removeEventListener("pointerdown", onPointerDown, true);
        win.removeEventListener("mousedown", onTriggerClose, true);
        win.removeEventListener("contextmenu", onTriggerClose, true);
        if (targetShadowRoot) {
          targetShadowRoot.removeEventListener("mousedown", onTriggerClose, true);
          targetShadowRoot.removeEventListener("contextmenu", onTriggerClose, true);
        }
      };
    }
  }, [clickToHide, targetEle, popupEle, mask, maskClosable]);
  function onPopupPointerDown() {
    popupPointerDownRef.current = true;
  }
  return onPopupPointerDown;
}
var React44;
var init_useWinClick = __esm({
  "node_modules/@rc-component/trigger/es/hooks/useWinClick.js"() {
    init_shadow();
    init_warning();
    React44 = __toESM(require_react());
    init_util2();
  }
});

// node_modules/@rc-component/trigger/es/index.js
function generateTrigger() {
  var PortalComponent = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : es_default4;
  var Trigger = React45.forwardRef(function(props, ref) {
    var _props$prefixCls = props.prefixCls, prefixCls = _props$prefixCls === void 0 ? "rc-trigger-popup" : _props$prefixCls, children = props.children, _props$action = props.action, action = _props$action === void 0 ? "hover" : _props$action, showAction = props.showAction, hideAction = props.hideAction, popupVisible = props.popupVisible, defaultPopupVisible = props.defaultPopupVisible, onPopupVisibleChange = props.onPopupVisibleChange, afterPopupVisibleChange = props.afterPopupVisibleChange, mouseEnterDelay = props.mouseEnterDelay, _props$mouseLeaveDela = props.mouseLeaveDelay, mouseLeaveDelay = _props$mouseLeaveDela === void 0 ? 0.1 : _props$mouseLeaveDela, focusDelay = props.focusDelay, blurDelay = props.blurDelay, mask = props.mask, _props$maskClosable = props.maskClosable, maskClosable = _props$maskClosable === void 0 ? true : _props$maskClosable, getPopupContainer = props.getPopupContainer, forceRender = props.forceRender, autoDestroy = props.autoDestroy, destroyPopupOnHide = props.destroyPopupOnHide, popup = props.popup, popupClassName = props.popupClassName, popupStyle = props.popupStyle, popupPlacement = props.popupPlacement, _props$builtinPlaceme = props.builtinPlacements, builtinPlacements = _props$builtinPlaceme === void 0 ? {} : _props$builtinPlaceme, popupAlign = props.popupAlign, zIndex = props.zIndex, stretch = props.stretch, getPopupClassNameFromAlign = props.getPopupClassNameFromAlign, fresh = props.fresh, alignPoint = props.alignPoint, onPopupClick = props.onPopupClick, onPopupAlign = props.onPopupAlign, arrow = props.arrow, popupMotion = props.popupMotion, maskMotion = props.maskMotion, popupTransitionName = props.popupTransitionName, popupAnimation = props.popupAnimation, maskTransitionName = props.maskTransitionName, maskAnimation = props.maskAnimation, className = props.className, getTriggerDOMNode = props.getTriggerDOMNode, restProps = _objectWithoutProperties(props, _excluded7);
    var mergedAutoDestroy = autoDestroy || destroyPopupOnHide || false;
    var _React$useState = React45.useState(false), _React$useState2 = _slicedToArray(_React$useState, 2), mobile = _React$useState2[0], setMobile = _React$useState2[1];
    useLayoutEffect_default(function() {
      setMobile(isMobile_default());
    }, []);
    var subPopupElements = React45.useRef({});
    var parentContext = React45.useContext(context_default);
    var context = React45.useMemo(function() {
      return {
        registerSubPopup: function registerSubPopup(id2, subPopupEle) {
          subPopupElements.current[id2] = subPopupEle;
          parentContext === null || parentContext === void 0 || parentContext.registerSubPopup(id2, subPopupEle);
        }
      };
    }, [parentContext]);
    var id = useId_default();
    var _React$useState3 = React45.useState(null), _React$useState4 = _slicedToArray(_React$useState3, 2), popupEle = _React$useState4[0], setPopupEle = _React$useState4[1];
    var externalPopupRef = React45.useRef(null);
    var setPopupRef = useEvent(function(node) {
      externalPopupRef.current = node;
      if (isDOM(node) && popupEle !== node) {
        setPopupEle(node);
      }
      parentContext === null || parentContext === void 0 || parentContext.registerSubPopup(id, node);
    });
    var _React$useState5 = React45.useState(null), _React$useState6 = _slicedToArray(_React$useState5, 2), targetEle = _React$useState6[0], setTargetEle = _React$useState6[1];
    var externalForwardRef = React45.useRef(null);
    var setTargetRef = useEvent(function(node) {
      if (isDOM(node) && targetEle !== node) {
        setTargetEle(node);
        externalForwardRef.current = node;
      }
    });
    var child = React45.Children.only(children);
    var originChildProps = (child === null || child === void 0 ? void 0 : child.props) || {};
    var cloneProps = {};
    var inPopupOrChild = useEvent(function(ele) {
      var _getShadowRoot, _getShadowRoot2;
      var childDOM = targetEle;
      return (childDOM === null || childDOM === void 0 ? void 0 : childDOM.contains(ele)) || ((_getShadowRoot = getShadowRoot(childDOM)) === null || _getShadowRoot === void 0 ? void 0 : _getShadowRoot.host) === ele || ele === childDOM || (popupEle === null || popupEle === void 0 ? void 0 : popupEle.contains(ele)) || ((_getShadowRoot2 = getShadowRoot(popupEle)) === null || _getShadowRoot2 === void 0 ? void 0 : _getShadowRoot2.host) === ele || ele === popupEle || Object.values(subPopupElements.current).some(function(subPopupEle) {
        return (subPopupEle === null || subPopupEle === void 0 ? void 0 : subPopupEle.contains(ele)) || ele === subPopupEle;
      });
    });
    var mergePopupMotion = getMotion(prefixCls, popupMotion, popupAnimation, popupTransitionName);
    var mergeMaskMotion = getMotion(prefixCls, maskMotion, maskAnimation, maskTransitionName);
    var _React$useState7 = React45.useState(defaultPopupVisible || false), _React$useState8 = _slicedToArray(_React$useState7, 2), internalOpen = _React$useState8[0], setInternalOpen = _React$useState8[1];
    var mergedOpen = popupVisible !== null && popupVisible !== void 0 ? popupVisible : internalOpen;
    var setMergedOpen = useEvent(function(nextOpen) {
      if (popupVisible === void 0) {
        setInternalOpen(nextOpen);
      }
    });
    useLayoutEffect_default(function() {
      setInternalOpen(popupVisible || false);
    }, [popupVisible]);
    var openRef = React45.useRef(mergedOpen);
    openRef.current = mergedOpen;
    var lastTriggerRef = React45.useRef([]);
    lastTriggerRef.current = [];
    var internalTriggerOpen = useEvent(function(nextOpen) {
      var _lastTriggerRef$curre;
      setMergedOpen(nextOpen);
      if (((_lastTriggerRef$curre = lastTriggerRef.current[lastTriggerRef.current.length - 1]) !== null && _lastTriggerRef$curre !== void 0 ? _lastTriggerRef$curre : mergedOpen) !== nextOpen) {
        lastTriggerRef.current.push(nextOpen);
        onPopupVisibleChange === null || onPopupVisibleChange === void 0 || onPopupVisibleChange(nextOpen);
      }
    });
    var delayRef = React45.useRef();
    var clearDelay = function clearDelay2() {
      clearTimeout(delayRef.current);
    };
    var triggerOpen = function triggerOpen2(nextOpen) {
      var delay = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
      clearDelay();
      if (delay === 0) {
        internalTriggerOpen(nextOpen);
      } else {
        delayRef.current = setTimeout(function() {
          internalTriggerOpen(nextOpen);
        }, delay * 1e3);
      }
    };
    React45.useEffect(function() {
      return clearDelay;
    }, []);
    var _React$useState9 = React45.useState(false), _React$useState10 = _slicedToArray(_React$useState9, 2), inMotion = _React$useState10[0], setInMotion = _React$useState10[1];
    useLayoutEffect_default(function(firstMount) {
      if (!firstMount || mergedOpen) {
        setInMotion(true);
      }
    }, [mergedOpen]);
    var _React$useState11 = React45.useState(null), _React$useState12 = _slicedToArray(_React$useState11, 2), motionPrepareResolve = _React$useState12[0], setMotionPrepareResolve = _React$useState12[1];
    var _React$useState13 = React45.useState(null), _React$useState14 = _slicedToArray(_React$useState13, 2), mousePos = _React$useState14[0], setMousePos = _React$useState14[1];
    var setMousePosByEvent = function setMousePosByEvent2(event) {
      setMousePos([event.clientX, event.clientY]);
    };
    var _useAlign = useAlign(mergedOpen, popupEle, alignPoint && mousePos !== null ? mousePos : targetEle, popupPlacement, builtinPlacements, popupAlign, onPopupAlign), _useAlign2 = _slicedToArray(_useAlign, 11), ready = _useAlign2[0], offsetX = _useAlign2[1], offsetY = _useAlign2[2], offsetR = _useAlign2[3], offsetB = _useAlign2[4], arrowX = _useAlign2[5], arrowY = _useAlign2[6], scaleX = _useAlign2[7], scaleY = _useAlign2[8], alignInfo = _useAlign2[9], onAlign = _useAlign2[10];
    var _useAction = useAction(mobile, action, showAction, hideAction), _useAction2 = _slicedToArray(_useAction, 2), showActions = _useAction2[0], hideActions = _useAction2[1];
    var clickToShow = showActions.has("click");
    var clickToHide = hideActions.has("click") || hideActions.has("contextMenu");
    var triggerAlign = useEvent(function() {
      if (!inMotion) {
        onAlign();
      }
    });
    var onScroll = function onScroll2() {
      if (openRef.current && alignPoint && clickToHide) {
        triggerOpen(false);
      }
    };
    useWatch(mergedOpen, targetEle, popupEle, triggerAlign, onScroll);
    useLayoutEffect_default(function() {
      triggerAlign();
    }, [mousePos, popupPlacement]);
    useLayoutEffect_default(function() {
      if (mergedOpen && !(builtinPlacements !== null && builtinPlacements !== void 0 && builtinPlacements[popupPlacement])) {
        triggerAlign();
      }
    }, [JSON.stringify(popupAlign)]);
    var alignedClassName = React45.useMemo(function() {
      var baseClassName = getAlignPopupClassName(builtinPlacements, prefixCls, alignInfo, alignPoint);
      return (0, import_classnames11.default)(baseClassName, getPopupClassNameFromAlign === null || getPopupClassNameFromAlign === void 0 ? void 0 : getPopupClassNameFromAlign(alignInfo));
    }, [alignInfo, getPopupClassNameFromAlign, builtinPlacements, prefixCls, alignPoint]);
    React45.useImperativeHandle(ref, function() {
      return {
        nativeElement: externalForwardRef.current,
        popupElement: externalPopupRef.current,
        forceAlign: triggerAlign
      };
    });
    var _React$useState15 = React45.useState(0), _React$useState16 = _slicedToArray(_React$useState15, 2), targetWidth = _React$useState16[0], setTargetWidth = _React$useState16[1];
    var _React$useState17 = React45.useState(0), _React$useState18 = _slicedToArray(_React$useState17, 2), targetHeight = _React$useState18[0], setTargetHeight = _React$useState18[1];
    var syncTargetSize = function syncTargetSize2() {
      if (stretch && targetEle) {
        var rect = targetEle.getBoundingClientRect();
        setTargetWidth(rect.width);
        setTargetHeight(rect.height);
      }
    };
    var onTargetResize = function onTargetResize2() {
      syncTargetSize();
      triggerAlign();
    };
    var onVisibleChanged = function onVisibleChanged2(visible) {
      setInMotion(false);
      onAlign();
      afterPopupVisibleChange === null || afterPopupVisibleChange === void 0 || afterPopupVisibleChange(visible);
    };
    var onPrepare = function onPrepare2() {
      return new Promise(function(resolve) {
        syncTargetSize();
        setMotionPrepareResolve(function() {
          return resolve;
        });
      });
    };
    useLayoutEffect_default(function() {
      if (motionPrepareResolve) {
        onAlign();
        motionPrepareResolve();
        setMotionPrepareResolve(null);
      }
    }, [motionPrepareResolve]);
    function wrapperAction(eventName, nextOpen, delay, preEvent) {
      cloneProps[eventName] = function(event) {
        var _originChildProps$eve;
        preEvent === null || preEvent === void 0 || preEvent(event);
        triggerOpen(nextOpen, delay);
        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }
        (_originChildProps$eve = originChildProps[eventName]) === null || _originChildProps$eve === void 0 || _originChildProps$eve.call.apply(_originChildProps$eve, [originChildProps, event].concat(args));
      };
    }
    if (clickToShow || clickToHide) {
      cloneProps.onClick = function(event) {
        var _originChildProps$onC;
        if (openRef.current && clickToHide) {
          triggerOpen(false);
        } else if (!openRef.current && clickToShow) {
          setMousePosByEvent(event);
          triggerOpen(true);
        }
        for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
          args[_key2 - 1] = arguments[_key2];
        }
        (_originChildProps$onC = originChildProps.onClick) === null || _originChildProps$onC === void 0 || _originChildProps$onC.call.apply(_originChildProps$onC, [originChildProps, event].concat(args));
      };
    }
    var onPopupPointerDown = useWinClick(mergedOpen, clickToHide, targetEle, popupEle, mask, maskClosable, inPopupOrChild, triggerOpen);
    var hoverToShow = showActions.has("hover");
    var hoverToHide = hideActions.has("hover");
    var onPopupMouseEnter;
    var onPopupMouseLeave;
    if (hoverToShow) {
      wrapperAction("onMouseEnter", true, mouseEnterDelay, function(event) {
        setMousePosByEvent(event);
      });
      wrapperAction("onPointerEnter", true, mouseEnterDelay, function(event) {
        setMousePosByEvent(event);
      });
      onPopupMouseEnter = function onPopupMouseEnter2(event) {
        if ((mergedOpen || inMotion) && popupEle !== null && popupEle !== void 0 && popupEle.contains(event.target)) {
          triggerOpen(true, mouseEnterDelay);
        }
      };
      if (alignPoint) {
        cloneProps.onMouseMove = function(event) {
          var _originChildProps$onM;
          (_originChildProps$onM = originChildProps.onMouseMove) === null || _originChildProps$onM === void 0 || _originChildProps$onM.call(originChildProps, event);
        };
      }
    }
    if (hoverToHide) {
      wrapperAction("onMouseLeave", false, mouseLeaveDelay);
      wrapperAction("onPointerLeave", false, mouseLeaveDelay);
      onPopupMouseLeave = function onPopupMouseLeave2() {
        triggerOpen(false, mouseLeaveDelay);
      };
    }
    if (showActions.has("focus")) {
      wrapperAction("onFocus", true, focusDelay);
    }
    if (hideActions.has("focus")) {
      wrapperAction("onBlur", false, blurDelay);
    }
    if (showActions.has("contextMenu")) {
      cloneProps.onContextMenu = function(event) {
        var _originChildProps$onC2;
        if (openRef.current && hideActions.has("contextMenu")) {
          triggerOpen(false);
        } else {
          setMousePosByEvent(event);
          triggerOpen(true);
        }
        event.preventDefault();
        for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
          args[_key3 - 1] = arguments[_key3];
        }
        (_originChildProps$onC2 = originChildProps.onContextMenu) === null || _originChildProps$onC2 === void 0 || _originChildProps$onC2.call.apply(_originChildProps$onC2, [originChildProps, event].concat(args));
      };
    }
    if (className) {
      cloneProps.className = (0, import_classnames11.default)(originChildProps.className, className);
    }
    var renderedRef = React45.useRef(false);
    renderedRef.current || (renderedRef.current = forceRender || mergedOpen || inMotion);
    var mergedChildrenProps = _objectSpread2(_objectSpread2({}, originChildProps), cloneProps);
    var passedProps = {};
    var passedEventList = ["onContextMenu", "onClick", "onMouseDown", "onTouchStart", "onMouseEnter", "onMouseLeave", "onFocus", "onBlur"];
    passedEventList.forEach(function(eventName) {
      if (restProps[eventName]) {
        passedProps[eventName] = function() {
          var _mergedChildrenProps$;
          for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
            args[_key4] = arguments[_key4];
          }
          (_mergedChildrenProps$ = mergedChildrenProps[eventName]) === null || _mergedChildrenProps$ === void 0 || _mergedChildrenProps$.call.apply(_mergedChildrenProps$, [mergedChildrenProps].concat(args));
          restProps[eventName].apply(restProps, args);
        };
      }
    });
    var triggerNode = React45.cloneElement(child, _objectSpread2(_objectSpread2({}, mergedChildrenProps), passedProps));
    var arrowPos = {
      x: arrowX,
      y: arrowY
    };
    var innerArrow = arrow ? _objectSpread2({}, arrow !== true ? arrow : {}) : null;
    return React45.createElement(React45.Fragment, null, React45.createElement(es_default, {
      disabled: !mergedOpen,
      ref: setTargetRef,
      onResize: onTargetResize
    }, React45.createElement(TriggerWrapper_default, {
      getTriggerDOMNode
    }, triggerNode)), renderedRef.current && React45.createElement(context_default.Provider, {
      value: context
    }, React45.createElement(Popup_default, {
      portal: PortalComponent,
      ref: setPopupRef,
      prefixCls,
      popup,
      className: (0, import_classnames11.default)(popupClassName, alignedClassName),
      style: popupStyle,
      target: targetEle,
      onMouseEnter: onPopupMouseEnter,
      onMouseLeave: onPopupMouseLeave,
      onPointerEnter: onPopupMouseEnter,
      zIndex,
      open: mergedOpen,
      keepDom: inMotion,
      fresh,
      onClick: onPopupClick,
      onPointerDownCapture: onPopupPointerDown,
      mask,
      motion: mergePopupMotion,
      maskMotion: mergeMaskMotion,
      onVisibleChanged,
      onPrepare,
      forceRender,
      autoDestroy: mergedAutoDestroy,
      getPopupContainer,
      align: alignInfo,
      arrow: innerArrow,
      arrowPos,
      ready,
      offsetX,
      offsetY,
      offsetR,
      offsetB,
      onAlign: triggerAlign,
      stretch,
      targetWidth: targetWidth / scaleX,
      targetHeight: targetHeight / scaleY
    })));
  });
  if (true) {
    Trigger.displayName = "Trigger";
  }
  return Trigger;
}
var import_classnames11, React45, _excluded7, es_default5;
var init_es7 = __esm({
  "node_modules/@rc-component/trigger/es/index.js"() {
    init_objectSpread2();
    init_slicedToArray();
    init_objectWithoutProperties();
    init_es6();
    import_classnames11 = __toESM(require_classnames());
    init_es3();
    init_findDOMNode();
    init_shadow();
    init_useEvent();
    init_useId();
    init_useLayoutEffect();
    init_isMobile();
    React45 = __toESM(require_react());
    init_Popup();
    init_TriggerWrapper();
    init_context3();
    init_useAction();
    init_useAlign();
    init_useWatch();
    init_useWinClick();
    init_util2();
    _excluded7 = ["prefixCls", "children", "action", "showAction", "hideAction", "popupVisible", "defaultPopupVisible", "onPopupVisibleChange", "afterPopupVisibleChange", "mouseEnterDelay", "mouseLeaveDelay", "focusDelay", "blurDelay", "mask", "maskClosable", "getPopupContainer", "forceRender", "autoDestroy", "destroyPopupOnHide", "popup", "popupClassName", "popupStyle", "popupPlacement", "builtinPlacements", "popupAlign", "zIndex", "stretch", "getPopupClassNameFromAlign", "fresh", "alignPoint", "onPopupClick", "onPopupAlign", "arrow", "popupMotion", "maskMotion", "popupTransitionName", "popupAnimation", "maskTransitionName", "maskAnimation", "className", "getTriggerDOMNode"];
    es_default5 = generateTrigger(es_default4);
  }
});

// node_modules/rc-select/es/SelectTrigger.js
var import_classnames12, React46, _excluded8, getBuiltInPlacements, SelectTrigger, RefSelectTrigger, SelectTrigger_default;
var init_SelectTrigger = __esm({
  "node_modules/rc-select/es/SelectTrigger.js"() {
    init_extends();
    init_defineProperty();
    init_objectSpread2();
    init_objectWithoutProperties();
    init_es7();
    import_classnames12 = __toESM(require_classnames());
    React46 = __toESM(require_react());
    _excluded8 = ["prefixCls", "disabled", "visible", "children", "popupElement", "animation", "transitionName", "dropdownStyle", "dropdownClassName", "direction", "placement", "builtinPlacements", "dropdownMatchSelectWidth", "dropdownRender", "dropdownAlign", "getPopupContainer", "empty", "getTriggerDOMNode", "onPopupVisibleChange", "onPopupMouseEnter"];
    getBuiltInPlacements = function getBuiltInPlacements2(dropdownMatchSelectWidth) {
      var adjustX = dropdownMatchSelectWidth === true ? 0 : 1;
      return {
        bottomLeft: {
          points: ["tl", "bl"],
          offset: [0, 4],
          overflow: {
            adjustX,
            adjustY: 1
          },
          htmlRegion: "scroll"
        },
        bottomRight: {
          points: ["tr", "br"],
          offset: [0, 4],
          overflow: {
            adjustX,
            adjustY: 1
          },
          htmlRegion: "scroll"
        },
        topLeft: {
          points: ["bl", "tl"],
          offset: [0, -4],
          overflow: {
            adjustX,
            adjustY: 1
          },
          htmlRegion: "scroll"
        },
        topRight: {
          points: ["br", "tr"],
          offset: [0, -4],
          overflow: {
            adjustX,
            adjustY: 1
          },
          htmlRegion: "scroll"
        }
      };
    };
    SelectTrigger = function SelectTrigger2(props, ref) {
      var prefixCls = props.prefixCls, disabled = props.disabled, visible = props.visible, children = props.children, popupElement = props.popupElement, animation = props.animation, transitionName = props.transitionName, dropdownStyle = props.dropdownStyle, dropdownClassName = props.dropdownClassName, _props$direction = props.direction, direction = _props$direction === void 0 ? "ltr" : _props$direction, placement = props.placement, builtinPlacements = props.builtinPlacements, dropdownMatchSelectWidth = props.dropdownMatchSelectWidth, dropdownRender = props.dropdownRender, dropdownAlign = props.dropdownAlign, getPopupContainer = props.getPopupContainer, empty = props.empty, getTriggerDOMNode = props.getTriggerDOMNode, onPopupVisibleChange = props.onPopupVisibleChange, onPopupMouseEnter = props.onPopupMouseEnter, restProps = _objectWithoutProperties(props, _excluded8);
      var dropdownPrefixCls = "".concat(prefixCls, "-dropdown");
      var popupNode = popupElement;
      if (dropdownRender) {
        popupNode = dropdownRender(popupElement);
      }
      var mergedBuiltinPlacements = React46.useMemo(function() {
        return builtinPlacements || getBuiltInPlacements(dropdownMatchSelectWidth);
      }, [builtinPlacements, dropdownMatchSelectWidth]);
      var mergedTransitionName = animation ? "".concat(dropdownPrefixCls, "-").concat(animation) : transitionName;
      var isNumberPopupWidth = typeof dropdownMatchSelectWidth === "number";
      var stretch = React46.useMemo(function() {
        if (isNumberPopupWidth) {
          return null;
        }
        return dropdownMatchSelectWidth === false ? "minWidth" : "width";
      }, [dropdownMatchSelectWidth, isNumberPopupWidth]);
      var popupStyle = dropdownStyle;
      if (isNumberPopupWidth) {
        popupStyle = _objectSpread2(_objectSpread2({}, popupStyle), {}, {
          width: dropdownMatchSelectWidth
        });
      }
      var triggerPopupRef = React46.useRef(null);
      React46.useImperativeHandle(ref, function() {
        return {
          getPopupElement: function getPopupElement() {
            var _triggerPopupRef$curr;
            return (_triggerPopupRef$curr = triggerPopupRef.current) === null || _triggerPopupRef$curr === void 0 ? void 0 : _triggerPopupRef$curr.popupElement;
          }
        };
      });
      return React46.createElement(es_default5, _extends({}, restProps, {
        showAction: onPopupVisibleChange ? ["click"] : [],
        hideAction: onPopupVisibleChange ? ["click"] : [],
        popupPlacement: placement || (direction === "rtl" ? "bottomRight" : "bottomLeft"),
        builtinPlacements: mergedBuiltinPlacements,
        prefixCls: dropdownPrefixCls,
        popupTransitionName: mergedTransitionName,
        popup: React46.createElement("div", {
          onMouseEnter: onPopupMouseEnter
        }, popupNode),
        ref: triggerPopupRef,
        stretch,
        popupAlign: dropdownAlign,
        popupVisible: visible,
        getPopupContainer,
        popupClassName: (0, import_classnames12.default)(dropdownClassName, _defineProperty({}, "".concat(dropdownPrefixCls, "-empty"), empty)),
        popupStyle,
        getTriggerDOMNode,
        onPopupVisibleChange
      }), children);
    };
    RefSelectTrigger = React46.forwardRef(SelectTrigger);
    if (true) {
      RefSelectTrigger.displayName = "SelectTrigger";
    }
    SelectTrigger_default = RefSelectTrigger;
  }
});

// node_modules/rc-select/es/utils/valueUtil.js
function getKey(data, index2) {
  var key = data.key;
  var value;
  if ("value" in data) {
    value = data.value;
  }
  if (key !== null && key !== void 0) {
    return key;
  }
  if (value !== void 0) {
    return value;
  }
  return "rc-index-key-".concat(index2);
}
function isValidCount(value) {
  return typeof value !== "undefined" && !Number.isNaN(value);
}
function fillFieldNames(fieldNames, childrenAsData) {
  var _ref = fieldNames || {}, label = _ref.label, value = _ref.value, options = _ref.options, groupLabel = _ref.groupLabel;
  var mergedLabel = label || (childrenAsData ? "children" : "label");
  return {
    label: mergedLabel,
    value: value || "value",
    options: options || "options",
    groupLabel: groupLabel || mergedLabel
  };
}
function flattenOptions(options) {
  var _ref2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, fieldNames = _ref2.fieldNames, childrenAsData = _ref2.childrenAsData;
  var flattenList = [];
  var _fillFieldNames = fillFieldNames(fieldNames, false), fieldLabel = _fillFieldNames.label, fieldValue = _fillFieldNames.value, fieldOptions = _fillFieldNames.options, groupLabel = _fillFieldNames.groupLabel;
  function dig(list, isGroupOption) {
    if (!Array.isArray(list)) {
      return;
    }
    list.forEach(function(data) {
      if (isGroupOption || !(fieldOptions in data)) {
        var value = data[fieldValue];
        flattenList.push({
          key: getKey(data, flattenList.length),
          groupOption: isGroupOption,
          data,
          label: data[fieldLabel],
          value
        });
      } else {
        var grpLabel = data[groupLabel];
        if (grpLabel === void 0 && childrenAsData) {
          grpLabel = data.label;
        }
        flattenList.push({
          key: getKey(data, flattenList.length),
          group: true,
          data,
          label: grpLabel
        });
        dig(data[fieldOptions], true);
      }
    });
  }
  dig(options, false);
  return flattenList;
}
function injectPropsWithOption(option) {
  var newOption = _objectSpread2({}, option);
  if (!("props" in newOption)) {
    Object.defineProperty(newOption, "props", {
      get: function get2() {
        warning_default(false, "Return type is option instead of Option instance. Please read value directly instead of reading from `props`.");
        return newOption;
      }
    });
  }
  return newOption;
}
var getSeparatedContent;
var init_valueUtil = __esm({
  "node_modules/rc-select/es/utils/valueUtil.js"() {
    init_toConsumableArray();
    init_toArray2();
    init_objectSpread2();
    init_warning();
    getSeparatedContent = function getSeparatedContent2(text, tokens, end) {
      if (!tokens || !tokens.length) {
        return null;
      }
      var match2 = false;
      var separate = function separate2(str, _ref3) {
        var _ref4 = _toArray(_ref3), token = _ref4[0], restTokens = _ref4.slice(1);
        if (!token) {
          return [str];
        }
        var list2 = str.split(token);
        match2 = match2 || list2.length > 1;
        return list2.reduce(function(prevList, unitStr) {
          return [].concat(_toConsumableArray(prevList), _toConsumableArray(separate2(unitStr, restTokens)));
        }, []).filter(Boolean);
      };
      var list = separate(text, tokens);
      if (match2) {
        return typeof end !== "undefined" ? list.slice(0, end) : list;
      } else {
        return null;
      }
    };
  }
});

// node_modules/rc-select/es/SelectContext.js
var React47, SelectContext, SelectContext_default;
var init_SelectContext = __esm({
  "node_modules/rc-select/es/SelectContext.js"() {
    React47 = __toESM(require_react());
    SelectContext = React47.createContext(null);
    SelectContext_default = SelectContext;
  }
});

// node_modules/rc-select/es/BaseSelect/Polite.js
function Polite(props) {
  var visible = props.visible, values = props.values;
  if (!visible) {
    return null;
  }
  var MAX_COUNT = 50;
  return React48.createElement("span", {
    "aria-live": "polite",
    style: {
      width: 0,
      height: 0,
      position: "absolute",
      overflow: "hidden",
      opacity: 0
    }
  }, "".concat(values.slice(0, MAX_COUNT).map(function(_ref) {
    var label = _ref.label, value = _ref.value;
    return ["number", "string"].includes(_typeof(label)) ? label : value;
  }).join(", ")), values.length > MAX_COUNT ? ", ..." : null);
}
var React48;
var init_Polite = __esm({
  "node_modules/rc-select/es/BaseSelect/Polite.js"() {
    init_typeof();
    React48 = __toESM(require_react());
  }
});

// node_modules/rc-select/es/BaseSelect/index.js
var import_classnames13, React49, _excluded9, DEFAULT_OMIT_PROPS, isMultiple, BaseSelect, BaseSelect_default;
var init_BaseSelect = __esm({
  "node_modules/rc-select/es/BaseSelect/index.js"() {
    init_extends();
    init_defineProperty();
    init_toConsumableArray();
    init_slicedToArray();
    init_objectSpread2();
    init_objectWithoutProperties();
    import_classnames13 = __toESM(require_classnames());
    init_useLayoutEffect();
    init_useMergedState();
    init_isMobile();
    init_ref();
    React49 = __toESM(require_react());
    init_useAllowClear();
    init_useBaseProps();
    init_useDelayReset();
    init_useLock();
    init_useSelectTriggerControl();
    init_Selector();
    init_SelectTrigger();
    init_TransBtn();
    init_valueUtil();
    init_SelectContext();
    init_Polite();
    _excluded9 = ["id", "prefixCls", "className", "showSearch", "tagRender", "direction", "omitDomProps", "displayValues", "onDisplayValuesChange", "emptyOptions", "notFoundContent", "onClear", "mode", "disabled", "loading", "getInputElement", "getRawInputElement", "open", "defaultOpen", "onDropdownVisibleChange", "activeValue", "onActiveValueChange", "activeDescendantId", "searchValue", "autoClearSearchValue", "onSearch", "onSearchSplit", "tokenSeparators", "allowClear", "prefix", "suffixIcon", "clearIcon", "OptionList", "animation", "transitionName", "dropdownStyle", "dropdownClassName", "dropdownMatchSelectWidth", "dropdownRender", "dropdownAlign", "placement", "builtinPlacements", "getPopupContainer", "showAction", "onFocus", "onBlur", "onKeyUp", "onKeyDown", "onMouseDown"];
    DEFAULT_OMIT_PROPS = ["value", "onChange", "removeIcon", "placeholder", "autoFocus", "maxTagCount", "maxTagTextLength", "maxTagPlaceholder", "choiceTransitionName", "onInputKeyDown", "onPopupScroll", "tabIndex"];
    isMultiple = function isMultiple2(mode) {
      return mode === "tags" || mode === "multiple";
    };
    BaseSelect = React49.forwardRef(function(props, ref) {
      var _customizeRawInputEle;
      var id = props.id, prefixCls = props.prefixCls, className = props.className, showSearch = props.showSearch, tagRender = props.tagRender, direction = props.direction, omitDomProps = props.omitDomProps, displayValues = props.displayValues, onDisplayValuesChange = props.onDisplayValuesChange, emptyOptions = props.emptyOptions, _props$notFoundConten = props.notFoundContent, notFoundContent = _props$notFoundConten === void 0 ? "Not Found" : _props$notFoundConten, onClear = props.onClear, mode = props.mode, disabled = props.disabled, loading = props.loading, getInputElement = props.getInputElement, getRawInputElement = props.getRawInputElement, open = props.open, defaultOpen = props.defaultOpen, onDropdownVisibleChange = props.onDropdownVisibleChange, activeValue = props.activeValue, onActiveValueChange = props.onActiveValueChange, activeDescendantId = props.activeDescendantId, searchValue = props.searchValue, autoClearSearchValue = props.autoClearSearchValue, onSearch = props.onSearch, onSearchSplit = props.onSearchSplit, tokenSeparators = props.tokenSeparators, allowClear = props.allowClear, prefix = props.prefix, suffixIcon = props.suffixIcon, clearIcon = props.clearIcon, OptionList3 = props.OptionList, animation = props.animation, transitionName = props.transitionName, dropdownStyle = props.dropdownStyle, dropdownClassName = props.dropdownClassName, dropdownMatchSelectWidth = props.dropdownMatchSelectWidth, dropdownRender = props.dropdownRender, dropdownAlign = props.dropdownAlign, placement = props.placement, builtinPlacements = props.builtinPlacements, getPopupContainer = props.getPopupContainer, _props$showAction = props.showAction, showAction = _props$showAction === void 0 ? [] : _props$showAction, onFocus = props.onFocus, onBlur = props.onBlur, onKeyUp = props.onKeyUp, onKeyDown = props.onKeyDown, onMouseDown = props.onMouseDown, restProps = _objectWithoutProperties(props, _excluded9);
      var multiple = isMultiple(mode);
      var mergedShowSearch = (showSearch !== void 0 ? showSearch : multiple) || mode === "combobox";
      var domProps = _objectSpread2({}, restProps);
      DEFAULT_OMIT_PROPS.forEach(function(propName) {
        delete domProps[propName];
      });
      omitDomProps === null || omitDomProps === void 0 || omitDomProps.forEach(function(propName) {
        delete domProps[propName];
      });
      var _React$useState = React49.useState(false), _React$useState2 = _slicedToArray(_React$useState, 2), mobile = _React$useState2[0], setMobile = _React$useState2[1];
      React49.useEffect(function() {
        setMobile(isMobile_default());
      }, []);
      var containerRef = React49.useRef(null);
      var selectorDomRef = React49.useRef(null);
      var triggerRef = React49.useRef(null);
      var selectorRef = React49.useRef(null);
      var listRef = React49.useRef(null);
      var blurRef = React49.useRef(false);
      var _useDelayReset = useDelayReset(), _useDelayReset2 = _slicedToArray(_useDelayReset, 3), mockFocused = _useDelayReset2[0], setMockFocused = _useDelayReset2[1], cancelSetMockFocused = _useDelayReset2[2];
      React49.useImperativeHandle(ref, function() {
        var _selectorRef$current, _selectorRef$current2;
        return {
          focus: (_selectorRef$current = selectorRef.current) === null || _selectorRef$current === void 0 ? void 0 : _selectorRef$current.focus,
          blur: (_selectorRef$current2 = selectorRef.current) === null || _selectorRef$current2 === void 0 ? void 0 : _selectorRef$current2.blur,
          scrollTo: function scrollTo(arg) {
            var _listRef$current;
            return (_listRef$current = listRef.current) === null || _listRef$current === void 0 ? void 0 : _listRef$current.scrollTo(arg);
          },
          nativeElement: containerRef.current || selectorDomRef.current
        };
      });
      var mergedSearchValue = React49.useMemo(function() {
        var _displayValues$;
        if (mode !== "combobox") {
          return searchValue;
        }
        var val = (_displayValues$ = displayValues[0]) === null || _displayValues$ === void 0 ? void 0 : _displayValues$.value;
        return typeof val === "string" || typeof val === "number" ? String(val) : "";
      }, [searchValue, mode, displayValues]);
      var customizeInputElement = mode === "combobox" && typeof getInputElement === "function" && getInputElement() || null;
      var customizeRawInputElement = typeof getRawInputElement === "function" && getRawInputElement();
      var customizeRawInputRef = useComposeRef(selectorDomRef, customizeRawInputElement === null || customizeRawInputElement === void 0 || (_customizeRawInputEle = customizeRawInputElement.props) === null || _customizeRawInputEle === void 0 ? void 0 : _customizeRawInputEle.ref);
      var _React$useState3 = React49.useState(false), _React$useState4 = _slicedToArray(_React$useState3, 2), rendered = _React$useState4[0], setRendered = _React$useState4[1];
      useLayoutEffect_default(function() {
        setRendered(true);
      }, []);
      var _useMergedState = useMergedState(false, {
        defaultValue: defaultOpen,
        value: open
      }), _useMergedState2 = _slicedToArray(_useMergedState, 2), innerOpen = _useMergedState2[0], setInnerOpen = _useMergedState2[1];
      var mergedOpen = rendered ? innerOpen : false;
      var emptyListContent = !notFoundContent && emptyOptions;
      if (disabled || emptyListContent && mergedOpen && mode === "combobox") {
        mergedOpen = false;
      }
      var triggerOpen = emptyListContent ? false : mergedOpen;
      var onToggleOpen = React49.useCallback(function(newOpen) {
        var nextOpen = newOpen !== void 0 ? newOpen : !mergedOpen;
        if (!disabled) {
          setInnerOpen(nextOpen);
          if (mergedOpen !== nextOpen) {
            onDropdownVisibleChange === null || onDropdownVisibleChange === void 0 || onDropdownVisibleChange(nextOpen);
          }
        }
      }, [disabled, mergedOpen, setInnerOpen, onDropdownVisibleChange]);
      var tokenWithEnter = React49.useMemo(function() {
        return (tokenSeparators || []).some(function(tokenSeparator) {
          return ["\n", "\r\n"].includes(tokenSeparator);
        });
      }, [tokenSeparators]);
      var _ref = React49.useContext(SelectContext_default) || {}, maxCount = _ref.maxCount, rawValues = _ref.rawValues;
      var onInternalSearch = function onInternalSearch2(searchText, fromTyping, isCompositing) {
        if (multiple && isValidCount(maxCount) && (rawValues === null || rawValues === void 0 ? void 0 : rawValues.size) >= maxCount) {
          return;
        }
        var ret = true;
        var newSearchText = searchText;
        onActiveValueChange === null || onActiveValueChange === void 0 || onActiveValueChange(null);
        var separatedList = getSeparatedContent(searchText, tokenSeparators, isValidCount(maxCount) ? maxCount - rawValues.size : void 0);
        var patchLabels = isCompositing ? null : separatedList;
        if (mode !== "combobox" && patchLabels) {
          newSearchText = "";
          onSearchSplit === null || onSearchSplit === void 0 || onSearchSplit(patchLabels);
          onToggleOpen(false);
          ret = false;
        }
        if (onSearch && mergedSearchValue !== newSearchText) {
          onSearch(newSearchText, {
            source: fromTyping ? "typing" : "effect"
          });
        }
        return ret;
      };
      var onInternalSearchSubmit = function onInternalSearchSubmit2(searchText) {
        if (!searchText || !searchText.trim()) {
          return;
        }
        onSearch(searchText, {
          source: "submit"
        });
      };
      React49.useEffect(function() {
        if (!mergedOpen && !multiple && mode !== "combobox") {
          onInternalSearch("", false, false);
        }
      }, [mergedOpen]);
      React49.useEffect(function() {
        if (innerOpen && disabled) {
          setInnerOpen(false);
        }
        if (disabled && !blurRef.current) {
          setMockFocused(false);
        }
      }, [disabled]);
      var _useLock = useLock(), _useLock2 = _slicedToArray(_useLock, 2), getClearLock = _useLock2[0], setClearLock = _useLock2[1];
      var keyLockRef = React49.useRef(false);
      var onInternalKeyDown = function onInternalKeyDown2(event) {
        var clearLock = getClearLock();
        var key = event.key;
        var isEnterKey = key === "Enter";
        if (isEnterKey) {
          if (mode !== "combobox") {
            event.preventDefault();
          }
          if (!mergedOpen) {
            onToggleOpen(true);
          }
        }
        setClearLock(!!mergedSearchValue);
        if (key === "Backspace" && !clearLock && multiple && !mergedSearchValue && displayValues.length) {
          var cloneDisplayValues = _toConsumableArray(displayValues);
          var removedDisplayValue = null;
          for (var i = cloneDisplayValues.length - 1; i >= 0; i -= 1) {
            var current = cloneDisplayValues[i];
            if (!current.disabled) {
              cloneDisplayValues.splice(i, 1);
              removedDisplayValue = current;
              break;
            }
          }
          if (removedDisplayValue) {
            onDisplayValuesChange(cloneDisplayValues, {
              type: "remove",
              values: [removedDisplayValue]
            });
          }
        }
        for (var _len = arguments.length, rest = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          rest[_key - 1] = arguments[_key];
        }
        if (mergedOpen && (!isEnterKey || !keyLockRef.current)) {
          var _listRef$current2;
          if (isEnterKey) {
            keyLockRef.current = true;
          }
          (_listRef$current2 = listRef.current) === null || _listRef$current2 === void 0 || _listRef$current2.onKeyDown.apply(_listRef$current2, [event].concat(rest));
        }
        onKeyDown === null || onKeyDown === void 0 || onKeyDown.apply(void 0, [event].concat(rest));
      };
      var onInternalKeyUp = function onInternalKeyUp2(event) {
        for (var _len2 = arguments.length, rest = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
          rest[_key2 - 1] = arguments[_key2];
        }
        if (mergedOpen) {
          var _listRef$current3;
          (_listRef$current3 = listRef.current) === null || _listRef$current3 === void 0 || _listRef$current3.onKeyUp.apply(_listRef$current3, [event].concat(rest));
        }
        if (event.key === "Enter") {
          keyLockRef.current = false;
        }
        onKeyUp === null || onKeyUp === void 0 || onKeyUp.apply(void 0, [event].concat(rest));
      };
      var onSelectorRemove = function onSelectorRemove2(val) {
        var newValues = displayValues.filter(function(i) {
          return i !== val;
        });
        onDisplayValuesChange(newValues, {
          type: "remove",
          values: [val]
        });
      };
      var onInputBlur = function onInputBlur2() {
        keyLockRef.current = false;
      };
      var focusRef = React49.useRef(false);
      var onContainerFocus = function onContainerFocus2() {
        setMockFocused(true);
        if (!disabled) {
          if (onFocus && !focusRef.current) {
            onFocus.apply(void 0, arguments);
          }
          if (showAction.includes("focus")) {
            onToggleOpen(true);
          }
        }
        focusRef.current = true;
      };
      var onContainerBlur = function onContainerBlur2() {
        blurRef.current = true;
        setMockFocused(false, function() {
          focusRef.current = false;
          blurRef.current = false;
          onToggleOpen(false);
        });
        if (disabled) {
          return;
        }
        if (mergedSearchValue) {
          if (mode === "tags") {
            onSearch(mergedSearchValue, {
              source: "submit"
            });
          } else if (mode === "multiple") {
            onSearch("", {
              source: "blur"
            });
          }
        }
        if (onBlur) {
          onBlur.apply(void 0, arguments);
        }
      };
      var activeTimeoutIds = [];
      React49.useEffect(function() {
        return function() {
          activeTimeoutIds.forEach(function(timeoutId) {
            return clearTimeout(timeoutId);
          });
          activeTimeoutIds.splice(0, activeTimeoutIds.length);
        };
      }, []);
      var onInternalMouseDown = function onInternalMouseDown2(event) {
        var _triggerRef$current;
        var target = event.target;
        var popupElement = (_triggerRef$current = triggerRef.current) === null || _triggerRef$current === void 0 ? void 0 : _triggerRef$current.getPopupElement();
        if (popupElement && popupElement.contains(target)) {
          var timeoutId = setTimeout(function() {
            var index2 = activeTimeoutIds.indexOf(timeoutId);
            if (index2 !== -1) {
              activeTimeoutIds.splice(index2, 1);
            }
            cancelSetMockFocused();
            if (!mobile && !popupElement.contains(document.activeElement)) {
              var _selectorRef$current3;
              (_selectorRef$current3 = selectorRef.current) === null || _selectorRef$current3 === void 0 || _selectorRef$current3.focus();
            }
          });
          activeTimeoutIds.push(timeoutId);
        }
        for (var _len3 = arguments.length, restArgs = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
          restArgs[_key3 - 1] = arguments[_key3];
        }
        onMouseDown === null || onMouseDown === void 0 || onMouseDown.apply(void 0, [event].concat(restArgs));
      };
      var _React$useState5 = React49.useState({}), _React$useState6 = _slicedToArray(_React$useState5, 2), forceUpdate = _React$useState6[1];
      function onPopupMouseEnter() {
        forceUpdate({});
      }
      var onTriggerVisibleChange;
      if (customizeRawInputElement) {
        onTriggerVisibleChange = function onTriggerVisibleChange2(newOpen) {
          onToggleOpen(newOpen);
        };
      }
      useSelectTriggerControl(function() {
        var _triggerRef$current2;
        return [containerRef.current, (_triggerRef$current2 = triggerRef.current) === null || _triggerRef$current2 === void 0 ? void 0 : _triggerRef$current2.getPopupElement()];
      }, triggerOpen, onToggleOpen, !!customizeRawInputElement);
      var baseSelectContext = React49.useMemo(function() {
        return _objectSpread2(_objectSpread2({}, props), {}, {
          notFoundContent,
          open: mergedOpen,
          triggerOpen,
          id,
          showSearch: mergedShowSearch,
          multiple,
          toggleOpen: onToggleOpen
        });
      }, [props, notFoundContent, triggerOpen, mergedOpen, id, mergedShowSearch, multiple, onToggleOpen]);
      var showSuffixIcon = !!suffixIcon || loading;
      var arrowNode;
      if (showSuffixIcon) {
        arrowNode = React49.createElement(TransBtn_default, {
          className: (0, import_classnames13.default)("".concat(prefixCls, "-arrow"), _defineProperty({}, "".concat(prefixCls, "-arrow-loading"), loading)),
          customizeIcon: suffixIcon,
          customizeIconProps: {
            loading,
            searchValue: mergedSearchValue,
            open: mergedOpen,
            focused: mockFocused,
            showSearch: mergedShowSearch
          }
        });
      }
      var onClearMouseDown = function onClearMouseDown2() {
        var _selectorRef$current4;
        onClear === null || onClear === void 0 || onClear();
        (_selectorRef$current4 = selectorRef.current) === null || _selectorRef$current4 === void 0 || _selectorRef$current4.focus();
        onDisplayValuesChange([], {
          type: "clear",
          values: displayValues
        });
        onInternalSearch("", false, false);
      };
      var _useAllowClear = useAllowClear(prefixCls, onClearMouseDown, displayValues, allowClear, clearIcon, disabled, mergedSearchValue, mode), mergedAllowClear = _useAllowClear.allowClear, clearNode = _useAllowClear.clearIcon;
      var optionList = React49.createElement(OptionList3, {
        ref: listRef
      });
      var mergedClassName = (0, import_classnames13.default)(prefixCls, className, _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty({}, "".concat(prefixCls, "-focused"), mockFocused), "".concat(prefixCls, "-multiple"), multiple), "".concat(prefixCls, "-single"), !multiple), "".concat(prefixCls, "-allow-clear"), allowClear), "".concat(prefixCls, "-show-arrow"), showSuffixIcon), "".concat(prefixCls, "-disabled"), disabled), "".concat(prefixCls, "-loading"), loading), "".concat(prefixCls, "-open"), mergedOpen), "".concat(prefixCls, "-customize-input"), customizeInputElement), "".concat(prefixCls, "-show-search"), mergedShowSearch));
      var selectorNode = React49.createElement(SelectTrigger_default, {
        ref: triggerRef,
        disabled,
        prefixCls,
        visible: triggerOpen,
        popupElement: optionList,
        animation,
        transitionName,
        dropdownStyle,
        dropdownClassName,
        direction,
        dropdownMatchSelectWidth,
        dropdownRender,
        dropdownAlign,
        placement,
        builtinPlacements,
        getPopupContainer,
        empty: emptyOptions,
        getTriggerDOMNode: function getTriggerDOMNode(node) {
          return (
            // TODO: This is workaround and should be removed in `rc-select`
            // And use new standard `nativeElement` for ref.
            // But we should update `rc-resize-observer` first.
            selectorDomRef.current || node
          );
        },
        onPopupVisibleChange: onTriggerVisibleChange,
        onPopupMouseEnter
      }, customizeRawInputElement ? React49.cloneElement(customizeRawInputElement, {
        ref: customizeRawInputRef
      }) : React49.createElement(Selector_default, _extends({}, props, {
        domRef: selectorDomRef,
        prefixCls,
        inputElement: customizeInputElement,
        ref: selectorRef,
        id,
        prefix,
        showSearch: mergedShowSearch,
        autoClearSearchValue,
        mode,
        activeDescendantId,
        tagRender,
        values: displayValues,
        open: mergedOpen,
        onToggleOpen,
        activeValue,
        searchValue: mergedSearchValue,
        onSearch: onInternalSearch,
        onSearchSubmit: onInternalSearchSubmit,
        onRemove: onSelectorRemove,
        tokenWithEnter,
        onInputBlur
      })));
      var renderNode;
      if (customizeRawInputElement) {
        renderNode = selectorNode;
      } else {
        renderNode = React49.createElement("div", _extends({
          className: mergedClassName
        }, domProps, {
          ref: containerRef,
          onMouseDown: onInternalMouseDown,
          onKeyDown: onInternalKeyDown,
          onKeyUp: onInternalKeyUp,
          onFocus: onContainerFocus,
          onBlur: onContainerBlur
        }), React49.createElement(Polite, {
          visible: mockFocused && !mergedOpen,
          values: displayValues
        }), selectorNode, arrowNode, mergedAllowClear && clearNode);
      }
      return React49.createElement(BaseSelectContext.Provider, {
        value: baseSelectContext
      }, renderNode);
    });
    if (true) {
      BaseSelect.displayName = "BaseSelect";
    }
    BaseSelect_default = BaseSelect;
  }
});

// node_modules/rc-virtual-list/es/Filler.js
var React50, import_classnames14, Filler, Filler_default;
var init_Filler = __esm({
  "node_modules/rc-virtual-list/es/Filler.js"() {
    init_extends();
    init_defineProperty();
    init_objectSpread2();
    React50 = __toESM(require_react());
    init_es3();
    import_classnames14 = __toESM(require_classnames());
    Filler = React50.forwardRef(function(_ref, ref) {
      var height = _ref.height, offsetY = _ref.offsetY, offsetX = _ref.offsetX, children = _ref.children, prefixCls = _ref.prefixCls, onInnerResize = _ref.onInnerResize, innerProps = _ref.innerProps, rtl = _ref.rtl, extra = _ref.extra;
      var outerStyle = {};
      var innerStyle = {
        display: "flex",
        flexDirection: "column"
      };
      if (offsetY !== void 0) {
        outerStyle = {
          height,
          position: "relative",
          overflow: "hidden"
        };
        innerStyle = _objectSpread2(_objectSpread2({}, innerStyle), {}, _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty({
          transform: "translateY(".concat(offsetY, "px)")
        }, rtl ? "marginRight" : "marginLeft", -offsetX), "position", "absolute"), "left", 0), "right", 0), "top", 0));
      }
      return React50.createElement("div", {
        style: outerStyle
      }, React50.createElement(es_default, {
        onResize: function onResize2(_ref2) {
          var offsetHeight = _ref2.offsetHeight;
          if (offsetHeight && onInnerResize) {
            onInnerResize();
          }
        }
      }, React50.createElement("div", _extends({
        style: innerStyle,
        className: (0, import_classnames14.default)(_defineProperty({}, "".concat(prefixCls, "-holder-inner"), prefixCls)),
        ref
      }, innerProps), children, extra)));
    });
    Filler.displayName = "Filler";
    Filler_default = Filler;
  }
});

// node_modules/rc-virtual-list/es/Item.js
function Item2(_ref) {
  var children = _ref.children, setRef = _ref.setRef;
  var refFunc = React51.useCallback(function(node) {
    setRef(node);
  }, []);
  return React51.cloneElement(children, {
    ref: refFunc
  });
}
var React51;
var init_Item2 = __esm({
  "node_modules/rc-virtual-list/es/Item.js"() {
    React51 = __toESM(require_react());
  }
});

// node_modules/rc-virtual-list/es/hooks/useChildren.js
function useChildren(list, startIndex, endIndex, scrollWidth, offsetX, setNodeRef, renderFunc, _ref) {
  var getKey3 = _ref.getKey;
  return list.slice(startIndex, endIndex + 1).map(function(item, index2) {
    var eleIndex = startIndex + index2;
    var node = renderFunc(item, eleIndex, {
      style: {
        width: scrollWidth
      },
      offsetX
    });
    var key = getKey3(item);
    return React52.createElement(Item2, {
      key,
      setRef: function setRef(ele) {
        return setNodeRef(item, ele);
      }
    }, node);
  });
}
var React52;
var init_useChildren = __esm({
  "node_modules/rc-virtual-list/es/hooks/useChildren.js"() {
    React52 = __toESM(require_react());
    init_Item2();
  }
});

// node_modules/rc-virtual-list/es/utils/algorithmUtil.js
function findListDiffIndex(originList, targetList, getKey3) {
  var originLen = originList.length;
  var targetLen = targetList.length;
  var shortList;
  var longList;
  if (originLen === 0 && targetLen === 0) {
    return null;
  }
  if (originLen < targetLen) {
    shortList = originList;
    longList = targetList;
  } else {
    shortList = targetList;
    longList = originList;
  }
  var notExistKey = {
    __EMPTY_ITEM__: true
  };
  function getItemKey(item) {
    if (item !== void 0) {
      return getKey3(item);
    }
    return notExistKey;
  }
  var diffIndex = null;
  var multiple = Math.abs(originLen - targetLen) !== 1;
  for (var i = 0; i < longList.length; i += 1) {
    var shortKey = getItemKey(shortList[i]);
    var longKey = getItemKey(longList[i]);
    if (shortKey !== longKey) {
      diffIndex = i;
      multiple = multiple || shortKey !== getItemKey(longList[i + 1]);
      break;
    }
  }
  return diffIndex === null ? null : {
    index: diffIndex,
    multiple
  };
}
var init_algorithmUtil = __esm({
  "node_modules/rc-virtual-list/es/utils/algorithmUtil.js"() {
  }
});

// node_modules/rc-virtual-list/es/hooks/useDiffItem.js
function useDiffItem(data, getKey3, onDiff) {
  var _React$useState = React53.useState(data), _React$useState2 = _slicedToArray(_React$useState, 2), prevData = _React$useState2[0], setPrevData = _React$useState2[1];
  var _React$useState3 = React53.useState(null), _React$useState4 = _slicedToArray(_React$useState3, 2), diffItem = _React$useState4[0], setDiffItem = _React$useState4[1];
  React53.useEffect(function() {
    var diff = findListDiffIndex(prevData || [], data || [], getKey3);
    if ((diff === null || diff === void 0 ? void 0 : diff.index) !== void 0) {
      onDiff === null || onDiff === void 0 || onDiff(diff.index);
      setDiffItem(data[diff.index]);
    }
    setPrevData(data);
  }, [data]);
  return [diffItem];
}
var React53;
var init_useDiffItem = __esm({
  "node_modules/rc-virtual-list/es/hooks/useDiffItem.js"() {
    init_slicedToArray();
    React53 = __toESM(require_react());
    init_algorithmUtil();
  }
});

// node_modules/rc-virtual-list/es/utils/isFirefox.js
var isFF, isFirefox_default;
var init_isFirefox = __esm({
  "node_modules/rc-virtual-list/es/utils/isFirefox.js"() {
    init_typeof();
    isFF = (typeof navigator === "undefined" ? "undefined" : _typeof(navigator)) === "object" && /Firefox/i.test(navigator.userAgent);
    isFirefox_default = isFF;
  }
});

// node_modules/rc-virtual-list/es/hooks/useOriginScroll.js
var import_react11, useOriginScroll_default;
var init_useOriginScroll = __esm({
  "node_modules/rc-virtual-list/es/hooks/useOriginScroll.js"() {
    import_react11 = __toESM(require_react());
    useOriginScroll_default = (function(isScrollAtTop, isScrollAtBottom, isScrollAtLeft, isScrollAtRight) {
      var lockRef = (0, import_react11.useRef)(false);
      var lockTimeoutRef = (0, import_react11.useRef)(null);
      function lockScroll() {
        clearTimeout(lockTimeoutRef.current);
        lockRef.current = true;
        lockTimeoutRef.current = setTimeout(function() {
          lockRef.current = false;
        }, 50);
      }
      var scrollPingRef = (0, import_react11.useRef)({
        top: isScrollAtTop,
        bottom: isScrollAtBottom,
        left: isScrollAtLeft,
        right: isScrollAtRight
      });
      scrollPingRef.current.top = isScrollAtTop;
      scrollPingRef.current.bottom = isScrollAtBottom;
      scrollPingRef.current.left = isScrollAtLeft;
      scrollPingRef.current.right = isScrollAtRight;
      return function(isHorizontal, delta) {
        var smoothOffset = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
        var originScroll = isHorizontal ? (
          // Pass origin wheel when on the left
          delta < 0 && scrollPingRef.current.left || // Pass origin wheel when on the right
          delta > 0 && scrollPingRef.current.right
        ) : delta < 0 && scrollPingRef.current.top || // Pass origin wheel when on the bottom
        delta > 0 && scrollPingRef.current.bottom;
        if (smoothOffset && originScroll) {
          clearTimeout(lockTimeoutRef.current);
          lockRef.current = false;
        } else if (!originScroll || lockRef.current) {
          lockScroll();
        }
        return !lockRef.current && originScroll;
      };
    });
  }
});

// node_modules/rc-virtual-list/es/hooks/useFrameWheel.js
function useFrameWheel(inVirtual, isScrollAtTop, isScrollAtBottom, isScrollAtLeft, isScrollAtRight, horizontalScroll, onWheelDelta) {
  var offsetRef = (0, import_react12.useRef)(0);
  var nextFrameRef = (0, import_react12.useRef)(null);
  var wheelValueRef = (0, import_react12.useRef)(null);
  var isMouseScrollRef = (0, import_react12.useRef)(false);
  var originScroll = useOriginScroll_default(isScrollAtTop, isScrollAtBottom, isScrollAtLeft, isScrollAtRight);
  function onWheelY(e, deltaY) {
    raf_default.cancel(nextFrameRef.current);
    if (originScroll(false, deltaY)) return;
    var event = e;
    if (!event._virtualHandled) {
      event._virtualHandled = true;
    } else {
      return;
    }
    offsetRef.current += deltaY;
    wheelValueRef.current = deltaY;
    if (!isFirefox_default) {
      event.preventDefault();
    }
    nextFrameRef.current = raf_default(function() {
      var patchMultiple = isMouseScrollRef.current ? 10 : 1;
      onWheelDelta(offsetRef.current * patchMultiple, false);
      offsetRef.current = 0;
    });
  }
  function onWheelX(event, deltaX) {
    onWheelDelta(deltaX, true);
    if (!isFirefox_default) {
      event.preventDefault();
    }
  }
  var wheelDirectionRef = (0, import_react12.useRef)(null);
  var wheelDirectionCleanRef = (0, import_react12.useRef)(null);
  function onWheel(event) {
    if (!inVirtual) return;
    raf_default.cancel(wheelDirectionCleanRef.current);
    wheelDirectionCleanRef.current = raf_default(function() {
      wheelDirectionRef.current = null;
    }, 2);
    var deltaX = event.deltaX, deltaY = event.deltaY, shiftKey = event.shiftKey;
    var mergedDeltaX = deltaX;
    var mergedDeltaY = deltaY;
    if (wheelDirectionRef.current === "sx" || !wheelDirectionRef.current && (shiftKey || false) && deltaY && !deltaX) {
      mergedDeltaX = deltaY;
      mergedDeltaY = 0;
      wheelDirectionRef.current = "sx";
    }
    var absX = Math.abs(mergedDeltaX);
    var absY = Math.abs(mergedDeltaY);
    if (wheelDirectionRef.current === null) {
      wheelDirectionRef.current = horizontalScroll && absX > absY ? "x" : "y";
    }
    if (wheelDirectionRef.current === "y") {
      onWheelY(event, mergedDeltaY);
    } else {
      onWheelX(event, mergedDeltaX);
    }
  }
  function onFireFoxScroll(event) {
    if (!inVirtual) return;
    isMouseScrollRef.current = event.detail === wheelValueRef.current;
  }
  return [onWheel, onFireFoxScroll];
}
var import_react12;
var init_useFrameWheel = __esm({
  "node_modules/rc-virtual-list/es/hooks/useFrameWheel.js"() {
    init_raf();
    import_react12 = __toESM(require_react());
    init_isFirefox();
    init_useOriginScroll();
  }
});

// node_modules/rc-virtual-list/es/hooks/useGetSize.js
function useGetSize(mergedData, getKey3, heights, itemHeight) {
  var _React$useMemo = React54.useMemo(function() {
    return [/* @__PURE__ */ new Map(), []];
  }, [mergedData, heights.id, itemHeight]), _React$useMemo2 = _slicedToArray(_React$useMemo, 2), key2Index = _React$useMemo2[0], bottomList = _React$useMemo2[1];
  var getSize = function getSize2(startKey) {
    var endKey = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : startKey;
    var startIndex = key2Index.get(startKey);
    var endIndex = key2Index.get(endKey);
    if (startIndex === void 0 || endIndex === void 0) {
      var dataLen = mergedData.length;
      for (var i = bottomList.length; i < dataLen; i += 1) {
        var _heights$get;
        var item = mergedData[i];
        var key = getKey3(item);
        key2Index.set(key, i);
        var cacheHeight = (_heights$get = heights.get(key)) !== null && _heights$get !== void 0 ? _heights$get : itemHeight;
        bottomList[i] = (bottomList[i - 1] || 0) + cacheHeight;
        if (key === startKey) {
          startIndex = i;
        }
        if (key === endKey) {
          endIndex = i;
        }
        if (startIndex !== void 0 && endIndex !== void 0) {
          break;
        }
      }
    }
    return {
      top: bottomList[startIndex - 1] || 0,
      bottom: bottomList[endIndex]
    };
  };
  return getSize;
}
var React54;
var init_useGetSize = __esm({
  "node_modules/rc-virtual-list/es/hooks/useGetSize.js"() {
    init_slicedToArray();
    React54 = __toESM(require_react());
  }
});

// node_modules/rc-virtual-list/es/utils/CacheMap.js
var CacheMap, CacheMap_default;
var init_CacheMap = __esm({
  "node_modules/rc-virtual-list/es/utils/CacheMap.js"() {
    init_classCallCheck();
    init_createClass();
    init_defineProperty();
    CacheMap = (function() {
      function CacheMap2() {
        _classCallCheck(this, CacheMap2);
        _defineProperty(this, "maps", void 0);
        _defineProperty(this, "id", 0);
        _defineProperty(this, "diffRecords", /* @__PURE__ */ new Map());
        this.maps = /* @__PURE__ */ Object.create(null);
      }
      _createClass(CacheMap2, [{
        key: "set",
        value: function set(key, value) {
          this.diffRecords.set(key, this.maps[key]);
          this.maps[key] = value;
          this.id += 1;
        }
      }, {
        key: "get",
        value: function get2(key) {
          return this.maps[key];
        }
        /**
         * CacheMap will record the key changed.
         * To help to know what's update in the next render.
         */
      }, {
        key: "resetRecord",
        value: function resetRecord() {
          this.diffRecords.clear();
        }
      }, {
        key: "getRecord",
        value: function getRecord() {
          return this.diffRecords;
        }
      }]);
      return CacheMap2;
    })();
    CacheMap_default = CacheMap;
  }
});

// node_modules/rc-virtual-list/es/hooks/useHeights.js
function parseNumber(value) {
  var num = parseFloat(value);
  return isNaN(num) ? 0 : num;
}
function useHeights(getKey3, onItemAdd, onItemRemove) {
  var _React$useState = React55.useState(0), _React$useState2 = _slicedToArray(_React$useState, 2), updatedMark = _React$useState2[0], setUpdatedMark = _React$useState2[1];
  var instanceRef = (0, import_react13.useRef)(/* @__PURE__ */ new Map());
  var heightsRef = (0, import_react13.useRef)(new CacheMap_default());
  var promiseIdRef = (0, import_react13.useRef)(0);
  function cancelRaf() {
    promiseIdRef.current += 1;
  }
  function collectHeight() {
    var sync = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
    cancelRaf();
    var doCollect = function doCollect2() {
      var changed = false;
      instanceRef.current.forEach(function(element, key) {
        if (element && element.offsetParent) {
          var offsetHeight = element.offsetHeight;
          var _getComputedStyle = getComputedStyle(element), marginTop = _getComputedStyle.marginTop, marginBottom = _getComputedStyle.marginBottom;
          var marginTopNum = parseNumber(marginTop);
          var marginBottomNum = parseNumber(marginBottom);
          var totalHeight = offsetHeight + marginTopNum + marginBottomNum;
          if (heightsRef.current.get(key) !== totalHeight) {
            heightsRef.current.set(key, totalHeight);
            changed = true;
          }
        }
      });
      if (changed) {
        setUpdatedMark(function(c) {
          return c + 1;
        });
      }
    };
    if (sync) {
      doCollect();
    } else {
      promiseIdRef.current += 1;
      var id = promiseIdRef.current;
      Promise.resolve().then(function() {
        if (id === promiseIdRef.current) {
          doCollect();
        }
      });
    }
  }
  function setInstanceRef(item, instance) {
    var key = getKey3(item);
    var origin = instanceRef.current.get(key);
    if (instance) {
      instanceRef.current.set(key, instance);
      collectHeight();
    } else {
      instanceRef.current.delete(key);
    }
    if (!origin !== !instance) {
      if (instance) {
        onItemAdd === null || onItemAdd === void 0 || onItemAdd(item);
      } else {
        onItemRemove === null || onItemRemove === void 0 || onItemRemove(item);
      }
    }
  }
  (0, import_react13.useEffect)(function() {
    return cancelRaf;
  }, []);
  return [setInstanceRef, collectHeight, heightsRef.current, updatedMark];
}
var React55, import_react13;
var init_useHeights = __esm({
  "node_modules/rc-virtual-list/es/hooks/useHeights.js"() {
    init_slicedToArray();
    React55 = __toESM(require_react());
    import_react13 = __toESM(require_react());
    init_CacheMap();
  }
});

// node_modules/rc-virtual-list/es/hooks/useMobileTouchMove.js
function useMobileTouchMove(inVirtual, listRef, callback) {
  var touchedRef = (0, import_react14.useRef)(false);
  var touchXRef = (0, import_react14.useRef)(0);
  var touchYRef = (0, import_react14.useRef)(0);
  var elementRef = (0, import_react14.useRef)(null);
  var intervalRef = (0, import_react14.useRef)(null);
  var cleanUpEvents;
  var onTouchMove = function onTouchMove2(e) {
    if (touchedRef.current) {
      var currentX = Math.ceil(e.touches[0].pageX);
      var currentY = Math.ceil(e.touches[0].pageY);
      var offsetX = touchXRef.current - currentX;
      var offsetY = touchYRef.current - currentY;
      var _isHorizontal = Math.abs(offsetX) > Math.abs(offsetY);
      if (_isHorizontal) {
        touchXRef.current = currentX;
      } else {
        touchYRef.current = currentY;
      }
      var scrollHandled = callback(_isHorizontal, _isHorizontal ? offsetX : offsetY, false, e);
      if (scrollHandled) {
        e.preventDefault();
      }
      clearInterval(intervalRef.current);
      if (scrollHandled) {
        intervalRef.current = setInterval(function() {
          if (_isHorizontal) {
            offsetX *= SMOOTH_PTG;
          } else {
            offsetY *= SMOOTH_PTG;
          }
          var offset = Math.floor(_isHorizontal ? offsetX : offsetY);
          if (!callback(_isHorizontal, offset, true) || Math.abs(offset) <= 0.1) {
            clearInterval(intervalRef.current);
          }
        }, 16);
      }
    }
  };
  var onTouchEnd = function onTouchEnd2() {
    touchedRef.current = false;
    cleanUpEvents();
  };
  var onTouchStart = function onTouchStart2(e) {
    cleanUpEvents();
    if (e.touches.length === 1 && !touchedRef.current) {
      touchedRef.current = true;
      touchXRef.current = Math.ceil(e.touches[0].pageX);
      touchYRef.current = Math.ceil(e.touches[0].pageY);
      elementRef.current = e.target;
      elementRef.current.addEventListener("touchmove", onTouchMove, {
        passive: false
      });
      elementRef.current.addEventListener("touchend", onTouchEnd, {
        passive: true
      });
    }
  };
  cleanUpEvents = function cleanUpEvents2() {
    if (elementRef.current) {
      elementRef.current.removeEventListener("touchmove", onTouchMove);
      elementRef.current.removeEventListener("touchend", onTouchEnd);
    }
  };
  useLayoutEffect_default(function() {
    if (inVirtual) {
      listRef.current.addEventListener("touchstart", onTouchStart, {
        passive: true
      });
    }
    return function() {
      var _listRef$current;
      (_listRef$current = listRef.current) === null || _listRef$current === void 0 || _listRef$current.removeEventListener("touchstart", onTouchStart);
      cleanUpEvents();
      clearInterval(intervalRef.current);
    };
  }, [inVirtual]);
}
var import_react14, SMOOTH_PTG;
var init_useMobileTouchMove = __esm({
  "node_modules/rc-virtual-list/es/hooks/useMobileTouchMove.js"() {
    init_useLayoutEffect();
    import_react14 = __toESM(require_react());
    SMOOTH_PTG = 14 / 15;
  }
});

// node_modules/rc-virtual-list/es/hooks/useScrollDrag.js
function smoothScrollOffset(offset) {
  return Math.floor(Math.pow(offset, 0.5));
}
function getPageXY(e, horizontal) {
  var obj = "touches" in e ? e.touches[0] : e;
  return obj[horizontal ? "pageX" : "pageY"] - window[horizontal ? "scrollX" : "scrollY"];
}
function useScrollDrag(inVirtual, componentRef, onScrollOffset) {
  React56.useEffect(function() {
    var ele = componentRef.current;
    if (inVirtual && ele) {
      var mouseDownLock = false;
      var rafId;
      var _offset;
      var stopScroll = function stopScroll2() {
        raf_default.cancel(rafId);
      };
      var continueScroll = function continueScroll2() {
        stopScroll();
        rafId = raf_default(function() {
          onScrollOffset(_offset);
          continueScroll2();
        });
      };
      var onMouseDown = function onMouseDown2(e) {
        if (e.target.draggable || e.button !== 0) {
          return;
        }
        var event = e;
        if (!event._virtualHandled) {
          event._virtualHandled = true;
          mouseDownLock = true;
        }
      };
      var onMouseUp = function onMouseUp2() {
        mouseDownLock = false;
        stopScroll();
      };
      var onMouseMove = function onMouseMove2(e) {
        if (mouseDownLock) {
          var mouseY = getPageXY(e, false);
          var _ele$getBoundingClien = ele.getBoundingClientRect(), top = _ele$getBoundingClien.top, bottom = _ele$getBoundingClien.bottom;
          if (mouseY <= top) {
            var diff = top - mouseY;
            _offset = -smoothScrollOffset(diff);
            continueScroll();
          } else if (mouseY >= bottom) {
            var _diff = mouseY - bottom;
            _offset = smoothScrollOffset(_diff);
            continueScroll();
          } else {
            stopScroll();
          }
        }
      };
      ele.addEventListener("mousedown", onMouseDown);
      ele.ownerDocument.addEventListener("mouseup", onMouseUp);
      ele.ownerDocument.addEventListener("mousemove", onMouseMove);
      return function() {
        ele.removeEventListener("mousedown", onMouseDown);
        ele.ownerDocument.removeEventListener("mouseup", onMouseUp);
        ele.ownerDocument.removeEventListener("mousemove", onMouseMove);
        stopScroll();
      };
    }
  }, [inVirtual]);
}
var React56;
var init_useScrollDrag = __esm({
  "node_modules/rc-virtual-list/es/hooks/useScrollDrag.js"() {
    init_raf();
    React56 = __toESM(require_react());
  }
});

// node_modules/rc-virtual-list/es/hooks/useScrollTo.js
function useScrollTo(containerRef, data, heights, itemHeight, getKey3, collectHeight, syncScrollTop, triggerFlash) {
  var scrollRef = React57.useRef();
  var _React$useState = React57.useState(null), _React$useState2 = _slicedToArray(_React$useState, 2), syncState = _React$useState2[0], setSyncState = _React$useState2[1];
  useLayoutEffect_default(function() {
    if (syncState && syncState.times < MAX_TIMES) {
      if (!containerRef.current) {
        setSyncState(function(ori) {
          return _objectSpread2({}, ori);
        });
        return;
      }
      collectHeight();
      var targetAlign = syncState.targetAlign, originAlign = syncState.originAlign, index2 = syncState.index, offset = syncState.offset;
      var height = containerRef.current.clientHeight;
      var needCollectHeight = false;
      var newTargetAlign = targetAlign;
      var targetTop = null;
      if (height) {
        var mergedAlign = targetAlign || originAlign;
        var stackTop = 0;
        var itemTop = 0;
        var itemBottom = 0;
        var maxLen = Math.min(data.length - 1, index2);
        for (var i = 0; i <= maxLen; i += 1) {
          var key = getKey3(data[i]);
          itemTop = stackTop;
          var cacheHeight = heights.get(key);
          itemBottom = itemTop + (cacheHeight === void 0 ? itemHeight : cacheHeight);
          stackTop = itemBottom;
        }
        var leftHeight = mergedAlign === "top" ? offset : height - offset;
        for (var _i = maxLen; _i >= 0; _i -= 1) {
          var _key = getKey3(data[_i]);
          var _cacheHeight = heights.get(_key);
          if (_cacheHeight === void 0) {
            needCollectHeight = true;
            break;
          }
          leftHeight -= _cacheHeight;
          if (leftHeight <= 0) {
            break;
          }
        }
        switch (mergedAlign) {
          case "top":
            targetTop = itemTop - offset;
            break;
          case "bottom":
            targetTop = itemBottom - height + offset;
            break;
          default: {
            var scrollTop = containerRef.current.scrollTop;
            var scrollBottom = scrollTop + height;
            if (itemTop < scrollTop) {
              newTargetAlign = "top";
            } else if (itemBottom > scrollBottom) {
              newTargetAlign = "bottom";
            }
          }
        }
        if (targetTop !== null) {
          syncScrollTop(targetTop);
        }
        if (targetTop !== syncState.lastTop) {
          needCollectHeight = true;
        }
      }
      if (needCollectHeight) {
        setSyncState(_objectSpread2(_objectSpread2({}, syncState), {}, {
          times: syncState.times + 1,
          targetAlign: newTargetAlign,
          lastTop: targetTop
        }));
      }
    } else if ((syncState === null || syncState === void 0 ? void 0 : syncState.times) === MAX_TIMES) {
      warning_default(false, "Seems `scrollTo` with `rc-virtual-list` reach the max limitation. Please fire issue for us. Thanks.");
    }
  }, [syncState, containerRef.current]);
  return function(arg) {
    if (arg === null || arg === void 0) {
      triggerFlash();
      return;
    }
    raf_default.cancel(scrollRef.current);
    if (typeof arg === "number") {
      syncScrollTop(arg);
    } else if (arg && _typeof(arg) === "object") {
      var index2;
      var align = arg.align;
      if ("index" in arg) {
        index2 = arg.index;
      } else {
        index2 = data.findIndex(function(item) {
          return getKey3(item) === arg.key;
        });
      }
      var _arg$offset = arg.offset, offset = _arg$offset === void 0 ? 0 : _arg$offset;
      setSyncState({
        times: 0,
        index: index2,
        offset,
        originAlign: align
      });
    }
  };
}
var React57, MAX_TIMES;
var init_useScrollTo = __esm({
  "node_modules/rc-virtual-list/es/hooks/useScrollTo.js"() {
    init_typeof();
    init_objectSpread2();
    init_slicedToArray();
    React57 = __toESM(require_react());
    init_raf();
    init_useLayoutEffect();
    init_es2();
    MAX_TIMES = 10;
  }
});

// node_modules/rc-virtual-list/es/ScrollBar.js
var import_classnames15, React58, ScrollBar, ScrollBar_default;
var init_ScrollBar = __esm({
  "node_modules/rc-virtual-list/es/ScrollBar.js"() {
    init_objectSpread2();
    init_defineProperty();
    init_slicedToArray();
    import_classnames15 = __toESM(require_classnames());
    init_raf();
    React58 = __toESM(require_react());
    init_useScrollDrag();
    ScrollBar = React58.forwardRef(function(props, ref) {
      var prefixCls = props.prefixCls, rtl = props.rtl, scrollOffset = props.scrollOffset, scrollRange = props.scrollRange, onStartMove = props.onStartMove, onStopMove = props.onStopMove, onScroll = props.onScroll, horizontal = props.horizontal, spinSize = props.spinSize, containerSize = props.containerSize, style2 = props.style, propsThumbStyle = props.thumbStyle, showScrollBar = props.showScrollBar;
      var _React$useState = React58.useState(false), _React$useState2 = _slicedToArray(_React$useState, 2), dragging = _React$useState2[0], setDragging = _React$useState2[1];
      var _React$useState3 = React58.useState(null), _React$useState4 = _slicedToArray(_React$useState3, 2), pageXY = _React$useState4[0], setPageXY = _React$useState4[1];
      var _React$useState5 = React58.useState(null), _React$useState6 = _slicedToArray(_React$useState5, 2), startTop = _React$useState6[0], setStartTop = _React$useState6[1];
      var isLTR = !rtl;
      var scrollbarRef = React58.useRef();
      var thumbRef = React58.useRef();
      var _React$useState7 = React58.useState(showScrollBar), _React$useState8 = _slicedToArray(_React$useState7, 2), visible = _React$useState8[0], setVisible = _React$useState8[1];
      var visibleTimeoutRef = React58.useRef();
      var delayHidden = function delayHidden2() {
        if (showScrollBar === true || showScrollBar === false) return;
        clearTimeout(visibleTimeoutRef.current);
        setVisible(true);
        visibleTimeoutRef.current = setTimeout(function() {
          setVisible(false);
        }, 3e3);
      };
      var enableScrollRange = scrollRange - containerSize || 0;
      var enableOffsetRange = containerSize - spinSize || 0;
      var top = React58.useMemo(function() {
        if (scrollOffset === 0 || enableScrollRange === 0) {
          return 0;
        }
        var ptg = scrollOffset / enableScrollRange;
        return ptg * enableOffsetRange;
      }, [scrollOffset, enableScrollRange, enableOffsetRange]);
      var onContainerMouseDown = function onContainerMouseDown2(e) {
        e.stopPropagation();
        e.preventDefault();
      };
      var stateRef = React58.useRef({
        top,
        dragging,
        pageY: pageXY,
        startTop
      });
      stateRef.current = {
        top,
        dragging,
        pageY: pageXY,
        startTop
      };
      var onThumbMouseDown = function onThumbMouseDown2(e) {
        setDragging(true);
        setPageXY(getPageXY(e, horizontal));
        setStartTop(stateRef.current.top);
        onStartMove();
        e.stopPropagation();
        e.preventDefault();
      };
      React58.useEffect(function() {
        var onScrollbarTouchStart = function onScrollbarTouchStart2(e) {
          e.preventDefault();
        };
        var scrollbarEle = scrollbarRef.current;
        var thumbEle = thumbRef.current;
        scrollbarEle.addEventListener("touchstart", onScrollbarTouchStart, {
          passive: false
        });
        thumbEle.addEventListener("touchstart", onThumbMouseDown, {
          passive: false
        });
        return function() {
          scrollbarEle.removeEventListener("touchstart", onScrollbarTouchStart);
          thumbEle.removeEventListener("touchstart", onThumbMouseDown);
        };
      }, []);
      var enableScrollRangeRef = React58.useRef();
      enableScrollRangeRef.current = enableScrollRange;
      var enableOffsetRangeRef = React58.useRef();
      enableOffsetRangeRef.current = enableOffsetRange;
      React58.useEffect(function() {
        if (dragging) {
          var moveRafId;
          var onMouseMove = function onMouseMove2(e) {
            var _stateRef$current = stateRef.current, stateDragging = _stateRef$current.dragging, statePageY = _stateRef$current.pageY, stateStartTop = _stateRef$current.startTop;
            raf_default.cancel(moveRafId);
            var rect = scrollbarRef.current.getBoundingClientRect();
            var scale = containerSize / (horizontal ? rect.width : rect.height);
            if (stateDragging) {
              var offset = (getPageXY(e, horizontal) - statePageY) * scale;
              var newTop = stateStartTop;
              if (!isLTR && horizontal) {
                newTop -= offset;
              } else {
                newTop += offset;
              }
              var tmpEnableScrollRange = enableScrollRangeRef.current;
              var tmpEnableOffsetRange = enableOffsetRangeRef.current;
              var ptg = tmpEnableOffsetRange ? newTop / tmpEnableOffsetRange : 0;
              var newScrollTop = Math.ceil(ptg * tmpEnableScrollRange);
              newScrollTop = Math.max(newScrollTop, 0);
              newScrollTop = Math.min(newScrollTop, tmpEnableScrollRange);
              moveRafId = raf_default(function() {
                onScroll(newScrollTop, horizontal);
              });
            }
          };
          var onMouseUp = function onMouseUp2() {
            setDragging(false);
            onStopMove();
          };
          window.addEventListener("mousemove", onMouseMove, {
            passive: true
          });
          window.addEventListener("touchmove", onMouseMove, {
            passive: true
          });
          window.addEventListener("mouseup", onMouseUp, {
            passive: true
          });
          window.addEventListener("touchend", onMouseUp, {
            passive: true
          });
          return function() {
            window.removeEventListener("mousemove", onMouseMove);
            window.removeEventListener("touchmove", onMouseMove);
            window.removeEventListener("mouseup", onMouseUp);
            window.removeEventListener("touchend", onMouseUp);
            raf_default.cancel(moveRafId);
          };
        }
      }, [dragging]);
      React58.useEffect(function() {
        delayHidden();
        return function() {
          clearTimeout(visibleTimeoutRef.current);
        };
      }, [scrollOffset]);
      React58.useImperativeHandle(ref, function() {
        return {
          delayHidden
        };
      });
      var scrollbarPrefixCls = "".concat(prefixCls, "-scrollbar");
      var containerStyle = {
        position: "absolute",
        visibility: visible ? null : "hidden"
      };
      var thumbStyle = {
        position: "absolute",
        borderRadius: 99,
        background: "var(--rc-virtual-list-scrollbar-bg, rgba(0, 0, 0, 0.5))",
        cursor: "pointer",
        userSelect: "none"
      };
      if (horizontal) {
        Object.assign(containerStyle, {
          height: 8,
          left: 0,
          right: 0,
          bottom: 0
        });
        Object.assign(thumbStyle, _defineProperty({
          height: "100%",
          width: spinSize
        }, isLTR ? "left" : "right", top));
      } else {
        Object.assign(containerStyle, _defineProperty({
          width: 8,
          top: 0,
          bottom: 0
        }, isLTR ? "right" : "left", 0));
        Object.assign(thumbStyle, {
          width: "100%",
          height: spinSize,
          top
        });
      }
      return React58.createElement("div", {
        ref: scrollbarRef,
        className: (0, import_classnames15.default)(scrollbarPrefixCls, _defineProperty(_defineProperty(_defineProperty({}, "".concat(scrollbarPrefixCls, "-horizontal"), horizontal), "".concat(scrollbarPrefixCls, "-vertical"), !horizontal), "".concat(scrollbarPrefixCls, "-visible"), visible)),
        style: _objectSpread2(_objectSpread2({}, containerStyle), style2),
        onMouseDown: onContainerMouseDown,
        onMouseMove: delayHidden
      }, React58.createElement("div", {
        ref: thumbRef,
        className: (0, import_classnames15.default)("".concat(scrollbarPrefixCls, "-thumb"), _defineProperty({}, "".concat(scrollbarPrefixCls, "-thumb-moving"), dragging)),
        style: _objectSpread2(_objectSpread2({}, thumbStyle), propsThumbStyle),
        onMouseDown: onThumbMouseDown
      }));
    });
    if (true) {
      ScrollBar.displayName = "ScrollBar";
    }
    ScrollBar_default = ScrollBar;
  }
});

// node_modules/rc-virtual-list/es/utils/scrollbarUtil.js
function getSpinSize() {
  var containerSize = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0;
  var scrollRange = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
  var baseSize = containerSize / scrollRange * containerSize;
  if (isNaN(baseSize)) {
    baseSize = 0;
  }
  baseSize = Math.max(baseSize, MIN_SIZE);
  return Math.floor(baseSize);
}
var MIN_SIZE;
var init_scrollbarUtil = __esm({
  "node_modules/rc-virtual-list/es/utils/scrollbarUtil.js"() {
    MIN_SIZE = 20;
  }
});

// node_modules/rc-virtual-list/es/List.js
function RawList(props, ref) {
  var _props$prefixCls = props.prefixCls, prefixCls = _props$prefixCls === void 0 ? "rc-virtual-list" : _props$prefixCls, className = props.className, height = props.height, itemHeight = props.itemHeight, _props$fullHeight = props.fullHeight, fullHeight = _props$fullHeight === void 0 ? true : _props$fullHeight, style2 = props.style, data = props.data, children = props.children, itemKey3 = props.itemKey, virtual = props.virtual, direction = props.direction, scrollWidth = props.scrollWidth, _props$component = props.component, Component6 = _props$component === void 0 ? "div" : _props$component, onScroll = props.onScroll, onVirtualScroll = props.onVirtualScroll, onVisibleChange = props.onVisibleChange, innerProps = props.innerProps, extraRender = props.extraRender, styles = props.styles, _props$showScrollBar = props.showScrollBar, showScrollBar = _props$showScrollBar === void 0 ? "optional" : _props$showScrollBar, restProps = _objectWithoutProperties(props, _excluded10);
  var getKey3 = React59.useCallback(function(item) {
    if (typeof itemKey3 === "function") {
      return itemKey3(item);
    }
    return item === null || item === void 0 ? void 0 : item[itemKey3];
  }, [itemKey3]);
  var _useHeights = useHeights(getKey3, null, null), _useHeights2 = _slicedToArray(_useHeights, 4), setInstanceRef = _useHeights2[0], collectHeight = _useHeights2[1], heights = _useHeights2[2], heightUpdatedMark = _useHeights2[3];
  var useVirtual = !!(virtual !== false && height && itemHeight);
  var containerHeight = React59.useMemo(function() {
    return Object.values(heights.maps).reduce(function(total, curr) {
      return total + curr;
    }, 0);
  }, [heights.id, heights.maps]);
  var inVirtual = useVirtual && data && (Math.max(itemHeight * data.length, containerHeight) > height || !!scrollWidth);
  var isRTL = direction === "rtl";
  var mergedClassName = (0, import_classnames16.default)(prefixCls, _defineProperty({}, "".concat(prefixCls, "-rtl"), isRTL), className);
  var mergedData = data || EMPTY_DATA;
  var componentRef = (0, import_react15.useRef)();
  var fillerInnerRef = (0, import_react15.useRef)();
  var containerRef = (0, import_react15.useRef)();
  var _useState = (0, import_react15.useState)(0), _useState2 = _slicedToArray(_useState, 2), offsetTop = _useState2[0], setOffsetTop = _useState2[1];
  var _useState3 = (0, import_react15.useState)(0), _useState4 = _slicedToArray(_useState3, 2), offsetLeft = _useState4[0], setOffsetLeft = _useState4[1];
  var _useState5 = (0, import_react15.useState)(false), _useState6 = _slicedToArray(_useState5, 2), scrollMoving = _useState6[0], setScrollMoving = _useState6[1];
  var onScrollbarStartMove = function onScrollbarStartMove2() {
    setScrollMoving(true);
  };
  var onScrollbarStopMove = function onScrollbarStopMove2() {
    setScrollMoving(false);
  };
  var sharedConfig = {
    getKey: getKey3
  };
  function syncScrollTop(newTop) {
    setOffsetTop(function(origin) {
      var value;
      if (typeof newTop === "function") {
        value = newTop(origin);
      } else {
        value = newTop;
      }
      var alignedTop = keepInRange(value);
      componentRef.current.scrollTop = alignedTop;
      return alignedTop;
    });
  }
  var rangeRef = (0, import_react15.useRef)({
    start: 0,
    end: mergedData.length
  });
  var diffItemRef = (0, import_react15.useRef)();
  var _useDiffItem = useDiffItem(mergedData, getKey3), _useDiffItem2 = _slicedToArray(_useDiffItem, 1), diffItem = _useDiffItem2[0];
  diffItemRef.current = diffItem;
  var _React$useMemo = React59.useMemo(function() {
    if (!useVirtual) {
      return {
        scrollHeight: void 0,
        start: 0,
        end: mergedData.length - 1,
        offset: void 0
      };
    }
    if (!inVirtual) {
      var _fillerInnerRef$curre;
      return {
        scrollHeight: ((_fillerInnerRef$curre = fillerInnerRef.current) === null || _fillerInnerRef$curre === void 0 ? void 0 : _fillerInnerRef$curre.offsetHeight) || 0,
        start: 0,
        end: mergedData.length - 1,
        offset: void 0
      };
    }
    var itemTop = 0;
    var startIndex;
    var startOffset;
    var endIndex;
    var dataLen = mergedData.length;
    for (var i = 0; i < dataLen; i += 1) {
      var _item = mergedData[i];
      var key = getKey3(_item);
      var cacheHeight = heights.get(key);
      var currentItemBottom = itemTop + (cacheHeight === void 0 ? itemHeight : cacheHeight);
      if (currentItemBottom >= offsetTop && startIndex === void 0) {
        startIndex = i;
        startOffset = itemTop;
      }
      if (currentItemBottom > offsetTop + height && endIndex === void 0) {
        endIndex = i;
      }
      itemTop = currentItemBottom;
    }
    if (startIndex === void 0) {
      startIndex = 0;
      startOffset = 0;
      endIndex = Math.ceil(height / itemHeight);
    }
    if (endIndex === void 0) {
      endIndex = mergedData.length - 1;
    }
    endIndex = Math.min(endIndex + 1, mergedData.length - 1);
    return {
      scrollHeight: itemTop,
      start: startIndex,
      end: endIndex,
      offset: startOffset
    };
  }, [inVirtual, useVirtual, offsetTop, mergedData, heightUpdatedMark, height]), scrollHeight = _React$useMemo.scrollHeight, start = _React$useMemo.start, end = _React$useMemo.end, fillerOffset = _React$useMemo.offset;
  rangeRef.current.start = start;
  rangeRef.current.end = end;
  React59.useLayoutEffect(function() {
    var changedRecord = heights.getRecord();
    if (changedRecord.size === 1) {
      var recordKey = Array.from(changedRecord.keys())[0];
      var prevCacheHeight = changedRecord.get(recordKey);
      var startItem = mergedData[start];
      if (startItem && prevCacheHeight === void 0) {
        var startIndexKey = getKey3(startItem);
        if (startIndexKey === recordKey) {
          var realStartHeight = heights.get(recordKey);
          var diffHeight = realStartHeight - itemHeight;
          syncScrollTop(function(ori) {
            return ori + diffHeight;
          });
        }
      }
    }
    heights.resetRecord();
  }, [scrollHeight]);
  var _React$useState = React59.useState({
    width: 0,
    height
  }), _React$useState2 = _slicedToArray(_React$useState, 2), size = _React$useState2[0], setSize = _React$useState2[1];
  var onHolderResize = function onHolderResize2(sizeInfo) {
    setSize({
      width: sizeInfo.offsetWidth,
      height: sizeInfo.offsetHeight
    });
  };
  var verticalScrollBarRef = (0, import_react15.useRef)();
  var horizontalScrollBarRef = (0, import_react15.useRef)();
  var horizontalScrollBarSpinSize = React59.useMemo(function() {
    return getSpinSize(size.width, scrollWidth);
  }, [size.width, scrollWidth]);
  var verticalScrollBarSpinSize = React59.useMemo(function() {
    return getSpinSize(size.height, scrollHeight);
  }, [size.height, scrollHeight]);
  var maxScrollHeight = scrollHeight - height;
  var maxScrollHeightRef = (0, import_react15.useRef)(maxScrollHeight);
  maxScrollHeightRef.current = maxScrollHeight;
  function keepInRange(newScrollTop) {
    var newTop = newScrollTop;
    if (!Number.isNaN(maxScrollHeightRef.current)) {
      newTop = Math.min(newTop, maxScrollHeightRef.current);
    }
    newTop = Math.max(newTop, 0);
    return newTop;
  }
  var isScrollAtTop = offsetTop <= 0;
  var isScrollAtBottom = offsetTop >= maxScrollHeight;
  var isScrollAtLeft = offsetLeft <= 0;
  var isScrollAtRight = offsetLeft >= scrollWidth;
  var originScroll = useOriginScroll_default(isScrollAtTop, isScrollAtBottom, isScrollAtLeft, isScrollAtRight);
  var getVirtualScrollInfo = function getVirtualScrollInfo2() {
    return {
      x: isRTL ? -offsetLeft : offsetLeft,
      y: offsetTop
    };
  };
  var lastVirtualScrollInfoRef = (0, import_react15.useRef)(getVirtualScrollInfo());
  var triggerScroll = useEvent(function(params) {
    if (onVirtualScroll) {
      var nextInfo = _objectSpread2(_objectSpread2({}, getVirtualScrollInfo()), params);
      if (lastVirtualScrollInfoRef.current.x !== nextInfo.x || lastVirtualScrollInfoRef.current.y !== nextInfo.y) {
        onVirtualScroll(nextInfo);
        lastVirtualScrollInfoRef.current = nextInfo;
      }
    }
  });
  function onScrollBar(newScrollOffset, horizontal) {
    var newOffset = newScrollOffset;
    if (horizontal) {
      (0, import_react_dom4.flushSync)(function() {
        setOffsetLeft(newOffset);
      });
      triggerScroll();
    } else {
      syncScrollTop(newOffset);
    }
  }
  function onFallbackScroll(e) {
    var newScrollTop = e.currentTarget.scrollTop;
    if (newScrollTop !== offsetTop) {
      syncScrollTop(newScrollTop);
    }
    onScroll === null || onScroll === void 0 || onScroll(e);
    triggerScroll();
  }
  var keepInHorizontalRange = function keepInHorizontalRange2(nextOffsetLeft) {
    var tmpOffsetLeft = nextOffsetLeft;
    var max = !!scrollWidth ? scrollWidth - size.width : 0;
    tmpOffsetLeft = Math.max(tmpOffsetLeft, 0);
    tmpOffsetLeft = Math.min(tmpOffsetLeft, max);
    return tmpOffsetLeft;
  };
  var onWheelDelta = useEvent(function(offsetXY, fromHorizontal) {
    if (fromHorizontal) {
      (0, import_react_dom4.flushSync)(function() {
        setOffsetLeft(function(left) {
          var nextOffsetLeft = left + (isRTL ? -offsetXY : offsetXY);
          return keepInHorizontalRange(nextOffsetLeft);
        });
      });
      triggerScroll();
    } else {
      syncScrollTop(function(top) {
        var newTop = top + offsetXY;
        return newTop;
      });
    }
  });
  var _useFrameWheel = useFrameWheel(useVirtual, isScrollAtTop, isScrollAtBottom, isScrollAtLeft, isScrollAtRight, !!scrollWidth, onWheelDelta), _useFrameWheel2 = _slicedToArray(_useFrameWheel, 2), onRawWheel = _useFrameWheel2[0], onFireFoxScroll = _useFrameWheel2[1];
  useMobileTouchMove(useVirtual, componentRef, function(isHorizontal, delta, smoothOffset, e) {
    var event = e;
    if (originScroll(isHorizontal, delta, smoothOffset)) {
      return false;
    }
    if (!event || !event._virtualHandled) {
      if (event) {
        event._virtualHandled = true;
      }
      onRawWheel({
        preventDefault: function preventDefault() {
        },
        deltaX: isHorizontal ? delta : 0,
        deltaY: isHorizontal ? 0 : delta
      });
      return true;
    }
    return false;
  });
  useScrollDrag(inVirtual, componentRef, function(offset) {
    syncScrollTop(function(top) {
      return top + offset;
    });
  });
  useLayoutEffect_default(function() {
    function onMozMousePixelScroll(e) {
      var scrollingUpAtTop = isScrollAtTop && e.detail < 0;
      var scrollingDownAtBottom = isScrollAtBottom && e.detail > 0;
      if (useVirtual && !scrollingUpAtTop && !scrollingDownAtBottom) {
        e.preventDefault();
      }
    }
    var componentEle = componentRef.current;
    componentEle.addEventListener("wheel", onRawWheel, {
      passive: false
    });
    componentEle.addEventListener("DOMMouseScroll", onFireFoxScroll, {
      passive: true
    });
    componentEle.addEventListener("MozMousePixelScroll", onMozMousePixelScroll, {
      passive: false
    });
    return function() {
      componentEle.removeEventListener("wheel", onRawWheel);
      componentEle.removeEventListener("DOMMouseScroll", onFireFoxScroll);
      componentEle.removeEventListener("MozMousePixelScroll", onMozMousePixelScroll);
    };
  }, [useVirtual, isScrollAtTop, isScrollAtBottom]);
  useLayoutEffect_default(function() {
    if (scrollWidth) {
      var newOffsetLeft = keepInHorizontalRange(offsetLeft);
      setOffsetLeft(newOffsetLeft);
      triggerScroll({
        x: newOffsetLeft
      });
    }
  }, [size.width, scrollWidth]);
  var delayHideScrollBar = function delayHideScrollBar2() {
    var _verticalScrollBarRef, _horizontalScrollBarR;
    (_verticalScrollBarRef = verticalScrollBarRef.current) === null || _verticalScrollBarRef === void 0 || _verticalScrollBarRef.delayHidden();
    (_horizontalScrollBarR = horizontalScrollBarRef.current) === null || _horizontalScrollBarR === void 0 || _horizontalScrollBarR.delayHidden();
  };
  var _scrollTo = useScrollTo(componentRef, mergedData, heights, itemHeight, getKey3, function() {
    return collectHeight(true);
  }, syncScrollTop, delayHideScrollBar);
  React59.useImperativeHandle(ref, function() {
    return {
      nativeElement: containerRef.current,
      getScrollInfo: getVirtualScrollInfo,
      scrollTo: function scrollTo(config) {
        function isPosScroll(arg) {
          return arg && _typeof(arg) === "object" && ("left" in arg || "top" in arg);
        }
        if (isPosScroll(config)) {
          if (config.left !== void 0) {
            setOffsetLeft(keepInHorizontalRange(config.left));
          }
          _scrollTo(config.top);
        } else {
          _scrollTo(config);
        }
      }
    };
  });
  useLayoutEffect_default(function() {
    if (onVisibleChange) {
      var renderList = mergedData.slice(start, end + 1);
      onVisibleChange(renderList, mergedData);
    }
  }, [start, end, mergedData]);
  var getSize = useGetSize(mergedData, getKey3, heights, itemHeight);
  var extraContent = extraRender === null || extraRender === void 0 ? void 0 : extraRender({
    start,
    end,
    virtual: inVirtual,
    offsetX: offsetLeft,
    offsetY: fillerOffset,
    rtl: isRTL,
    getSize
  });
  var listChildren = useChildren(mergedData, start, end, scrollWidth, offsetLeft, setInstanceRef, children, sharedConfig);
  var componentStyle = null;
  if (height) {
    componentStyle = _objectSpread2(_defineProperty({}, fullHeight ? "height" : "maxHeight", height), ScrollStyle);
    if (useVirtual) {
      componentStyle.overflowY = "hidden";
      if (scrollWidth) {
        componentStyle.overflowX = "hidden";
      }
      if (scrollMoving) {
        componentStyle.pointerEvents = "none";
      }
    }
  }
  var containerProps = {};
  if (isRTL) {
    containerProps.dir = "rtl";
  }
  return React59.createElement("div", _extends({
    ref: containerRef,
    style: _objectSpread2(_objectSpread2({}, style2), {}, {
      position: "relative"
    }),
    className: mergedClassName
  }, containerProps, restProps), React59.createElement(es_default, {
    onResize: onHolderResize
  }, React59.createElement(Component6, {
    className: "".concat(prefixCls, "-holder"),
    style: componentStyle,
    ref: componentRef,
    onScroll: onFallbackScroll,
    onMouseEnter: delayHideScrollBar
  }, React59.createElement(Filler_default, {
    prefixCls,
    height: scrollHeight,
    offsetX: offsetLeft,
    offsetY: fillerOffset,
    scrollWidth,
    onInnerResize: collectHeight,
    ref: fillerInnerRef,
    innerProps,
    rtl: isRTL,
    extra: extraContent
  }, listChildren))), inVirtual && scrollHeight > height && React59.createElement(ScrollBar_default, {
    ref: verticalScrollBarRef,
    prefixCls,
    scrollOffset: offsetTop,
    scrollRange: scrollHeight,
    rtl: isRTL,
    onScroll: onScrollBar,
    onStartMove: onScrollbarStartMove,
    onStopMove: onScrollbarStopMove,
    spinSize: verticalScrollBarSpinSize,
    containerSize: size.height,
    style: styles === null || styles === void 0 ? void 0 : styles.verticalScrollBar,
    thumbStyle: styles === null || styles === void 0 ? void 0 : styles.verticalScrollBarThumb,
    showScrollBar
  }), inVirtual && scrollWidth > size.width && React59.createElement(ScrollBar_default, {
    ref: horizontalScrollBarRef,
    prefixCls,
    scrollOffset: offsetLeft,
    scrollRange: scrollWidth,
    rtl: isRTL,
    onScroll: onScrollBar,
    onStartMove: onScrollbarStartMove,
    onStopMove: onScrollbarStopMove,
    spinSize: horizontalScrollBarSpinSize,
    containerSize: size.width,
    horizontal: true,
    style: styles === null || styles === void 0 ? void 0 : styles.horizontalScrollBar,
    thumbStyle: styles === null || styles === void 0 ? void 0 : styles.horizontalScrollBarThumb,
    showScrollBar
  }));
}
var import_classnames16, React59, import_react15, import_react_dom4, _excluded10, EMPTY_DATA, ScrollStyle, List, List_default;
var init_List = __esm({
  "node_modules/rc-virtual-list/es/List.js"() {
    init_extends();
    init_typeof();
    init_objectSpread2();
    init_defineProperty();
    init_slicedToArray();
    init_objectWithoutProperties();
    import_classnames16 = __toESM(require_classnames());
    init_es3();
    init_es2();
    init_useLayoutEffect();
    React59 = __toESM(require_react());
    import_react15 = __toESM(require_react());
    import_react_dom4 = __toESM(require_react_dom());
    init_Filler();
    init_useChildren();
    init_useDiffItem();
    init_useFrameWheel();
    init_useGetSize();
    init_useHeights();
    init_useMobileTouchMove();
    init_useOriginScroll();
    init_useScrollDrag();
    init_useScrollTo();
    init_ScrollBar();
    init_scrollbarUtil();
    _excluded10 = ["prefixCls", "className", "height", "itemHeight", "fullHeight", "style", "data", "children", "itemKey", "virtual", "direction", "scrollWidth", "component", "onScroll", "onVirtualScroll", "onVisibleChange", "innerProps", "extraRender", "styles", "showScrollBar"];
    EMPTY_DATA = [];
    ScrollStyle = {
      overflowY: "auto",
      overflowAnchor: "none"
    };
    List = React59.forwardRef(RawList);
    List.displayName = "List";
    List_default = List;
  }
});

// node_modules/rc-virtual-list/es/index.js
var es_default6;
var init_es8 = __esm({
  "node_modules/rc-virtual-list/es/index.js"() {
    init_List();
    es_default6 = List_default;
  }
});

// node_modules/rc-select/es/utils/platformUtil.js
function isPlatformMac() {
  return /(mac\sos|macintosh)/i.test(navigator.appVersion);
}
var init_platformUtil = __esm({
  "node_modules/rc-select/es/utils/platformUtil.js"() {
  }
});

// node_modules/rc-select/es/OptionList.js
function isTitleType2(content) {
  return typeof content === "string" || typeof content === "number";
}
var import_classnames17, React60, import_react16, _excluded11, OptionList, RefOptionList, OptionList_default;
var init_OptionList = __esm({
  "node_modules/rc-select/es/OptionList.js"() {
    init_defineProperty();
    init_objectWithoutProperties();
    init_extends();
    init_slicedToArray();
    init_toConsumableArray();
    import_classnames17 = __toESM(require_classnames());
    init_KeyCode();
    init_useMemo();
    init_omit();
    init_pickAttrs();
    init_es8();
    React60 = __toESM(require_react());
    import_react16 = __toESM(require_react());
    init_SelectContext();
    init_TransBtn();
    init_useBaseProps();
    init_platformUtil();
    init_valueUtil();
    _excluded11 = ["disabled", "title", "children", "style", "className"];
    OptionList = function OptionList2(_, ref) {
      var _useBaseProps = useBaseProps(), prefixCls = _useBaseProps.prefixCls, id = _useBaseProps.id, open = _useBaseProps.open, multiple = _useBaseProps.multiple, mode = _useBaseProps.mode, searchValue = _useBaseProps.searchValue, toggleOpen = _useBaseProps.toggleOpen, notFoundContent = _useBaseProps.notFoundContent, onPopupScroll = _useBaseProps.onPopupScroll;
      var _React$useContext = React60.useContext(SelectContext_default), maxCount = _React$useContext.maxCount, flattenOptions2 = _React$useContext.flattenOptions, onActiveValue = _React$useContext.onActiveValue, defaultActiveFirstOption = _React$useContext.defaultActiveFirstOption, onSelect = _React$useContext.onSelect, menuItemSelectedIcon = _React$useContext.menuItemSelectedIcon, rawValues = _React$useContext.rawValues, fieldNames = _React$useContext.fieldNames, virtual = _React$useContext.virtual, direction = _React$useContext.direction, listHeight = _React$useContext.listHeight, listItemHeight = _React$useContext.listItemHeight, optionRender = _React$useContext.optionRender;
      var itemPrefixCls = "".concat(prefixCls, "-item");
      var memoFlattenOptions = useMemo(function() {
        return flattenOptions2;
      }, [open, flattenOptions2], function(prev, next) {
        return next[0] && prev[1] !== next[1];
      });
      var listRef = React60.useRef(null);
      var overMaxCount = React60.useMemo(function() {
        return multiple && isValidCount(maxCount) && (rawValues === null || rawValues === void 0 ? void 0 : rawValues.size) >= maxCount;
      }, [multiple, maxCount, rawValues === null || rawValues === void 0 ? void 0 : rawValues.size]);
      var onListMouseDown = function onListMouseDown2(event) {
        event.preventDefault();
      };
      var scrollIntoView = function scrollIntoView2(args) {
        var _listRef$current;
        (_listRef$current = listRef.current) === null || _listRef$current === void 0 || _listRef$current.scrollTo(typeof args === "number" ? {
          index: args
        } : args);
      };
      var isSelected = React60.useCallback(function(value) {
        if (mode === "combobox") {
          return false;
        }
        return rawValues.has(value);
      }, [mode, _toConsumableArray(rawValues).toString(), rawValues.size]);
      var getEnabledActiveIndex = function getEnabledActiveIndex2(index2) {
        var offset = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
        var len = memoFlattenOptions.length;
        for (var i = 0; i < len; i += 1) {
          var current = (index2 + i * offset + len) % len;
          var _ref = memoFlattenOptions[current] || {}, group = _ref.group, data = _ref.data;
          if (!group && !(data !== null && data !== void 0 && data.disabled) && (isSelected(data.value) || !overMaxCount)) {
            return current;
          }
        }
        return -1;
      };
      var _React$useState = React60.useState(function() {
        return getEnabledActiveIndex(0);
      }), _React$useState2 = _slicedToArray(_React$useState, 2), activeIndex = _React$useState2[0], setActiveIndex = _React$useState2[1];
      var setActive = function setActive2(index2) {
        var fromKeyboard = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
        setActiveIndex(index2);
        var info = {
          source: fromKeyboard ? "keyboard" : "mouse"
        };
        var flattenItem = memoFlattenOptions[index2];
        if (!flattenItem) {
          onActiveValue(null, -1, info);
          return;
        }
        onActiveValue(flattenItem.value, index2, info);
      };
      (0, import_react16.useEffect)(function() {
        setActive(defaultActiveFirstOption !== false ? getEnabledActiveIndex(0) : -1);
      }, [memoFlattenOptions.length, searchValue]);
      var isAriaSelected = React60.useCallback(function(value) {
        if (mode === "combobox") {
          return String(value).toLowerCase() === searchValue.toLowerCase();
        }
        return rawValues.has(value);
      }, [mode, searchValue, _toConsumableArray(rawValues).toString(), rawValues.size]);
      (0, import_react16.useEffect)(function() {
        var timeoutId = setTimeout(function() {
          if (!multiple && open && rawValues.size === 1) {
            var value = Array.from(rawValues)[0];
            var index2 = memoFlattenOptions.findIndex(function(_ref2) {
              var data = _ref2.data;
              return searchValue ? String(data.value).startsWith(searchValue) : data.value === value;
            });
            if (index2 !== -1) {
              setActive(index2);
              scrollIntoView(index2);
            }
          }
        });
        if (open) {
          var _listRef$current2;
          (_listRef$current2 = listRef.current) === null || _listRef$current2 === void 0 || _listRef$current2.scrollTo(void 0);
        }
        return function() {
          return clearTimeout(timeoutId);
        };
      }, [open, searchValue]);
      var onSelectValue = function onSelectValue2(value) {
        if (value !== void 0) {
          onSelect(value, {
            selected: !rawValues.has(value)
          });
        }
        if (!multiple) {
          toggleOpen(false);
        }
      };
      React60.useImperativeHandle(ref, function() {
        return {
          onKeyDown: function onKeyDown(event) {
            var which = event.which, ctrlKey = event.ctrlKey;
            switch (which) {
              // >>> Arrow keys & ctrl + n/p on Mac
              case KeyCode_default.N:
              case KeyCode_default.P:
              case KeyCode_default.UP:
              case KeyCode_default.DOWN: {
                var offset = 0;
                if (which === KeyCode_default.UP) {
                  offset = -1;
                } else if (which === KeyCode_default.DOWN) {
                  offset = 1;
                } else if (isPlatformMac() && ctrlKey) {
                  if (which === KeyCode_default.N) {
                    offset = 1;
                  } else if (which === KeyCode_default.P) {
                    offset = -1;
                  }
                }
                if (offset !== 0) {
                  var nextActiveIndex = getEnabledActiveIndex(activeIndex + offset, offset);
                  scrollIntoView(nextActiveIndex);
                  setActive(nextActiveIndex, true);
                }
                break;
              }
              // >>> Select (Tab / Enter)
              case KeyCode_default.TAB:
              case KeyCode_default.ENTER: {
                var _item$data;
                var item = memoFlattenOptions[activeIndex];
                if (item && !(item !== null && item !== void 0 && (_item$data = item.data) !== null && _item$data !== void 0 && _item$data.disabled) && !overMaxCount) {
                  onSelectValue(item.value);
                } else {
                  onSelectValue(void 0);
                }
                if (open) {
                  event.preventDefault();
                }
                break;
              }
              // >>> Close
              case KeyCode_default.ESC: {
                toggleOpen(false);
                if (open) {
                  event.stopPropagation();
                }
              }
            }
          },
          onKeyUp: function onKeyUp() {
          },
          scrollTo: function scrollTo(index2) {
            scrollIntoView(index2);
          }
        };
      });
      if (memoFlattenOptions.length === 0) {
        return React60.createElement("div", {
          role: "listbox",
          id: "".concat(id, "_list"),
          className: "".concat(itemPrefixCls, "-empty"),
          onMouseDown: onListMouseDown
        }, notFoundContent);
      }
      var omitFieldNameList = Object.keys(fieldNames).map(function(key) {
        return fieldNames[key];
      });
      var getLabel = function getLabel2(item) {
        return item.label;
      };
      function getItemAriaProps(item, index2) {
        var group = item.group;
        return {
          role: group ? "presentation" : "option",
          id: "".concat(id, "_list_").concat(index2)
        };
      }
      var renderItem = function renderItem2(index2) {
        var item = memoFlattenOptions[index2];
        if (!item) {
          return null;
        }
        var itemData = item.data || {};
        var value = itemData.value;
        var group = item.group;
        var attrs = pickAttrs(itemData, true);
        var mergedLabel = getLabel(item);
        return item ? React60.createElement("div", _extends({
          "aria-label": typeof mergedLabel === "string" && !group ? mergedLabel : null
        }, attrs, {
          key: index2
        }, getItemAriaProps(item, index2), {
          "aria-selected": isAriaSelected(value)
        }), value) : null;
      };
      var a11yProps = {
        role: "listbox",
        id: "".concat(id, "_list")
      };
      return React60.createElement(React60.Fragment, null, virtual && React60.createElement("div", _extends({}, a11yProps, {
        style: {
          height: 0,
          width: 0,
          overflow: "hidden"
        }
      }), renderItem(activeIndex - 1), renderItem(activeIndex), renderItem(activeIndex + 1)), React60.createElement(es_default6, {
        itemKey: "key",
        ref: listRef,
        data: memoFlattenOptions,
        height: listHeight,
        itemHeight: listItemHeight,
        fullHeight: false,
        onMouseDown: onListMouseDown,
        onScroll: onPopupScroll,
        virtual,
        direction,
        innerProps: virtual ? null : a11yProps
      }, function(item, itemIndex) {
        var group = item.group, groupOption = item.groupOption, data = item.data, label = item.label, value = item.value;
        var key = data.key;
        if (group) {
          var _data$title;
          var groupTitle = (_data$title = data.title) !== null && _data$title !== void 0 ? _data$title : isTitleType2(label) ? label.toString() : void 0;
          return React60.createElement("div", {
            className: (0, import_classnames17.default)(itemPrefixCls, "".concat(itemPrefixCls, "-group"), data.className),
            title: groupTitle
          }, label !== void 0 ? label : key);
        }
        var disabled = data.disabled, title = data.title, children = data.children, style2 = data.style, className = data.className, otherProps = _objectWithoutProperties(data, _excluded11);
        var passedProps = omit(otherProps, omitFieldNameList);
        var selected = isSelected(value);
        var mergedDisabled = disabled || !selected && overMaxCount;
        var optionPrefixCls = "".concat(itemPrefixCls, "-option");
        var optionClassName = (0, import_classnames17.default)(itemPrefixCls, optionPrefixCls, className, _defineProperty(_defineProperty(_defineProperty(_defineProperty({}, "".concat(optionPrefixCls, "-grouped"), groupOption), "".concat(optionPrefixCls, "-active"), activeIndex === itemIndex && !mergedDisabled), "".concat(optionPrefixCls, "-disabled"), mergedDisabled), "".concat(optionPrefixCls, "-selected"), selected));
        var mergedLabel = getLabel(item);
        var iconVisible = !menuItemSelectedIcon || typeof menuItemSelectedIcon === "function" || selected;
        var content = typeof mergedLabel === "number" ? mergedLabel : mergedLabel || value;
        var optionTitle = isTitleType2(content) ? content.toString() : void 0;
        if (title !== void 0) {
          optionTitle = title;
        }
        return React60.createElement("div", _extends({}, pickAttrs(passedProps), !virtual ? getItemAriaProps(item, itemIndex) : {}, {
          "aria-selected": isAriaSelected(value),
          className: optionClassName,
          title: optionTitle,
          onMouseMove: function onMouseMove() {
            if (activeIndex === itemIndex || mergedDisabled) {
              return;
            }
            setActive(itemIndex);
          },
          onClick: function onClick() {
            if (!mergedDisabled) {
              onSelectValue(value);
            }
          },
          style: style2
        }), React60.createElement("div", {
          className: "".concat(optionPrefixCls, "-content")
        }, typeof optionRender === "function" ? optionRender(item, {
          index: itemIndex
        }) : content), React60.isValidElement(menuItemSelectedIcon) || selected, iconVisible && React60.createElement(TransBtn_default, {
          className: "".concat(itemPrefixCls, "-option-state"),
          customizeIcon: menuItemSelectedIcon,
          customizeIconProps: {
            value,
            disabled: mergedDisabled,
            isSelected: selected
          }
        }, selected ? "✓" : null));
      }));
    };
    RefOptionList = React60.forwardRef(OptionList);
    if (true) {
      RefOptionList.displayName = "OptionList";
    }
    OptionList_default = RefOptionList;
  }
});

// node_modules/rc-select/es/hooks/useCache.js
var React61, useCache_default;
var init_useCache = __esm({
  "node_modules/rc-select/es/hooks/useCache.js"() {
    init_objectSpread2();
    React61 = __toESM(require_react());
    useCache_default = (function(labeledValues, valueOptions) {
      var cacheRef = React61.useRef({
        values: /* @__PURE__ */ new Map(),
        options: /* @__PURE__ */ new Map()
      });
      var filledLabeledValues = React61.useMemo(function() {
        var _cacheRef$current = cacheRef.current, prevValueCache = _cacheRef$current.values, prevOptionCache = _cacheRef$current.options;
        var patchedValues = labeledValues.map(function(item) {
          if (item.label === void 0) {
            var _prevValueCache$get;
            return _objectSpread2(_objectSpread2({}, item), {}, {
              label: (_prevValueCache$get = prevValueCache.get(item.value)) === null || _prevValueCache$get === void 0 ? void 0 : _prevValueCache$get.label
            });
          }
          return item;
        });
        var valueCache = /* @__PURE__ */ new Map();
        var optionCache = /* @__PURE__ */ new Map();
        patchedValues.forEach(function(item) {
          valueCache.set(item.value, item);
          optionCache.set(item.value, valueOptions.get(item.value) || prevOptionCache.get(item.value));
        });
        cacheRef.current.values = valueCache;
        cacheRef.current.options = optionCache;
        return patchedValues;
      }, [labeledValues, valueOptions]);
      var getOption = React61.useCallback(function(val) {
        return valueOptions.get(val) || cacheRef.current.options.get(val);
      }, [valueOptions]);
      return [filledLabeledValues, getOption];
    });
  }
});

// node_modules/rc-select/es/hooks/useFilterOptions.js
function includes(test, search) {
  return toArray2(test).join("").toUpperCase().includes(search);
}
var React62, useFilterOptions_default;
var init_useFilterOptions = __esm({
  "node_modules/rc-select/es/hooks/useFilterOptions.js"() {
    init_defineProperty();
    init_objectSpread2();
    React62 = __toESM(require_react());
    init_commonUtil();
    init_valueUtil();
    useFilterOptions_default = (function(options, fieldNames, searchValue, filterOption, optionFilterProp) {
      return React62.useMemo(function() {
        if (!searchValue || filterOption === false) {
          return options;
        }
        var fieldOptions = fieldNames.options, fieldLabel = fieldNames.label, fieldValue = fieldNames.value;
        var filteredOptions = [];
        var customizeFilter = typeof filterOption === "function";
        var upperSearch = searchValue.toUpperCase();
        var filterFunc = customizeFilter ? filterOption : function(_, option) {
          if (optionFilterProp) {
            return includes(option[optionFilterProp], upperSearch);
          }
          if (option[fieldOptions]) {
            return includes(option[fieldLabel !== "children" ? fieldLabel : "label"], upperSearch);
          }
          return includes(option[fieldValue], upperSearch);
        };
        var wrapOption = customizeFilter ? function(opt) {
          return injectPropsWithOption(opt);
        } : function(opt) {
          return opt;
        };
        options.forEach(function(item) {
          if (item[fieldOptions]) {
            var matchGroup = filterFunc(searchValue, wrapOption(item));
            if (matchGroup) {
              filteredOptions.push(item);
            } else {
              var subOptions = item[fieldOptions].filter(function(subItem) {
                return filterFunc(searchValue, wrapOption(subItem));
              });
              if (subOptions.length) {
                filteredOptions.push(_objectSpread2(_objectSpread2({}, item), {}, _defineProperty({}, fieldOptions, subOptions)));
              }
            }
            return;
          }
          if (filterFunc(searchValue, wrapOption(item))) {
            filteredOptions.push(item);
          }
        });
        return filteredOptions;
      }, [options, filterOption, optionFilterProp, searchValue, fieldNames]);
    });
  }
});

// node_modules/rc-select/es/hooks/useId.js
function getUUID() {
  var retId;
  if (isBrowserClient2) {
    retId = uuid3;
    uuid3 += 1;
  } else {
    retId = "TEST_OR_SSR";
  }
  return retId;
}
function useId2(id) {
  var _React$useState = React63.useState(), _React$useState2 = _slicedToArray(_React$useState, 2), innerId = _React$useState2[0], setInnerId = _React$useState2[1];
  React63.useEffect(function() {
    setInnerId("rc_select_".concat(getUUID()));
  }, []);
  return id || innerId;
}
var React63, uuid3, isBrowserClient2;
var init_useId2 = __esm({
  "node_modules/rc-select/es/hooks/useId.js"() {
    init_slicedToArray();
    React63 = __toESM(require_react());
    init_canUseDom();
    uuid3 = 0;
    isBrowserClient2 = canUseDom();
  }
});

// node_modules/rc-select/es/utils/legacyUtil.js
function convertNodeToOption(node) {
  var _ref = node, key = _ref.key, _ref$props = _ref.props, children = _ref$props.children, value = _ref$props.value, restProps = _objectWithoutProperties(_ref$props, _excluded12);
  return _objectSpread2({
    key,
    value: value !== void 0 ? value : key,
    children
  }, restProps);
}
function convertChildrenToData(nodes) {
  var optionOnly = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
  return toArray(nodes).map(function(node, index2) {
    if (!React64.isValidElement(node) || !node.type) {
      return null;
    }
    var _ref2 = node, isSelectOptGroup = _ref2.type.isSelectOptGroup, key = _ref2.key, _ref2$props = _ref2.props, children = _ref2$props.children, restProps = _objectWithoutProperties(_ref2$props, _excluded24);
    if (optionOnly || !isSelectOptGroup) {
      return convertNodeToOption(node);
    }
    return _objectSpread2(_objectSpread2({
      key: "__RC_SELECT_GRP__".concat(key === null ? index2 : key, "__"),
      label: key
    }, restProps), {}, {
      options: convertChildrenToData(children)
    });
  }).filter(function(data) {
    return data;
  });
}
var React64, _excluded12, _excluded24;
var init_legacyUtil = __esm({
  "node_modules/rc-select/es/utils/legacyUtil.js"() {
    init_objectSpread2();
    init_objectWithoutProperties();
    React64 = __toESM(require_react());
    init_toArray();
    _excluded12 = ["children", "value"];
    _excluded24 = ["children"];
  }
});

// node_modules/rc-select/es/hooks/useOptions.js
var React65, useOptions, useOptions_default;
var init_useOptions = __esm({
  "node_modules/rc-select/es/hooks/useOptions.js"() {
    React65 = __toESM(require_react());
    init_legacyUtil();
    useOptions = function useOptions2(options, children, fieldNames, optionFilterProp, optionLabelProp) {
      return React65.useMemo(function() {
        var mergedOptions = options;
        var childrenAsData = !options;
        if (childrenAsData) {
          mergedOptions = convertChildrenToData(children);
        }
        var valueOptions = /* @__PURE__ */ new Map();
        var labelOptions = /* @__PURE__ */ new Map();
        var setLabelOptions = function setLabelOptions2(labelOptionsMap, option, key) {
          if (key && typeof key === "string") {
            labelOptionsMap.set(option[key], option);
          }
        };
        var dig = function dig2(optionList) {
          var isChildren = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
          for (var i = 0; i < optionList.length; i += 1) {
            var option = optionList[i];
            if (!option[fieldNames.options] || isChildren) {
              valueOptions.set(option[fieldNames.value], option);
              setLabelOptions(labelOptions, option, fieldNames.label);
              setLabelOptions(labelOptions, option, optionFilterProp);
              setLabelOptions(labelOptions, option, optionLabelProp);
            } else {
              dig2(option[fieldNames.options], true);
            }
          }
        };
        dig(mergedOptions);
        return {
          options: mergedOptions,
          valueOptions,
          labelOptions
        };
      }, [options, children, fieldNames, optionFilterProp, optionLabelProp]);
    };
    useOptions_default = useOptions;
  }
});

// node_modules/rc-select/es/hooks/useRefFunc.js
function useRefFunc(callback) {
  var funcRef = React66.useRef();
  funcRef.current = callback;
  var cacheFn = React66.useCallback(function() {
    return funcRef.current.apply(funcRef, arguments);
  }, []);
  return cacheFn;
}
var React66;
var init_useRefFunc = __esm({
  "node_modules/rc-select/es/hooks/useRefFunc.js"() {
    React66 = __toESM(require_react());
  }
});

// node_modules/rc-select/es/utils/warningPropsUtil.js
function warningProps(props) {
  var mode = props.mode, options = props.options, children = props.children, backfill = props.backfill, allowClear = props.allowClear, placeholder = props.placeholder, getInputElement = props.getInputElement, showSearch = props.showSearch, onSearch = props.onSearch, defaultOpen = props.defaultOpen, autoFocus = props.autoFocus, labelInValue = props.labelInValue, value = props.value, inputValue = props.inputValue, optionLabelProp = props.optionLabelProp;
  var multiple = isMultiple(mode);
  var mergedShowSearch = showSearch !== void 0 ? showSearch : multiple || mode === "combobox";
  var mergedOptions = options || convertChildrenToData(children);
  warning_default(mode !== "tags" || mergedOptions.every(function(opt) {
    return !opt.disabled;
  }), "Please avoid setting option to disabled in tags mode since user can always type text as tag.");
  if (mode === "tags" || mode === "combobox") {
    var hasNumberValue = mergedOptions.some(function(item) {
      if (item.options) {
        return item.options.some(function(opt) {
          return typeof ("value" in opt ? opt.value : opt.key) === "number";
        });
      }
      return typeof ("value" in item ? item.value : item.key) === "number";
    });
    warning_default(!hasNumberValue, "`value` of Option should not use number type when `mode` is `tags` or `combobox`.");
  }
  warning_default(mode !== "combobox" || !optionLabelProp, "`combobox` mode not support `optionLabelProp`. Please set `value` on Option directly.");
  warning_default(mode === "combobox" || !backfill, "`backfill` only works with `combobox` mode.");
  warning_default(mode === "combobox" || !getInputElement, "`getInputElement` only work with `combobox` mode.");
  noteOnce(mode !== "combobox" || !getInputElement || !allowClear || !placeholder, "Customize `getInputElement` should customize clear and placeholder logic instead of configuring `allowClear` and `placeholder`.");
  if (onSearch && !mergedShowSearch && mode !== "combobox" && mode !== "tags") {
    warning_default(false, "`onSearch` should work with `showSearch` instead of use alone.");
  }
  noteOnce(!defaultOpen || autoFocus, "`defaultOpen` makes Select open without focus which means it will not close by click outside. You can set `autoFocus` if needed.");
  if (value !== void 0 && value !== null) {
    var values = toArray2(value);
    warning_default(!labelInValue || values.every(function(val) {
      return _typeof(val) === "object" && ("key" in val || "value" in val);
    }), "`value` should in shape of `{ value: string | number, label?: ReactNode }` when you set `labelInValue` to `true`");
    warning_default(!multiple || Array.isArray(value), "`value` should be array when `mode` is `multiple` or `tags`");
  }
  if (children) {
    var invalidateChildType = null;
    toArray(children).some(function(node) {
      if (!React67.isValidElement(node) || !node.type) {
        return false;
      }
      var _ref = node, type = _ref.type;
      if (type.isSelectOption) {
        return false;
      }
      if (type.isSelectOptGroup) {
        var allChildrenValid = toArray(node.props.children).every(function(subNode) {
          if (!React67.isValidElement(subNode) || !node.type || subNode.type.isSelectOption) {
            return true;
          }
          invalidateChildType = subNode.type;
          return false;
        });
        if (allChildrenValid) {
          return false;
        }
        return true;
      }
      invalidateChildType = type;
      return true;
    });
    if (invalidateChildType) {
      warning_default(false, "`children` should be `Select.Option` or `Select.OptGroup` instead of `".concat(invalidateChildType.displayName || invalidateChildType.name || invalidateChildType, "`."));
    }
    warning_default(inputValue === void 0, "`inputValue` is deprecated, please use `searchValue` instead.");
  }
}
function warningNullOptions(options, fieldNames) {
  if (options) {
    var recursiveOptions = function recursiveOptions2(optionsList) {
      var inGroup = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
      for (var i = 0; i < optionsList.length; i++) {
        var option = optionsList[i];
        if (option[fieldNames === null || fieldNames === void 0 ? void 0 : fieldNames.value] === null) {
          warning_default(false, "`value` in Select options should not be `null`.");
          return true;
        }
        if (!inGroup && Array.isArray(option[fieldNames === null || fieldNames === void 0 ? void 0 : fieldNames.options]) && recursiveOptions2(option[fieldNames === null || fieldNames === void 0 ? void 0 : fieldNames.options], true)) {
          break;
        }
      }
    };
    recursiveOptions(options);
  }
}
var React67, warningPropsUtil_default;
var init_warningPropsUtil = __esm({
  "node_modules/rc-select/es/utils/warningPropsUtil.js"() {
    init_typeof();
    init_toArray();
    init_warning();
    React67 = __toESM(require_react());
    init_BaseSelect();
    init_commonUtil();
    init_legacyUtil();
    warningPropsUtil_default = warningProps;
  }
});

// node_modules/rc-select/es/Select.js
function isRawValue(value) {
  return !value || _typeof(value) !== "object";
}
var React68, _excluded13, OMIT_DOM_PROPS, Select, TypedSelect, Select_default;
var init_Select = __esm({
  "node_modules/rc-select/es/Select.js"() {
    init_extends();
    init_toConsumableArray();
    init_defineProperty();
    init_objectSpread2();
    init_slicedToArray();
    init_objectWithoutProperties();
    init_typeof();
    init_useMergedState();
    init_warning();
    React68 = __toESM(require_react());
    init_BaseSelect();
    init_OptGroup();
    init_Option();
    init_OptionList();
    init_SelectContext();
    init_useCache();
    init_useFilterOptions();
    init_useId2();
    init_useOptions();
    init_useRefFunc();
    init_commonUtil();
    init_valueUtil();
    init_warningPropsUtil();
    _excluded13 = ["id", "mode", "prefixCls", "backfill", "fieldNames", "inputValue", "searchValue", "onSearch", "autoClearSearchValue", "onSelect", "onDeselect", "dropdownMatchSelectWidth", "filterOption", "filterSort", "optionFilterProp", "optionLabelProp", "options", "optionRender", "children", "defaultActiveFirstOption", "menuItemSelectedIcon", "virtual", "direction", "listHeight", "listItemHeight", "labelRender", "value", "defaultValue", "labelInValue", "onChange", "maxCount"];
    OMIT_DOM_PROPS = ["inputValue"];
    Select = React68.forwardRef(function(props, ref) {
      var id = props.id, mode = props.mode, _props$prefixCls = props.prefixCls, prefixCls = _props$prefixCls === void 0 ? "rc-select" : _props$prefixCls, backfill = props.backfill, fieldNames = props.fieldNames, inputValue = props.inputValue, searchValue = props.searchValue, onSearch = props.onSearch, _props$autoClearSearc = props.autoClearSearchValue, autoClearSearchValue = _props$autoClearSearc === void 0 ? true : _props$autoClearSearc, onSelect = props.onSelect, onDeselect = props.onDeselect, _props$dropdownMatchS = props.dropdownMatchSelectWidth, dropdownMatchSelectWidth = _props$dropdownMatchS === void 0 ? true : _props$dropdownMatchS, filterOption = props.filterOption, filterSort = props.filterSort, optionFilterProp = props.optionFilterProp, optionLabelProp = props.optionLabelProp, options = props.options, optionRender = props.optionRender, children = props.children, defaultActiveFirstOption = props.defaultActiveFirstOption, menuItemSelectedIcon = props.menuItemSelectedIcon, virtual = props.virtual, direction = props.direction, _props$listHeight = props.listHeight, listHeight = _props$listHeight === void 0 ? 200 : _props$listHeight, _props$listItemHeight = props.listItemHeight, listItemHeight = _props$listItemHeight === void 0 ? 20 : _props$listItemHeight, labelRender = props.labelRender, value = props.value, defaultValue = props.defaultValue, labelInValue = props.labelInValue, onChange = props.onChange, maxCount = props.maxCount, restProps = _objectWithoutProperties(props, _excluded13);
      var mergedId = useId2(id);
      var multiple = isMultiple(mode);
      var childrenAsData = !!(!options && children);
      var mergedFilterOption = React68.useMemo(function() {
        if (filterOption === void 0 && mode === "combobox") {
          return false;
        }
        return filterOption;
      }, [filterOption, mode]);
      var mergedFieldNames = React68.useMemo(
        function() {
          return fillFieldNames(fieldNames, childrenAsData);
        },
        /* eslint-disable react-hooks/exhaustive-deps */
        [
          // We stringify fieldNames to avoid unnecessary re-renders.
          JSON.stringify(fieldNames),
          childrenAsData
        ]
        /* eslint-enable react-hooks/exhaustive-deps */
      );
      var _useMergedState = useMergedState("", {
        value: searchValue !== void 0 ? searchValue : inputValue,
        postState: function postState(search) {
          return search || "";
        }
      }), _useMergedState2 = _slicedToArray(_useMergedState, 2), mergedSearchValue = _useMergedState2[0], setSearchValue = _useMergedState2[1];
      var parsedOptions = useOptions_default(options, children, mergedFieldNames, optionFilterProp, optionLabelProp);
      var valueOptions = parsedOptions.valueOptions, labelOptions = parsedOptions.labelOptions, mergedOptions = parsedOptions.options;
      var convert2LabelValues = React68.useCallback(function(draftValues) {
        var valueList = toArray2(draftValues);
        return valueList.map(function(val) {
          var rawValue;
          var rawLabel;
          var rawKey;
          var rawDisabled;
          var rawTitle;
          if (isRawValue(val)) {
            rawValue = val;
          } else {
            var _val$value;
            rawKey = val.key;
            rawLabel = val.label;
            rawValue = (_val$value = val.value) !== null && _val$value !== void 0 ? _val$value : rawKey;
          }
          var option = valueOptions.get(rawValue);
          if (option) {
            var _option$key;
            if (rawLabel === void 0) rawLabel = option === null || option === void 0 ? void 0 : option[optionLabelProp || mergedFieldNames.label];
            if (rawKey === void 0) rawKey = (_option$key = option === null || option === void 0 ? void 0 : option.key) !== null && _option$key !== void 0 ? _option$key : rawValue;
            rawDisabled = option === null || option === void 0 ? void 0 : option.disabled;
            rawTitle = option === null || option === void 0 ? void 0 : option.title;
            if (!optionLabelProp) {
              var optionLabel = option === null || option === void 0 ? void 0 : option[mergedFieldNames.label];
              if (optionLabel !== void 0 && !React68.isValidElement(optionLabel) && !React68.isValidElement(rawLabel) && optionLabel !== rawLabel) {
                warning_default(false, "`label` of `value` is not same as `label` in Select options.");
              }
            }
          }
          return {
            label: rawLabel,
            value: rawValue,
            key: rawKey,
            disabled: rawDisabled,
            title: rawTitle
          };
        });
      }, [mergedFieldNames, optionLabelProp, valueOptions]);
      var _useMergedState3 = useMergedState(defaultValue, {
        value
      }), _useMergedState4 = _slicedToArray(_useMergedState3, 2), internalValue = _useMergedState4[0], setInternalValue = _useMergedState4[1];
      var rawLabeledValues = React68.useMemo(function() {
        var _values$;
        var newInternalValue = multiple && internalValue === null ? [] : internalValue;
        var values = convert2LabelValues(newInternalValue);
        if (mode === "combobox" && isComboNoValue((_values$ = values[0]) === null || _values$ === void 0 ? void 0 : _values$.value)) {
          return [];
        }
        return values;
      }, [internalValue, convert2LabelValues, mode, multiple]);
      var _useCache = useCache_default(rawLabeledValues, valueOptions), _useCache2 = _slicedToArray(_useCache, 2), mergedValues = _useCache2[0], getMixedOption = _useCache2[1];
      var displayValues = React68.useMemo(function() {
        if (!mode && mergedValues.length === 1) {
          var firstValue = mergedValues[0];
          if (firstValue.value === null && (firstValue.label === null || firstValue.label === void 0)) {
            return [];
          }
        }
        return mergedValues.map(function(item) {
          var _ref;
          return _objectSpread2(_objectSpread2({}, item), {}, {
            label: (_ref = typeof labelRender === "function" ? labelRender(item) : item.label) !== null && _ref !== void 0 ? _ref : item.value
          });
        });
      }, [mode, mergedValues, labelRender]);
      var rawValues = React68.useMemo(function() {
        return new Set(mergedValues.map(function(val) {
          return val.value;
        }));
      }, [mergedValues]);
      React68.useEffect(function() {
        if (mode === "combobox") {
          var _mergedValues$;
          var strValue = (_mergedValues$ = mergedValues[0]) === null || _mergedValues$ === void 0 ? void 0 : _mergedValues$.value;
          setSearchValue(hasValue(strValue) ? String(strValue) : "");
        }
      }, [mergedValues]);
      var createTagOption = useRefFunc(function(val, label) {
        var mergedLabel = label !== null && label !== void 0 ? label : val;
        return _defineProperty(_defineProperty({}, mergedFieldNames.value, val), mergedFieldNames.label, mergedLabel);
      });
      var filledTagOptions = React68.useMemo(function() {
        if (mode !== "tags") {
          return mergedOptions;
        }
        var cloneOptions = _toConsumableArray(mergedOptions);
        var existOptions = function existOptions2(val) {
          return valueOptions.has(val);
        };
        _toConsumableArray(mergedValues).sort(function(a, b) {
          return a.value < b.value ? -1 : 1;
        }).forEach(function(item) {
          var val = item.value;
          if (!existOptions(val)) {
            cloneOptions.push(createTagOption(val, item.label));
          }
        });
        return cloneOptions;
      }, [createTagOption, mergedOptions, valueOptions, mergedValues, mode]);
      var filteredOptions = useFilterOptions_default(filledTagOptions, mergedFieldNames, mergedSearchValue, mergedFilterOption, optionFilterProp);
      var filledSearchOptions = React68.useMemo(function() {
        if (mode !== "tags" || !mergedSearchValue || filteredOptions.some(function(item) {
          return item[optionFilterProp || "value"] === mergedSearchValue;
        })) {
          return filteredOptions;
        }
        if (filteredOptions.some(function(item) {
          return item[mergedFieldNames.value] === mergedSearchValue;
        })) {
          return filteredOptions;
        }
        return [createTagOption(mergedSearchValue)].concat(_toConsumableArray(filteredOptions));
      }, [createTagOption, optionFilterProp, mode, filteredOptions, mergedSearchValue, mergedFieldNames]);
      var sorter = function sorter2(inputOptions) {
        var sortedOptions = _toConsumableArray(inputOptions).sort(function(a, b) {
          return filterSort(a, b, {
            searchValue: mergedSearchValue
          });
        });
        return sortedOptions.map(function(item) {
          if (Array.isArray(item.options)) {
            return _objectSpread2(_objectSpread2({}, item), {}, {
              options: item.options.length > 0 ? sorter2(item.options) : item.options
            });
          }
          return item;
        });
      };
      var orderedFilteredOptions = React68.useMemo(function() {
        if (!filterSort) {
          return filledSearchOptions;
        }
        return sorter(filledSearchOptions);
      }, [filledSearchOptions, filterSort, mergedSearchValue]);
      var displayOptions = React68.useMemo(function() {
        return flattenOptions(orderedFilteredOptions, {
          fieldNames: mergedFieldNames,
          childrenAsData
        });
      }, [orderedFilteredOptions, mergedFieldNames, childrenAsData]);
      var triggerChange = function triggerChange2(values) {
        var labeledValues = convert2LabelValues(values);
        setInternalValue(labeledValues);
        if (onChange && // Trigger event only when value changed
        (labeledValues.length !== mergedValues.length || labeledValues.some(function(newVal, index2) {
          var _mergedValues$index;
          return ((_mergedValues$index = mergedValues[index2]) === null || _mergedValues$index === void 0 ? void 0 : _mergedValues$index.value) !== (newVal === null || newVal === void 0 ? void 0 : newVal.value);
        }))) {
          var returnValues = labelInValue ? labeledValues : labeledValues.map(function(v) {
            return v.value;
          });
          var returnOptions = labeledValues.map(function(v) {
            return injectPropsWithOption(getMixedOption(v.value));
          });
          onChange(
            // Value
            multiple ? returnValues : returnValues[0],
            // Option
            multiple ? returnOptions : returnOptions[0]
          );
        }
      };
      var _React$useState = React68.useState(null), _React$useState2 = _slicedToArray(_React$useState, 2), activeValue = _React$useState2[0], setActiveValue = _React$useState2[1];
      var _React$useState3 = React68.useState(0), _React$useState4 = _slicedToArray(_React$useState3, 2), accessibilityIndex = _React$useState4[0], setAccessibilityIndex = _React$useState4[1];
      var mergedDefaultActiveFirstOption = defaultActiveFirstOption !== void 0 ? defaultActiveFirstOption : mode !== "combobox";
      var onActiveValue = React68.useCallback(function(active, index2) {
        var _ref3 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {}, _ref3$source = _ref3.source, source = _ref3$source === void 0 ? "keyboard" : _ref3$source;
        setAccessibilityIndex(index2);
        if (backfill && mode === "combobox" && active !== null && source === "keyboard") {
          setActiveValue(String(active));
        }
      }, [backfill, mode]);
      var triggerSelect = function triggerSelect2(val, selected, type) {
        var getSelectEnt = function getSelectEnt2() {
          var _option$key2;
          var option = getMixedOption(val);
          return [labelInValue ? {
            label: option === null || option === void 0 ? void 0 : option[mergedFieldNames.label],
            value: val,
            key: (_option$key2 = option === null || option === void 0 ? void 0 : option.key) !== null && _option$key2 !== void 0 ? _option$key2 : val
          } : val, injectPropsWithOption(option)];
        };
        if (selected && onSelect) {
          var _getSelectEnt = getSelectEnt(), _getSelectEnt2 = _slicedToArray(_getSelectEnt, 2), wrappedValue = _getSelectEnt2[0], _option = _getSelectEnt2[1];
          onSelect(wrappedValue, _option);
        } else if (!selected && onDeselect && type !== "clear") {
          var _getSelectEnt3 = getSelectEnt(), _getSelectEnt4 = _slicedToArray(_getSelectEnt3, 2), _wrappedValue = _getSelectEnt4[0], _option2 = _getSelectEnt4[1];
          onDeselect(_wrappedValue, _option2);
        }
      };
      var onInternalSelect = useRefFunc(function(val, info) {
        var cloneValues;
        var mergedSelect = multiple ? info.selected : true;
        if (mergedSelect) {
          cloneValues = multiple ? [].concat(_toConsumableArray(mergedValues), [val]) : [val];
        } else {
          cloneValues = mergedValues.filter(function(v) {
            return v.value !== val;
          });
        }
        triggerChange(cloneValues);
        triggerSelect(val, mergedSelect);
        if (mode === "combobox") {
          setActiveValue("");
        } else if (!isMultiple || autoClearSearchValue) {
          setSearchValue("");
          setActiveValue("");
        }
      });
      var onDisplayValuesChange = function onDisplayValuesChange2(nextValues, info) {
        triggerChange(nextValues);
        var type = info.type, values = info.values;
        if (type === "remove" || type === "clear") {
          values.forEach(function(item) {
            triggerSelect(item.value, false, type);
          });
        }
      };
      var onInternalSearch = function onInternalSearch2(searchText, info) {
        setSearchValue(searchText);
        setActiveValue(null);
        if (info.source === "submit") {
          var formatted = (searchText || "").trim();
          if (formatted) {
            var newRawValues = Array.from(new Set([].concat(_toConsumableArray(rawValues), [formatted])));
            triggerChange(newRawValues);
            triggerSelect(formatted, true);
            setSearchValue("");
          }
          return;
        }
        if (info.source !== "blur") {
          if (mode === "combobox") {
            triggerChange(searchText);
          }
          onSearch === null || onSearch === void 0 || onSearch(searchText);
        }
      };
      var onInternalSearchSplit = function onInternalSearchSplit2(words) {
        var patchValues = words;
        if (mode !== "tags") {
          patchValues = words.map(function(word) {
            var opt = labelOptions.get(word);
            return opt === null || opt === void 0 ? void 0 : opt.value;
          }).filter(function(val) {
            return val !== void 0;
          });
        }
        var newRawValues = Array.from(new Set([].concat(_toConsumableArray(rawValues), _toConsumableArray(patchValues))));
        triggerChange(newRawValues);
        newRawValues.forEach(function(newRawValue) {
          triggerSelect(newRawValue, true);
        });
      };
      var selectContext = React68.useMemo(function() {
        var realVirtual = virtual !== false && dropdownMatchSelectWidth !== false;
        return _objectSpread2(_objectSpread2({}, parsedOptions), {}, {
          flattenOptions: displayOptions,
          onActiveValue,
          defaultActiveFirstOption: mergedDefaultActiveFirstOption,
          onSelect: onInternalSelect,
          menuItemSelectedIcon,
          rawValues,
          fieldNames: mergedFieldNames,
          virtual: realVirtual,
          direction,
          listHeight,
          listItemHeight,
          childrenAsData,
          maxCount,
          optionRender
        });
      }, [maxCount, parsedOptions, displayOptions, onActiveValue, mergedDefaultActiveFirstOption, onInternalSelect, menuItemSelectedIcon, rawValues, mergedFieldNames, virtual, dropdownMatchSelectWidth, direction, listHeight, listItemHeight, childrenAsData, optionRender]);
      if (true) {
        warningPropsUtil_default(props);
        warningNullOptions(mergedOptions, mergedFieldNames);
      }
      return React68.createElement(SelectContext_default.Provider, {
        value: selectContext
      }, React68.createElement(BaseSelect_default, _extends({}, restProps, {
        // >>> MISC
        id: mergedId,
        prefixCls,
        ref,
        omitDomProps: OMIT_DOM_PROPS,
        mode,
        displayValues,
        onDisplayValuesChange,
        direction,
        searchValue: mergedSearchValue,
        onSearch: onInternalSearch,
        autoClearSearchValue,
        onSearchSplit: onInternalSearchSplit,
        dropdownMatchSelectWidth,
        OptionList: OptionList_default,
        emptyOptions: !displayOptions.length,
        activeValue,
        activeDescendantId: "".concat(mergedId, "_list_").concat(accessibilityIndex)
      })));
    });
    if (true) {
      Select.displayName = "Select";
    }
    TypedSelect = Select;
    TypedSelect.Option = Option_default;
    TypedSelect.OptGroup = OptGroup_default;
    Select_default = TypedSelect;
  }
});

// node_modules/rc-select/es/index.js
var es_exports3 = {};
__export(es_exports3, {
  BaseSelect: () => BaseSelect_default,
  OptGroup: () => OptGroup_default,
  Option: () => Option_default,
  default: () => es_default7,
  useBaseProps: () => useBaseProps
});
var es_default7;
var init_es9 = __esm({
  "node_modules/rc-select/es/index.js"() {
    init_Select();
    init_Option();
    init_OptGroup();
    init_BaseSelect();
    init_useBaseProps();
    es_default7 = Select_default;
  }
});

// node_modules/rc-tooltip/es/Popup.js
function Popup2(props) {
  var children = props.children, prefixCls = props.prefixCls, id = props.id, innerStyle = props.overlayInnerStyle, bodyClassName = props.bodyClassName, className = props.className, style2 = props.style;
  return React69.createElement("div", {
    className: (0, import_classnames18.default)("".concat(prefixCls, "-content"), className),
    style: style2
  }, React69.createElement("div", {
    className: (0, import_classnames18.default)("".concat(prefixCls, "-inner"), bodyClassName),
    id,
    role: "tooltip",
    style: innerStyle
  }, typeof children === "function" ? children() : children));
}
var import_classnames18, React69;
var init_Popup2 = __esm({
  "node_modules/rc-tooltip/es/Popup.js"() {
    import_classnames18 = __toESM(require_classnames());
    React69 = __toESM(require_react());
  }
});

// node_modules/rc-tooltip/es/placements.js
var autoAdjustOverflowTopBottom, autoAdjustOverflowLeftRight, targetOffset, placements;
var init_placements = __esm({
  "node_modules/rc-tooltip/es/placements.js"() {
    autoAdjustOverflowTopBottom = {
      shiftX: 64,
      adjustY: 1
    };
    autoAdjustOverflowLeftRight = {
      adjustX: 1,
      shiftY: true
    };
    targetOffset = [0, 0];
    placements = {
      left: {
        points: ["cr", "cl"],
        overflow: autoAdjustOverflowLeftRight,
        offset: [-4, 0],
        targetOffset
      },
      right: {
        points: ["cl", "cr"],
        overflow: autoAdjustOverflowLeftRight,
        offset: [4, 0],
        targetOffset
      },
      top: {
        points: ["bc", "tc"],
        overflow: autoAdjustOverflowTopBottom,
        offset: [0, -4],
        targetOffset
      },
      bottom: {
        points: ["tc", "bc"],
        overflow: autoAdjustOverflowTopBottom,
        offset: [0, 4],
        targetOffset
      },
      topLeft: {
        points: ["bl", "tl"],
        overflow: autoAdjustOverflowTopBottom,
        offset: [0, -4],
        targetOffset
      },
      leftTop: {
        points: ["tr", "tl"],
        overflow: autoAdjustOverflowLeftRight,
        offset: [-4, 0],
        targetOffset
      },
      topRight: {
        points: ["br", "tr"],
        overflow: autoAdjustOverflowTopBottom,
        offset: [0, -4],
        targetOffset
      },
      rightTop: {
        points: ["tl", "tr"],
        overflow: autoAdjustOverflowLeftRight,
        offset: [4, 0],
        targetOffset
      },
      bottomRight: {
        points: ["tr", "br"],
        overflow: autoAdjustOverflowTopBottom,
        offset: [0, 4],
        targetOffset
      },
      rightBottom: {
        points: ["bl", "br"],
        overflow: autoAdjustOverflowLeftRight,
        offset: [4, 0],
        targetOffset
      },
      bottomLeft: {
        points: ["tl", "bl"],
        overflow: autoAdjustOverflowTopBottom,
        offset: [0, 4],
        targetOffset
      },
      leftBottom: {
        points: ["br", "bl"],
        overflow: autoAdjustOverflowLeftRight,
        offset: [-4, 0],
        targetOffset
      }
    };
  }
});

// node_modules/rc-tooltip/es/Tooltip.js
var import_classnames19, React70, import_react17, _excluded14, Tooltip, Tooltip_default;
var init_Tooltip = __esm({
  "node_modules/rc-tooltip/es/Tooltip.js"() {
    init_extends();
    init_objectSpread2();
    init_objectWithoutProperties();
    init_es7();
    import_classnames19 = __toESM(require_classnames());
    React70 = __toESM(require_react());
    import_react17 = __toESM(require_react());
    init_placements();
    init_Popup2();
    init_useId();
    _excluded14 = ["overlayClassName", "trigger", "mouseEnterDelay", "mouseLeaveDelay", "overlayStyle", "prefixCls", "children", "onVisibleChange", "afterVisibleChange", "transitionName", "animation", "motion", "placement", "align", "destroyTooltipOnHide", "defaultVisible", "getTooltipContainer", "overlayInnerStyle", "arrowContent", "overlay", "id", "showArrow", "classNames", "styles"];
    Tooltip = function Tooltip2(props, ref) {
      var overlayClassName = props.overlayClassName, _props$trigger = props.trigger, trigger = _props$trigger === void 0 ? ["hover"] : _props$trigger, _props$mouseEnterDela = props.mouseEnterDelay, mouseEnterDelay = _props$mouseEnterDela === void 0 ? 0 : _props$mouseEnterDela, _props$mouseLeaveDela = props.mouseLeaveDelay, mouseLeaveDelay = _props$mouseLeaveDela === void 0 ? 0.1 : _props$mouseLeaveDela, overlayStyle = props.overlayStyle, _props$prefixCls = props.prefixCls, prefixCls = _props$prefixCls === void 0 ? "rc-tooltip" : _props$prefixCls, children = props.children, onVisibleChange = props.onVisibleChange, afterVisibleChange = props.afterVisibleChange, transitionName = props.transitionName, animation = props.animation, motion = props.motion, _props$placement = props.placement, placement = _props$placement === void 0 ? "right" : _props$placement, _props$align = props.align, align = _props$align === void 0 ? {} : _props$align, _props$destroyTooltip = props.destroyTooltipOnHide, destroyTooltipOnHide = _props$destroyTooltip === void 0 ? false : _props$destroyTooltip, defaultVisible = props.defaultVisible, getTooltipContainer = props.getTooltipContainer, overlayInnerStyle = props.overlayInnerStyle, arrowContent = props.arrowContent, overlay = props.overlay, id = props.id, _props$showArrow = props.showArrow, showArrow = _props$showArrow === void 0 ? true : _props$showArrow, tooltipClassNames = props.classNames, tooltipStyles = props.styles, restProps = _objectWithoutProperties(props, _excluded14);
      var mergedId = useId_default(id);
      var triggerRef = (0, import_react17.useRef)(null);
      (0, import_react17.useImperativeHandle)(ref, function() {
        return triggerRef.current;
      });
      var extraProps = _objectSpread2({}, restProps);
      if ("visible" in props) {
        extraProps.popupVisible = props.visible;
      }
      var getPopupElement = function getPopupElement2() {
        return React70.createElement(Popup2, {
          key: "content",
          prefixCls,
          id: mergedId,
          bodyClassName: tooltipClassNames === null || tooltipClassNames === void 0 ? void 0 : tooltipClassNames.body,
          overlayInnerStyle: _objectSpread2(_objectSpread2({}, overlayInnerStyle), tooltipStyles === null || tooltipStyles === void 0 ? void 0 : tooltipStyles.body)
        }, overlay);
      };
      var getChildren = function getChildren2() {
        var child = React70.Children.only(children);
        var originalProps = (child === null || child === void 0 ? void 0 : child.props) || {};
        var childProps = _objectSpread2(_objectSpread2({}, originalProps), {}, {
          "aria-describedby": overlay ? mergedId : null
        });
        return React70.cloneElement(children, childProps);
      };
      return React70.createElement(es_default5, _extends({
        popupClassName: (0, import_classnames19.default)(overlayClassName, tooltipClassNames === null || tooltipClassNames === void 0 ? void 0 : tooltipClassNames.root),
        prefixCls,
        popup: getPopupElement,
        action: trigger,
        builtinPlacements: placements,
        popupPlacement: placement,
        ref: triggerRef,
        popupAlign: align,
        getPopupContainer: getTooltipContainer,
        onPopupVisibleChange: onVisibleChange,
        afterPopupVisibleChange: afterVisibleChange,
        popupTransitionName: transitionName,
        popupAnimation: animation,
        popupMotion: motion,
        defaultPopupVisible: defaultVisible,
        autoDestroy: destroyTooltipOnHide,
        mouseLeaveDelay,
        popupStyle: _objectSpread2(_objectSpread2({}, overlayStyle), tooltipStyles === null || tooltipStyles === void 0 ? void 0 : tooltipStyles.root),
        mouseEnterDelay,
        arrow: showArrow
      }, extraProps), getChildren());
    };
    Tooltip_default = (0, import_react17.forwardRef)(Tooltip);
  }
});

// node_modules/rc-tooltip/es/index.js
var es_exports4 = {};
__export(es_exports4, {
  Popup: () => Popup2,
  default: () => es_default8
});
var es_default8;
var init_es10 = __esm({
  "node_modules/rc-tooltip/es/index.js"() {
    init_Popup2();
    init_Tooltip();
    es_default8 = Tooltip_default;
  }
});

// node_modules/rc-menu/es/context/MenuContext.js
function mergeProps(origin, target) {
  var clone = _objectSpread2({}, origin);
  Object.keys(target).forEach(function(key) {
    var value = target[key];
    if (value !== void 0) {
      clone[key] = value;
    }
  });
  return clone;
}
function InheritableContextProvider(_ref) {
  var children = _ref.children, locked = _ref.locked, restProps = _objectWithoutProperties(_ref, _excluded15);
  var context = React71.useContext(MenuContext);
  var inheritableContext = useMemo(function() {
    return mergeProps(context, restProps);
  }, [context, restProps], function(prev, next) {
    return !locked && (prev[0] !== next[0] || !isEqual_default(prev[1], next[1], true));
  });
  return React71.createElement(MenuContext.Provider, {
    value: inheritableContext
  }, children);
}
var React71, _excluded15, MenuContext;
var init_MenuContext = __esm({
  "node_modules/rc-menu/es/context/MenuContext.js"() {
    init_objectWithoutProperties();
    init_objectSpread2();
    React71 = __toESM(require_react());
    init_useMemo();
    init_isEqual();
    _excluded15 = ["children", "locked"];
    MenuContext = React71.createContext(null);
  }
});

// node_modules/rc-menu/es/context/PathContext.js
function useMeasure() {
  return React72.useContext(PathRegisterContext);
}
function useFullPath(eventKey) {
  var parentKeyPath = React72.useContext(PathTrackerContext);
  return React72.useMemo(function() {
    return eventKey !== void 0 ? [].concat(_toConsumableArray(parentKeyPath), [eventKey]) : parentKeyPath;
  }, [parentKeyPath, eventKey]);
}
var React72, EmptyList, PathRegisterContext, PathTrackerContext, PathUserContext;
var init_PathContext = __esm({
  "node_modules/rc-menu/es/context/PathContext.js"() {
    init_toConsumableArray();
    React72 = __toESM(require_react());
    EmptyList = [];
    PathRegisterContext = React72.createContext(null);
    PathTrackerContext = React72.createContext(EmptyList);
    PathUserContext = React72.createContext(null);
  }
});

// node_modules/rc-menu/es/utils/commonUtil.js
function parseChildren(children, keyPath) {
  return toArray(children).map(function(child, index2) {
    if (React73.isValidElement(child)) {
      var _eventKey, _child$props;
      var key = child.key;
      var eventKey = (_eventKey = (_child$props = child.props) === null || _child$props === void 0 ? void 0 : _child$props.eventKey) !== null && _eventKey !== void 0 ? _eventKey : key;
      var emptyKey = eventKey === null || eventKey === void 0;
      if (emptyKey) {
        eventKey = "tmp_key-".concat([].concat(_toConsumableArray(keyPath), [index2]).join("-"));
      }
      var cloneProps = {
        key: eventKey,
        eventKey
      };
      if (emptyKey) {
        cloneProps.warnKey = true;
      }
      return React73.cloneElement(child, cloneProps);
    }
    return child;
  });
}
var React73;
var init_commonUtil2 = __esm({
  "node_modules/rc-menu/es/utils/commonUtil.js"() {
    init_toConsumableArray();
    init_toArray();
    React73 = __toESM(require_react());
  }
});

// node_modules/rc-menu/es/MenuItemGroup.js
var import_classnames20, React74, _excluded16, InternalMenuItemGroup, MenuItemGroup, MenuItemGroup_default;
var init_MenuItemGroup = __esm({
  "node_modules/rc-menu/es/MenuItemGroup.js"() {
    init_extends();
    init_objectWithoutProperties();
    import_classnames20 = __toESM(require_classnames());
    init_omit();
    React74 = __toESM(require_react());
    init_MenuContext();
    init_PathContext();
    init_commonUtil2();
    _excluded16 = ["className", "title", "eventKey", "children"];
    InternalMenuItemGroup = React74.forwardRef(function(props, ref) {
      var className = props.className, title = props.title, eventKey = props.eventKey, children = props.children, restProps = _objectWithoutProperties(props, _excluded16);
      var _React$useContext = React74.useContext(MenuContext), prefixCls = _React$useContext.prefixCls;
      var groupPrefixCls = "".concat(prefixCls, "-item-group");
      return React74.createElement("li", _extends({
        ref,
        role: "presentation"
      }, restProps, {
        onClick: function onClick(e) {
          return e.stopPropagation();
        },
        className: (0, import_classnames20.default)(groupPrefixCls, className)
      }), React74.createElement("div", {
        role: "presentation",
        className: "".concat(groupPrefixCls, "-title"),
        title: typeof title === "string" ? title : void 0
      }, title), React74.createElement("ul", {
        role: "group",
        className: "".concat(groupPrefixCls, "-list")
      }, children));
    });
    MenuItemGroup = React74.forwardRef(function(props, ref) {
      var eventKey = props.eventKey, children = props.children;
      var connectedKeyPath = useFullPath(eventKey);
      var childList = parseChildren(children, connectedKeyPath);
      var measure = useMeasure();
      if (measure) {
        return childList;
      }
      return React74.createElement(InternalMenuItemGroup, _extends({
        ref
      }, omit(props, ["warnKey"])), childList);
    });
    if (true) {
      MenuItemGroup.displayName = "MenuItemGroup";
    }
    MenuItemGroup_default = MenuItemGroup;
  }
});

// node_modules/rc-menu/es/context/IdContext.js
function getMenuId(uuid4, eventKey) {
  if (uuid4 === void 0) {
    return null;
  }
  return "".concat(uuid4, "-").concat(eventKey);
}
function useMenuId(eventKey) {
  var id = React75.useContext(IdContext);
  return getMenuId(id, eventKey);
}
var React75, IdContext;
var init_IdContext = __esm({
  "node_modules/rc-menu/es/context/IdContext.js"() {
    React75 = __toESM(require_react());
    IdContext = React75.createContext(null);
  }
});

// node_modules/rc-menu/es/context/PrivateContext.js
var React76, PrivateContext, PrivateContext_default;
var init_PrivateContext = __esm({
  "node_modules/rc-menu/es/context/PrivateContext.js"() {
    React76 = __toESM(require_react());
    PrivateContext = React76.createContext({});
    PrivateContext_default = PrivateContext;
  }
});

// node_modules/rc-util/es/Dom/focus.js
function focusable(node) {
  var includePositive = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
  if (isVisible_default(node)) {
    var nodeName = node.nodeName.toLowerCase();
    var isFocusableElement = (
      // Focusable element
      ["input", "select", "textarea", "button"].includes(nodeName) || // Editable element
      node.isContentEditable || // Anchor with href element
      nodeName === "a" && !!node.getAttribute("href")
    );
    var tabIndexAttr = node.getAttribute("tabindex");
    var tabIndexNum = Number(tabIndexAttr);
    var tabIndex = null;
    if (tabIndexAttr && !Number.isNaN(tabIndexNum)) {
      tabIndex = tabIndexNum;
    } else if (isFocusableElement && tabIndex === null) {
      tabIndex = 0;
    }
    if (isFocusableElement && node.disabled) {
      tabIndex = null;
    }
    return tabIndex !== null && (tabIndex >= 0 || includePositive && tabIndex < 0);
  }
  return false;
}
function getFocusNodeList(node) {
  var includePositive = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
  var res = _toConsumableArray(node.querySelectorAll("*")).filter(function(child) {
    return focusable(child, includePositive);
  });
  if (focusable(node, includePositive)) {
    res.unshift(node);
  }
  return res;
}
var init_focus = __esm({
  "node_modules/rc-util/es/Dom/focus.js"() {
    init_toConsumableArray();
    init_isVisible();
  }
});

// node_modules/rc-menu/es/hooks/useAccessibility.js
function getOffset(mode, isRootLevel, isRtl, which) {
  var _offsets;
  var prev = "prev";
  var next = "next";
  var children = "children";
  var parent = "parent";
  if (mode === "inline" && which === ENTER) {
    return {
      inlineTrigger: true
    };
  }
  var inline2 = _defineProperty(_defineProperty({}, UP, prev), DOWN, next);
  var horizontal = _defineProperty(_defineProperty(_defineProperty(_defineProperty({}, LEFT, isRtl ? next : prev), RIGHT, isRtl ? prev : next), DOWN, children), ENTER, children);
  var vertical = _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty({}, UP, prev), DOWN, next), ENTER, children), ESC, parent), LEFT, isRtl ? children : parent), RIGHT, isRtl ? parent : children);
  var offsets = {
    inline: inline2,
    horizontal,
    vertical,
    inlineSub: inline2,
    horizontalSub: vertical,
    verticalSub: vertical
  };
  var type = (_offsets = offsets["".concat(mode).concat(isRootLevel ? "" : "Sub")]) === null || _offsets === void 0 ? void 0 : _offsets[which];
  switch (type) {
    case prev:
      return {
        offset: -1,
        sibling: true
      };
    case next:
      return {
        offset: 1,
        sibling: true
      };
    case parent:
      return {
        offset: -1,
        sibling: false
      };
    case children:
      return {
        offset: 1,
        sibling: false
      };
    default:
      return null;
  }
}
function findContainerUL(element) {
  var current = element;
  while (current) {
    if (current.getAttribute("data-menu-list")) {
      return current;
    }
    current = current.parentElement;
  }
  return null;
}
function getFocusElement(activeElement, elements) {
  var current = activeElement || document.activeElement;
  while (current) {
    if (elements.has(current)) {
      return current;
    }
    current = current.parentElement;
  }
  return null;
}
function getFocusableElements(container, elements) {
  var list = getFocusNodeList(container, true);
  return list.filter(function(ele) {
    return elements.has(ele);
  });
}
function getNextFocusElement(parentQueryContainer, elements, focusMenuElement) {
  var offset = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 1;
  if (!parentQueryContainer) {
    return null;
  }
  var sameLevelFocusableMenuElementList = getFocusableElements(parentQueryContainer, elements);
  var count = sameLevelFocusableMenuElementList.length;
  var focusIndex = sameLevelFocusableMenuElementList.findIndex(function(ele) {
    return focusMenuElement === ele;
  });
  if (offset < 0) {
    if (focusIndex === -1) {
      focusIndex = count - 1;
    } else {
      focusIndex -= 1;
    }
  } else if (offset > 0) {
    focusIndex += 1;
  }
  focusIndex = (focusIndex + count) % count;
  return sameLevelFocusableMenuElementList[focusIndex];
}
function useAccessibility(mode, activeKey, isRtl, id, containerRef, getKeys, getKeyPath, triggerActiveKey, triggerAccessibilityOpen, originOnKeyDown) {
  var rafRef = React77.useRef();
  var activeRef = React77.useRef();
  activeRef.current = activeKey;
  var cleanRaf = function cleanRaf2() {
    raf_default.cancel(rafRef.current);
  };
  React77.useEffect(function() {
    return function() {
      cleanRaf();
    };
  }, []);
  return function(e) {
    var which = e.which;
    if ([].concat(ArrowKeys, [ENTER, ESC, HOME, END]).includes(which)) {
      var keys = getKeys();
      var refreshedElements = refreshElements(keys, id);
      var _refreshedElements = refreshedElements, elements = _refreshedElements.elements, key2element = _refreshedElements.key2element, element2key = _refreshedElements.element2key;
      var activeElement = key2element.get(activeKey);
      var focusMenuElement = getFocusElement(activeElement, elements);
      var focusMenuKey = element2key.get(focusMenuElement);
      var offsetObj = getOffset(mode, getKeyPath(focusMenuKey, true).length === 1, isRtl, which);
      if (!offsetObj && which !== HOME && which !== END) {
        return;
      }
      if (ArrowKeys.includes(which) || [HOME, END].includes(which)) {
        e.preventDefault();
      }
      var tryFocus = function tryFocus2(menuElement) {
        if (menuElement) {
          var focusTargetElement = menuElement;
          var link = menuElement.querySelector("a");
          if (link !== null && link !== void 0 && link.getAttribute("href")) {
            focusTargetElement = link;
          }
          var targetKey = element2key.get(menuElement);
          triggerActiveKey(targetKey);
          cleanRaf();
          rafRef.current = raf_default(function() {
            if (activeRef.current === targetKey) {
              focusTargetElement.focus();
            }
          });
        }
      };
      if ([HOME, END].includes(which) || offsetObj.sibling || !focusMenuElement) {
        var parentQueryContainer;
        if (!focusMenuElement || mode === "inline") {
          parentQueryContainer = containerRef.current;
        } else {
          parentQueryContainer = findContainerUL(focusMenuElement);
        }
        var targetElement;
        var focusableElements = getFocusableElements(parentQueryContainer, elements);
        if (which === HOME) {
          targetElement = focusableElements[0];
        } else if (which === END) {
          targetElement = focusableElements[focusableElements.length - 1];
        } else {
          targetElement = getNextFocusElement(parentQueryContainer, elements, focusMenuElement, offsetObj.offset);
        }
        tryFocus(targetElement);
      } else if (offsetObj.inlineTrigger) {
        triggerAccessibilityOpen(focusMenuKey);
      } else if (offsetObj.offset > 0) {
        triggerAccessibilityOpen(focusMenuKey, true);
        cleanRaf();
        rafRef.current = raf_default(function() {
          refreshedElements = refreshElements(keys, id);
          var controlId = focusMenuElement.getAttribute("aria-controls");
          var subQueryContainer = document.getElementById(controlId);
          var targetElement2 = getNextFocusElement(subQueryContainer, refreshedElements.elements);
          tryFocus(targetElement2);
        }, 5);
      } else if (offsetObj.offset < 0) {
        var keyPath = getKeyPath(focusMenuKey, true);
        var parentKey = keyPath[keyPath.length - 2];
        var parentMenuElement = key2element.get(parentKey);
        triggerAccessibilityOpen(parentKey, false);
        tryFocus(parentMenuElement);
      }
    }
    originOnKeyDown === null || originOnKeyDown === void 0 || originOnKeyDown(e);
  };
}
var React77, LEFT, RIGHT, UP, DOWN, ENTER, ESC, HOME, END, ArrowKeys, refreshElements;
var init_useAccessibility = __esm({
  "node_modules/rc-menu/es/hooks/useAccessibility.js"() {
    init_defineProperty();
    init_focus();
    init_KeyCode();
    init_raf();
    React77 = __toESM(require_react());
    init_IdContext();
    LEFT = KeyCode_default.LEFT;
    RIGHT = KeyCode_default.RIGHT;
    UP = KeyCode_default.UP;
    DOWN = KeyCode_default.DOWN;
    ENTER = KeyCode_default.ENTER;
    ESC = KeyCode_default.ESC;
    HOME = KeyCode_default.HOME;
    END = KeyCode_default.END;
    ArrowKeys = [UP, DOWN, LEFT, RIGHT];
    refreshElements = function refreshElements2(keys, id) {
      var elements = /* @__PURE__ */ new Set();
      var key2element = /* @__PURE__ */ new Map();
      var element2key = /* @__PURE__ */ new Map();
      keys.forEach(function(key) {
        var element = document.querySelector("[data-menu-id='".concat(getMenuId(id, key), "']"));
        if (element) {
          elements.add(element);
          element2key.set(element, key);
          key2element.set(key, element);
        }
      });
      return {
        elements,
        key2element,
        element2key
      };
    };
  }
});

// node_modules/rc-menu/es/utils/timeUtil.js
function nextSlice(callback) {
  Promise.resolve().then(callback);
}
var init_timeUtil = __esm({
  "node_modules/rc-menu/es/utils/timeUtil.js"() {
  }
});

// node_modules/rc-menu/es/hooks/useKeyRecords.js
function useKeyRecords() {
  var _React$useState = React78.useState({}), _React$useState2 = _slicedToArray(_React$useState, 2), internalForceUpdate = _React$useState2[1];
  var key2pathRef = (0, import_react18.useRef)(/* @__PURE__ */ new Map());
  var path2keyRef = (0, import_react18.useRef)(/* @__PURE__ */ new Map());
  var _React$useState3 = React78.useState([]), _React$useState4 = _slicedToArray(_React$useState3, 2), overflowKeys = _React$useState4[0], setOverflowKeys = _React$useState4[1];
  var updateRef = (0, import_react18.useRef)(0);
  var destroyRef = (0, import_react18.useRef)(false);
  var forceUpdate = function forceUpdate2() {
    if (!destroyRef.current) {
      internalForceUpdate({});
    }
  };
  var registerPath = (0, import_react18.useCallback)(function(key, keyPath) {
    if (true) {
      warning_default(!key2pathRef.current.has(key), "Duplicated key '".concat(key, "' used in Menu by path [").concat(keyPath.join(" > "), "]"));
    }
    var connectedPath = getPathStr(keyPath);
    path2keyRef.current.set(connectedPath, key);
    key2pathRef.current.set(key, connectedPath);
    updateRef.current += 1;
    var id = updateRef.current;
    nextSlice(function() {
      if (id === updateRef.current) {
        forceUpdate();
      }
    });
  }, []);
  var unregisterPath = (0, import_react18.useCallback)(function(key, keyPath) {
    var connectedPath = getPathStr(keyPath);
    path2keyRef.current.delete(connectedPath);
    key2pathRef.current.delete(key);
  }, []);
  var refreshOverflowKeys = (0, import_react18.useCallback)(function(keys) {
    setOverflowKeys(keys);
  }, []);
  var getKeyPath = (0, import_react18.useCallback)(function(eventKey, includeOverflow) {
    var fullPath = key2pathRef.current.get(eventKey) || "";
    var keys = getPathKeys(fullPath);
    if (includeOverflow && overflowKeys.includes(keys[0])) {
      keys.unshift(OVERFLOW_KEY);
    }
    return keys;
  }, [overflowKeys]);
  var isSubPathKey = (0, import_react18.useCallback)(function(pathKeys, eventKey) {
    return pathKeys.filter(function(item) {
      return item !== void 0;
    }).some(function(pathKey) {
      var pathKeyList = getKeyPath(pathKey, true);
      return pathKeyList.includes(eventKey);
    });
  }, [getKeyPath]);
  var getKeys = function getKeys2() {
    var keys = _toConsumableArray(key2pathRef.current.keys());
    if (overflowKeys.length) {
      keys.push(OVERFLOW_KEY);
    }
    return keys;
  };
  var getSubPathKeys = (0, import_react18.useCallback)(function(key) {
    var connectedPath = "".concat(key2pathRef.current.get(key)).concat(PATH_SPLIT);
    var pathKeys = /* @__PURE__ */ new Set();
    _toConsumableArray(path2keyRef.current.keys()).forEach(function(pathKey) {
      if (pathKey.startsWith(connectedPath)) {
        pathKeys.add(path2keyRef.current.get(pathKey));
      }
    });
    return pathKeys;
  }, []);
  React78.useEffect(function() {
    return function() {
      destroyRef.current = true;
    };
  }, []);
  return {
    // Register
    registerPath,
    unregisterPath,
    refreshOverflowKeys,
    // Util
    isSubPathKey,
    getKeyPath,
    getKeys,
    getSubPathKeys
  };
}
var React78, import_react18, PATH_SPLIT, getPathStr, getPathKeys, OVERFLOW_KEY;
var init_useKeyRecords = __esm({
  "node_modules/rc-menu/es/hooks/useKeyRecords.js"() {
    init_toConsumableArray();
    init_slicedToArray();
    React78 = __toESM(require_react());
    import_react18 = __toESM(require_react());
    init_warning();
    init_timeUtil();
    PATH_SPLIT = "__RC_UTIL_PATH_SPLIT__";
    getPathStr = function getPathStr2(keyPath) {
      return keyPath.join(PATH_SPLIT);
    };
    getPathKeys = function getPathKeys2(keyPathStr) {
      return keyPathStr.split(PATH_SPLIT);
    };
    OVERFLOW_KEY = "rc-menu-more";
  }
});

// node_modules/rc-menu/es/hooks/useMemoCallback.js
function useMemoCallback(func) {
  var funRef = React79.useRef(func);
  funRef.current = func;
  var callback = React79.useCallback(function() {
    var _funRef$current;
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    return (_funRef$current = funRef.current) === null || _funRef$current === void 0 ? void 0 : _funRef$current.call.apply(_funRef$current, [funRef].concat(args));
  }, []);
  return func ? callback : void 0;
}
var React79;
var init_useMemoCallback = __esm({
  "node_modules/rc-menu/es/hooks/useMemoCallback.js"() {
    React79 = __toESM(require_react());
  }
});

// node_modules/rc-menu/es/hooks/useUUID.js
function useUUID(id) {
  var _useMergedState = useMergedState(id, {
    value: id
  }), _useMergedState2 = _slicedToArray(_useMergedState, 2), uuid4 = _useMergedState2[0], setUUID = _useMergedState2[1];
  React80.useEffect(function() {
    internalId += 1;
    var newId = false ? "test" : "".concat(uniquePrefix, "-").concat(internalId);
    setUUID("rc-menu-uuid-".concat(newId));
  }, []);
  return uuid4;
}
var React80, uniquePrefix, internalId;
var init_useUUID = __esm({
  "node_modules/rc-menu/es/hooks/useUUID.js"() {
    init_slicedToArray();
    React80 = __toESM(require_react());
    init_useMergedState();
    uniquePrefix = Math.random().toFixed(5).toString().slice(2);
    internalId = 0;
  }
});

// node_modules/rc-menu/es/hooks/useActive.js
function useActive(eventKey, disabled, onMouseEnter, onMouseLeave) {
  var _React$useContext = React81.useContext(MenuContext), activeKey = _React$useContext.activeKey, onActive = _React$useContext.onActive, onInactive = _React$useContext.onInactive;
  var ret = {
    active: activeKey === eventKey
  };
  if (!disabled) {
    ret.onMouseEnter = function(domEvent) {
      onMouseEnter === null || onMouseEnter === void 0 || onMouseEnter({
        key: eventKey,
        domEvent
      });
      onActive(eventKey);
    };
    ret.onMouseLeave = function(domEvent) {
      onMouseLeave === null || onMouseLeave === void 0 || onMouseLeave({
        key: eventKey,
        domEvent
      });
      onInactive(eventKey);
    };
  }
  return ret;
}
var React81;
var init_useActive = __esm({
  "node_modules/rc-menu/es/hooks/useActive.js"() {
    React81 = __toESM(require_react());
    init_MenuContext();
  }
});

// node_modules/rc-menu/es/hooks/useDirectionStyle.js
function useDirectionStyle(level) {
  var _React$useContext = React82.useContext(MenuContext), mode = _React$useContext.mode, rtl = _React$useContext.rtl, inlineIndent = _React$useContext.inlineIndent;
  if (mode !== "inline") {
    return null;
  }
  var len = level;
  return rtl ? {
    paddingRight: len * inlineIndent
  } : {
    paddingLeft: len * inlineIndent
  };
}
var React82;
var init_useDirectionStyle = __esm({
  "node_modules/rc-menu/es/hooks/useDirectionStyle.js"() {
    React82 = __toESM(require_react());
    init_MenuContext();
  }
});

// node_modules/rc-menu/es/Icon.js
function Icon(_ref) {
  var icon = _ref.icon, props = _ref.props, children = _ref.children;
  var iconNode;
  if (icon === null || icon === false) {
    return null;
  }
  if (typeof icon === "function") {
    iconNode = React83.createElement(icon, _objectSpread2({}, props));
  } else if (typeof icon !== "boolean") {
    iconNode = icon;
  }
  return iconNode || children || null;
}
var React83;
var init_Icon = __esm({
  "node_modules/rc-menu/es/Icon.js"() {
    init_objectSpread2();
    React83 = __toESM(require_react());
  }
});

// node_modules/rc-menu/es/utils/warnUtil.js
function warnItemProp(_ref) {
  var item = _ref.item, restInfo = _objectWithoutProperties(_ref, _excluded17);
  Object.defineProperty(restInfo, "item", {
    get: function get2() {
      warning_default(false, "`info.item` is deprecated since we will move to function component that not provides React Node instance in future.");
      return item;
    }
  });
  return restInfo;
}
var _excluded17;
var init_warnUtil = __esm({
  "node_modules/rc-menu/es/utils/warnUtil.js"() {
    init_objectWithoutProperties();
    init_warning();
    _excluded17 = ["item"];
  }
});

// node_modules/rc-menu/es/MenuItem.js
function MenuItem(props, ref) {
  var eventKey = props.eventKey;
  var measure = useMeasure();
  var connectedKeyPath = useFullPath(eventKey);
  React84.useEffect(function() {
    if (measure) {
      measure.registerPath(eventKey, connectedKeyPath);
      return function() {
        measure.unregisterPath(eventKey, connectedKeyPath);
      };
    }
  }, [connectedKeyPath]);
  if (measure) {
    return null;
  }
  return React84.createElement(InternalMenuItem, _extends({}, props, {
    ref
  }));
}
var import_classnames21, React84, _excluded18, _excluded25, _excluded33, LegacyMenuItem, InternalMenuItem, MenuItem_default;
var init_MenuItem = __esm({
  "node_modules/rc-menu/es/MenuItem.js"() {
    init_defineProperty();
    init_objectSpread2();
    init_toConsumableArray();
    init_extends();
    init_objectWithoutProperties();
    init_classCallCheck();
    init_createClass();
    init_inherits();
    init_createSuper();
    import_classnames21 = __toESM(require_classnames());
    init_es5();
    init_KeyCode();
    init_omit();
    init_ref();
    init_warning();
    React84 = __toESM(require_react());
    init_IdContext();
    init_MenuContext();
    init_PathContext();
    init_PrivateContext();
    init_useActive();
    init_useDirectionStyle();
    init_Icon();
    init_warnUtil();
    _excluded18 = ["title", "attribute", "elementRef"];
    _excluded25 = ["style", "className", "eventKey", "warnKey", "disabled", "itemIcon", "children", "role", "onMouseEnter", "onMouseLeave", "onClick", "onKeyDown", "onFocus"];
    _excluded33 = ["active"];
    LegacyMenuItem = (function(_React$Component) {
      _inherits(LegacyMenuItem2, _React$Component);
      var _super = _createSuper(LegacyMenuItem2);
      function LegacyMenuItem2() {
        _classCallCheck(this, LegacyMenuItem2);
        return _super.apply(this, arguments);
      }
      _createClass(LegacyMenuItem2, [{
        key: "render",
        value: function render() {
          var _this$props = this.props, title = _this$props.title, attribute = _this$props.attribute, elementRef = _this$props.elementRef, restProps = _objectWithoutProperties(_this$props, _excluded18);
          var passedProps = omit(restProps, ["eventKey", "popupClassName", "popupOffset", "onTitleClick"]);
          warning_default(!attribute, "`attribute` of Menu.Item is deprecated. Please pass attribute directly.");
          return React84.createElement(es_default3.Item, _extends({}, attribute, {
            title: typeof title === "string" ? title : void 0
          }, passedProps, {
            ref: elementRef
          }));
        }
      }]);
      return LegacyMenuItem2;
    })(React84.Component);
    InternalMenuItem = React84.forwardRef(function(props, ref) {
      var style2 = props.style, className = props.className, eventKey = props.eventKey, warnKey = props.warnKey, disabled = props.disabled, itemIcon = props.itemIcon, children = props.children, role = props.role, onMouseEnter = props.onMouseEnter, onMouseLeave = props.onMouseLeave, onClick = props.onClick, onKeyDown = props.onKeyDown, onFocus = props.onFocus, restProps = _objectWithoutProperties(props, _excluded25);
      var domDataId = useMenuId(eventKey);
      var _React$useContext = React84.useContext(MenuContext), prefixCls = _React$useContext.prefixCls, onItemClick = _React$useContext.onItemClick, contextDisabled = _React$useContext.disabled, overflowDisabled = _React$useContext.overflowDisabled, contextItemIcon = _React$useContext.itemIcon, selectedKeys = _React$useContext.selectedKeys, onActive = _React$useContext.onActive;
      var _React$useContext2 = React84.useContext(PrivateContext_default), _internalRenderMenuItem = _React$useContext2._internalRenderMenuItem;
      var itemCls = "".concat(prefixCls, "-item");
      var legacyMenuItemRef = React84.useRef();
      var elementRef = React84.useRef();
      var mergedDisabled = contextDisabled || disabled;
      var mergedEleRef = useComposeRef(ref, elementRef);
      var connectedKeys = useFullPath(eventKey);
      if (warnKey) {
        warning_default(false, "MenuItem should not leave undefined `key`.");
      }
      var getEventInfo = function getEventInfo2(e) {
        return {
          key: eventKey,
          // Note: For legacy code is reversed which not like other antd component
          keyPath: _toConsumableArray(connectedKeys).reverse(),
          item: legacyMenuItemRef.current,
          domEvent: e
        };
      };
      var mergedItemIcon = itemIcon || contextItemIcon;
      var _useActive = useActive(eventKey, mergedDisabled, onMouseEnter, onMouseLeave), active = _useActive.active, activeProps = _objectWithoutProperties(_useActive, _excluded33);
      var selected = selectedKeys.includes(eventKey);
      var directionStyle = useDirectionStyle(connectedKeys.length);
      var onInternalClick = function onInternalClick2(e) {
        if (mergedDisabled) {
          return;
        }
        var info = getEventInfo(e);
        onClick === null || onClick === void 0 || onClick(warnItemProp(info));
        onItemClick(info);
      };
      var onInternalKeyDown = function onInternalKeyDown2(e) {
        onKeyDown === null || onKeyDown === void 0 || onKeyDown(e);
        if (e.which === KeyCode_default.ENTER) {
          var info = getEventInfo(e);
          onClick === null || onClick === void 0 || onClick(warnItemProp(info));
          onItemClick(info);
        }
      };
      var onInternalFocus = function onInternalFocus2(e) {
        onActive(eventKey);
        onFocus === null || onFocus === void 0 || onFocus(e);
      };
      var optionRoleProps = {};
      if (props.role === "option") {
        optionRoleProps["aria-selected"] = selected;
      }
      var renderNode = React84.createElement(LegacyMenuItem, _extends({
        ref: legacyMenuItemRef,
        elementRef: mergedEleRef,
        role: role === null ? "none" : role || "menuitem",
        tabIndex: disabled ? null : -1,
        "data-menu-id": overflowDisabled && domDataId ? null : domDataId
      }, omit(restProps, ["extra"]), activeProps, optionRoleProps, {
        component: "li",
        "aria-disabled": disabled,
        style: _objectSpread2(_objectSpread2({}, directionStyle), style2),
        className: (0, import_classnames21.default)(itemCls, _defineProperty(_defineProperty(_defineProperty({}, "".concat(itemCls, "-active"), active), "".concat(itemCls, "-selected"), selected), "".concat(itemCls, "-disabled"), mergedDisabled), className),
        onClick: onInternalClick,
        onKeyDown: onInternalKeyDown,
        onFocus: onInternalFocus
      }), children, React84.createElement(Icon, {
        props: _objectSpread2(_objectSpread2({}, props), {}, {
          isSelected: selected
        }),
        icon: mergedItemIcon
      }));
      if (_internalRenderMenuItem) {
        renderNode = _internalRenderMenuItem(renderNode, props, {
          selected
        });
      }
      return renderNode;
    });
    MenuItem_default = React84.forwardRef(MenuItem);
  }
});

// node_modules/rc-menu/es/SubMenu/SubMenuList.js
var React85, import_classnames22, _excluded19, InternalSubMenuList, SubMenuList, SubMenuList_default;
var init_SubMenuList = __esm({
  "node_modules/rc-menu/es/SubMenu/SubMenuList.js"() {
    init_extends();
    init_objectWithoutProperties();
    React85 = __toESM(require_react());
    import_classnames22 = __toESM(require_classnames());
    init_MenuContext();
    _excluded19 = ["className", "children"];
    InternalSubMenuList = function InternalSubMenuList2(_ref, ref) {
      var className = _ref.className, children = _ref.children, restProps = _objectWithoutProperties(_ref, _excluded19);
      var _React$useContext = React85.useContext(MenuContext), prefixCls = _React$useContext.prefixCls, mode = _React$useContext.mode, rtl = _React$useContext.rtl;
      return React85.createElement("ul", _extends({
        className: (0, import_classnames22.default)(prefixCls, rtl && "".concat(prefixCls, "-rtl"), "".concat(prefixCls, "-sub"), "".concat(prefixCls, "-").concat(mode === "inline" ? "inline" : "vertical"), className),
        role: "menu"
      }, restProps, {
        "data-menu-list": true,
        ref
      }), children);
    };
    SubMenuList = React85.forwardRef(InternalSubMenuList);
    SubMenuList.displayName = "SubMenuList";
    SubMenuList_default = SubMenuList;
  }
});

// node_modules/rc-menu/es/placements.js
var autoAdjustOverflow, placements2, placementsRtl;
var init_placements2 = __esm({
  "node_modules/rc-menu/es/placements.js"() {
    autoAdjustOverflow = {
      adjustX: 1,
      adjustY: 1
    };
    placements2 = {
      topLeft: {
        points: ["bl", "tl"],
        overflow: autoAdjustOverflow
      },
      topRight: {
        points: ["br", "tr"],
        overflow: autoAdjustOverflow
      },
      bottomLeft: {
        points: ["tl", "bl"],
        overflow: autoAdjustOverflow
      },
      bottomRight: {
        points: ["tr", "br"],
        overflow: autoAdjustOverflow
      },
      leftTop: {
        points: ["tr", "tl"],
        overflow: autoAdjustOverflow
      },
      leftBottom: {
        points: ["br", "bl"],
        overflow: autoAdjustOverflow
      },
      rightTop: {
        points: ["tl", "tr"],
        overflow: autoAdjustOverflow
      },
      rightBottom: {
        points: ["bl", "br"],
        overflow: autoAdjustOverflow
      }
    };
    placementsRtl = {
      topLeft: {
        points: ["bl", "tl"],
        overflow: autoAdjustOverflow
      },
      topRight: {
        points: ["br", "tr"],
        overflow: autoAdjustOverflow
      },
      bottomLeft: {
        points: ["tl", "bl"],
        overflow: autoAdjustOverflow
      },
      bottomRight: {
        points: ["tr", "br"],
        overflow: autoAdjustOverflow
      },
      rightTop: {
        points: ["tr", "tl"],
        overflow: autoAdjustOverflow
      },
      rightBottom: {
        points: ["br", "bl"],
        overflow: autoAdjustOverflow
      },
      leftTop: {
        points: ["tl", "tr"],
        overflow: autoAdjustOverflow
      },
      leftBottom: {
        points: ["bl", "br"],
        overflow: autoAdjustOverflow
      }
    };
  }
});

// node_modules/rc-menu/es/utils/motionUtil.js
function getMotion2(mode, motion, defaultMotions) {
  if (motion) {
    return motion;
  }
  if (defaultMotions) {
    return defaultMotions[mode] || defaultMotions.other;
  }
  return void 0;
}
var init_motionUtil = __esm({
  "node_modules/rc-menu/es/utils/motionUtil.js"() {
  }
});

// node_modules/rc-menu/es/SubMenu/PopupTrigger.js
function PopupTrigger(_ref) {
  var prefixCls = _ref.prefixCls, visible = _ref.visible, children = _ref.children, popup = _ref.popup, popupStyle = _ref.popupStyle, popupClassName = _ref.popupClassName, popupOffset = _ref.popupOffset, disabled = _ref.disabled, mode = _ref.mode, onVisibleChange = _ref.onVisibleChange;
  var _React$useContext = React86.useContext(MenuContext), getPopupContainer = _React$useContext.getPopupContainer, rtl = _React$useContext.rtl, subMenuOpenDelay = _React$useContext.subMenuOpenDelay, subMenuCloseDelay = _React$useContext.subMenuCloseDelay, builtinPlacements = _React$useContext.builtinPlacements, triggerSubMenuAction = _React$useContext.triggerSubMenuAction, forceSubMenuRender = _React$useContext.forceSubMenuRender, rootClassName = _React$useContext.rootClassName, motion = _React$useContext.motion, defaultMotions = _React$useContext.defaultMotions;
  var _React$useState = React86.useState(false), _React$useState2 = _slicedToArray(_React$useState, 2), innerVisible = _React$useState2[0], setInnerVisible = _React$useState2[1];
  var placement = rtl ? _objectSpread2(_objectSpread2({}, placementsRtl), builtinPlacements) : _objectSpread2(_objectSpread2({}, placements2), builtinPlacements);
  var popupPlacement = popupPlacementMap[mode];
  var targetMotion = getMotion2(mode, motion, defaultMotions);
  var targetMotionRef = React86.useRef(targetMotion);
  if (mode !== "inline") {
    targetMotionRef.current = targetMotion;
  }
  var mergedMotion = _objectSpread2(_objectSpread2({}, targetMotionRef.current), {}, {
    leavedClassName: "".concat(prefixCls, "-hidden"),
    removeOnLeave: false,
    motionAppear: true
  });
  var visibleRef = React86.useRef();
  React86.useEffect(function() {
    visibleRef.current = raf_default(function() {
      setInnerVisible(visible);
    });
    return function() {
      raf_default.cancel(visibleRef.current);
    };
  }, [visible]);
  return React86.createElement(es_default5, {
    prefixCls,
    popupClassName: (0, import_classnames23.default)("".concat(prefixCls, "-popup"), _defineProperty({}, "".concat(prefixCls, "-rtl"), rtl), popupClassName, rootClassName),
    stretch: mode === "horizontal" ? "minWidth" : null,
    getPopupContainer,
    builtinPlacements: placement,
    popupPlacement,
    popupVisible: innerVisible,
    popup,
    popupStyle,
    popupAlign: popupOffset && {
      offset: popupOffset
    },
    action: disabled ? [] : [triggerSubMenuAction],
    mouseEnterDelay: subMenuOpenDelay,
    mouseLeaveDelay: subMenuCloseDelay,
    onPopupVisibleChange: onVisibleChange,
    forceRender: forceSubMenuRender,
    popupMotion: mergedMotion,
    fresh: true
  }, children);
}
var React86, import_classnames23, popupPlacementMap;
var init_PopupTrigger = __esm({
  "node_modules/rc-menu/es/SubMenu/PopupTrigger.js"() {
    init_defineProperty();
    init_objectSpread2();
    init_slicedToArray();
    React86 = __toESM(require_react());
    init_es7();
    import_classnames23 = __toESM(require_classnames());
    init_raf();
    init_MenuContext();
    init_placements2();
    init_motionUtil();
    popupPlacementMap = {
      horizontal: "bottomLeft",
      vertical: "rightTop",
      "vertical-left": "rightTop",
      "vertical-right": "leftTop"
    };
  }
});

// node_modules/rc-menu/es/SubMenu/InlineSubMenuList.js
function InlineSubMenuList(_ref) {
  var id = _ref.id, open = _ref.open, keyPath = _ref.keyPath, children = _ref.children;
  var fixedMode = "inline";
  var _React$useContext = React87.useContext(MenuContext), prefixCls = _React$useContext.prefixCls, forceSubMenuRender = _React$useContext.forceSubMenuRender, motion = _React$useContext.motion, defaultMotions = _React$useContext.defaultMotions, mode = _React$useContext.mode;
  var sameModeRef = React87.useRef(false);
  sameModeRef.current = mode === fixedMode;
  var _React$useState = React87.useState(!sameModeRef.current), _React$useState2 = _slicedToArray(_React$useState, 2), destroy = _React$useState2[0], setDestroy = _React$useState2[1];
  var mergedOpen = sameModeRef.current ? open : false;
  React87.useEffect(function() {
    if (sameModeRef.current) {
      setDestroy(false);
    }
  }, [mode]);
  var mergedMotion = _objectSpread2({}, getMotion2(fixedMode, motion, defaultMotions));
  if (keyPath.length > 1) {
    mergedMotion.motionAppear = false;
  }
  var originOnVisibleChanged = mergedMotion.onVisibleChanged;
  mergedMotion.onVisibleChanged = function(newVisible) {
    if (!sameModeRef.current && !newVisible) {
      setDestroy(true);
    }
    return originOnVisibleChanged === null || originOnVisibleChanged === void 0 ? void 0 : originOnVisibleChanged(newVisible);
  };
  if (destroy) {
    return null;
  }
  return React87.createElement(InheritableContextProvider, {
    mode: fixedMode,
    locked: !sameModeRef.current
  }, React87.createElement(es_default2, _extends({
    visible: mergedOpen
  }, mergedMotion, {
    forceRender: forceSubMenuRender,
    removeOnLeave: false,
    leavedClassName: "".concat(prefixCls, "-hidden")
  }), function(_ref2) {
    var motionClassName = _ref2.className, motionStyle = _ref2.style;
    return React87.createElement(SubMenuList_default, {
      id,
      className: motionClassName,
      style: motionStyle
    }, children);
  }));
}
var React87;
var init_InlineSubMenuList = __esm({
  "node_modules/rc-menu/es/SubMenu/InlineSubMenuList.js"() {
    init_extends();
    init_objectSpread2();
    init_slicedToArray();
    React87 = __toESM(require_react());
    init_es4();
    init_motionUtil();
    init_MenuContext();
    init_SubMenuList();
  }
});

// node_modules/rc-menu/es/SubMenu/index.js
var React88, import_classnames24, _excluded20, _excluded26, InternalSubMenu, SubMenu, SubMenu_default;
var init_SubMenu = __esm({
  "node_modules/rc-menu/es/SubMenu/index.js"() {
    init_defineProperty();
    init_extends();
    init_objectSpread2();
    init_slicedToArray();
    init_objectWithoutProperties();
    React88 = __toESM(require_react());
    import_classnames24 = __toESM(require_classnames());
    init_es5();
    init_warning();
    init_SubMenuList();
    init_commonUtil2();
    init_MenuContext();
    init_useMemoCallback();
    init_PopupTrigger();
    init_Icon();
    init_useActive();
    init_warnUtil();
    init_useDirectionStyle();
    init_InlineSubMenuList();
    init_PathContext();
    init_IdContext();
    init_PrivateContext();
    _excluded20 = ["style", "className", "title", "eventKey", "warnKey", "disabled", "internalPopupClose", "children", "itemIcon", "expandIcon", "popupClassName", "popupOffset", "popupStyle", "onClick", "onMouseEnter", "onMouseLeave", "onTitleClick", "onTitleMouseEnter", "onTitleMouseLeave"];
    _excluded26 = ["active"];
    InternalSubMenu = React88.forwardRef(function(props, ref) {
      var style2 = props.style, className = props.className, title = props.title, eventKey = props.eventKey, warnKey = props.warnKey, disabled = props.disabled, internalPopupClose = props.internalPopupClose, children = props.children, itemIcon = props.itemIcon, expandIcon = props.expandIcon, popupClassName = props.popupClassName, popupOffset = props.popupOffset, popupStyle = props.popupStyle, onClick = props.onClick, onMouseEnter = props.onMouseEnter, onMouseLeave = props.onMouseLeave, onTitleClick = props.onTitleClick, onTitleMouseEnter = props.onTitleMouseEnter, onTitleMouseLeave = props.onTitleMouseLeave, restProps = _objectWithoutProperties(props, _excluded20);
      var domDataId = useMenuId(eventKey);
      var _React$useContext = React88.useContext(MenuContext), prefixCls = _React$useContext.prefixCls, mode = _React$useContext.mode, openKeys = _React$useContext.openKeys, contextDisabled = _React$useContext.disabled, overflowDisabled = _React$useContext.overflowDisabled, activeKey = _React$useContext.activeKey, selectedKeys = _React$useContext.selectedKeys, contextItemIcon = _React$useContext.itemIcon, contextExpandIcon = _React$useContext.expandIcon, onItemClick = _React$useContext.onItemClick, onOpenChange = _React$useContext.onOpenChange, onActive = _React$useContext.onActive;
      var _React$useContext2 = React88.useContext(PrivateContext_default), _internalRenderSubMenuItem = _React$useContext2._internalRenderSubMenuItem;
      var _React$useContext3 = React88.useContext(PathUserContext), isSubPathKey = _React$useContext3.isSubPathKey;
      var connectedPath = useFullPath();
      var subMenuPrefixCls = "".concat(prefixCls, "-submenu");
      var mergedDisabled = contextDisabled || disabled;
      var elementRef = React88.useRef();
      var popupRef = React88.useRef();
      if (warnKey) {
        warning_default(false, "SubMenu should not leave undefined `key`.");
      }
      var mergedItemIcon = itemIcon !== null && itemIcon !== void 0 ? itemIcon : contextItemIcon;
      var mergedExpandIcon = expandIcon !== null && expandIcon !== void 0 ? expandIcon : contextExpandIcon;
      var originOpen = openKeys.includes(eventKey);
      var open = !overflowDisabled && originOpen;
      var childrenSelected = isSubPathKey(selectedKeys, eventKey);
      var _useActive = useActive(eventKey, mergedDisabled, onTitleMouseEnter, onTitleMouseLeave), active = _useActive.active, activeProps = _objectWithoutProperties(_useActive, _excluded26);
      var _React$useState = React88.useState(false), _React$useState2 = _slicedToArray(_React$useState, 2), childrenActive = _React$useState2[0], setChildrenActive = _React$useState2[1];
      var triggerChildrenActive = function triggerChildrenActive2(newActive) {
        if (!mergedDisabled) {
          setChildrenActive(newActive);
        }
      };
      var onInternalMouseEnter = function onInternalMouseEnter2(domEvent) {
        triggerChildrenActive(true);
        onMouseEnter === null || onMouseEnter === void 0 || onMouseEnter({
          key: eventKey,
          domEvent
        });
      };
      var onInternalMouseLeave = function onInternalMouseLeave2(domEvent) {
        triggerChildrenActive(false);
        onMouseLeave === null || onMouseLeave === void 0 || onMouseLeave({
          key: eventKey,
          domEvent
        });
      };
      var mergedActive = React88.useMemo(function() {
        if (active) {
          return active;
        }
        if (mode !== "inline") {
          return childrenActive || isSubPathKey([activeKey], eventKey);
        }
        return false;
      }, [mode, active, activeKey, childrenActive, eventKey, isSubPathKey]);
      var directionStyle = useDirectionStyle(connectedPath.length);
      var onInternalTitleClick = function onInternalTitleClick2(e) {
        if (mergedDisabled) {
          return;
        }
        onTitleClick === null || onTitleClick === void 0 || onTitleClick({
          key: eventKey,
          domEvent: e
        });
        if (mode === "inline") {
          onOpenChange(eventKey, !originOpen);
        }
      };
      var onMergedItemClick = useMemoCallback(function(info) {
        onClick === null || onClick === void 0 || onClick(warnItemProp(info));
        onItemClick(info);
      });
      var onPopupVisibleChange = function onPopupVisibleChange2(newVisible) {
        if (mode !== "inline") {
          onOpenChange(eventKey, newVisible);
        }
      };
      var onInternalFocus = function onInternalFocus2() {
        onActive(eventKey);
      };
      var popupId = domDataId && "".concat(domDataId, "-popup");
      var expandIconNode = React88.useMemo(function() {
        return React88.createElement(Icon, {
          icon: mode !== "horizontal" ? mergedExpandIcon : void 0,
          props: _objectSpread2(_objectSpread2({}, props), {}, {
            isOpen: open,
            // [Legacy] Not sure why need this mark
            isSubMenu: true
          })
        }, React88.createElement("i", {
          className: "".concat(subMenuPrefixCls, "-arrow")
        }));
      }, [mode, mergedExpandIcon, props, open, subMenuPrefixCls]);
      var titleNode = React88.createElement("div", _extends({
        role: "menuitem",
        style: directionStyle,
        className: "".concat(subMenuPrefixCls, "-title"),
        tabIndex: mergedDisabled ? null : -1,
        ref: elementRef,
        title: typeof title === "string" ? title : null,
        "data-menu-id": overflowDisabled && domDataId ? null : domDataId,
        "aria-expanded": open,
        "aria-haspopup": true,
        "aria-controls": popupId,
        "aria-disabled": mergedDisabled,
        onClick: onInternalTitleClick,
        onFocus: onInternalFocus
      }, activeProps), title, expandIconNode);
      var triggerModeRef = React88.useRef(mode);
      if (mode !== "inline" && connectedPath.length > 1) {
        triggerModeRef.current = "vertical";
      } else {
        triggerModeRef.current = mode;
      }
      if (!overflowDisabled) {
        var triggerMode = triggerModeRef.current;
        titleNode = React88.createElement(PopupTrigger, {
          mode: triggerMode,
          prefixCls: subMenuPrefixCls,
          visible: !internalPopupClose && open && mode !== "inline",
          popupClassName,
          popupOffset,
          popupStyle,
          popup: React88.createElement(
            InheritableContextProvider,
            {
              mode: triggerMode === "horizontal" ? "vertical" : triggerMode
            },
            React88.createElement(SubMenuList_default, {
              id: popupId,
              ref: popupRef
            }, children)
          ),
          disabled: mergedDisabled,
          onVisibleChange: onPopupVisibleChange
        }, titleNode);
      }
      var listNode = React88.createElement(es_default3.Item, _extends({
        ref,
        role: "none"
      }, restProps, {
        component: "li",
        style: style2,
        className: (0, import_classnames24.default)(subMenuPrefixCls, "".concat(subMenuPrefixCls, "-").concat(mode), className, _defineProperty(_defineProperty(_defineProperty(_defineProperty({}, "".concat(subMenuPrefixCls, "-open"), open), "".concat(subMenuPrefixCls, "-active"), mergedActive), "".concat(subMenuPrefixCls, "-selected"), childrenSelected), "".concat(subMenuPrefixCls, "-disabled"), mergedDisabled)),
        onMouseEnter: onInternalMouseEnter,
        onMouseLeave: onInternalMouseLeave
      }), titleNode, !overflowDisabled && React88.createElement(InlineSubMenuList, {
        id: popupId,
        open,
        keyPath: connectedPath
      }, children));
      if (_internalRenderSubMenuItem) {
        listNode = _internalRenderSubMenuItem(listNode, props, {
          selected: childrenSelected,
          active: mergedActive,
          open,
          disabled: mergedDisabled
        });
      }
      return React88.createElement(InheritableContextProvider, {
        onItemClick: onMergedItemClick,
        mode: mode === "horizontal" ? "vertical" : mode,
        itemIcon: mergedItemIcon,
        expandIcon: mergedExpandIcon
      }, listNode);
    });
    SubMenu = React88.forwardRef(function(props, ref) {
      var eventKey = props.eventKey, children = props.children;
      var connectedKeyPath = useFullPath(eventKey);
      var childList = parseChildren(children, connectedKeyPath);
      var measure = useMeasure();
      React88.useEffect(function() {
        if (measure) {
          measure.registerPath(eventKey, connectedKeyPath);
          return function() {
            measure.unregisterPath(eventKey, connectedKeyPath);
          };
        }
      }, [connectedKeyPath]);
      var renderNode;
      if (measure) {
        renderNode = childList;
      } else {
        renderNode = React88.createElement(InternalSubMenu, _extends({
          ref
        }, props), childList);
      }
      return React88.createElement(PathTrackerContext.Provider, {
        value: connectedKeyPath
      }, renderNode);
    });
    if (true) {
      SubMenu.displayName = "SubMenu";
    }
    SubMenu_default = SubMenu;
  }
});

// node_modules/rc-menu/es/Divider.js
function Divider(_ref) {
  var className = _ref.className, style2 = _ref.style;
  var _React$useContext = React89.useContext(MenuContext), prefixCls = _React$useContext.prefixCls;
  var measure = useMeasure();
  if (measure) {
    return null;
  }
  return React89.createElement("li", {
    role: "separator",
    className: (0, import_classnames25.default)("".concat(prefixCls, "-item-divider"), className),
    style: style2
  });
}
var React89, import_classnames25;
var init_Divider = __esm({
  "node_modules/rc-menu/es/Divider.js"() {
    React89 = __toESM(require_react());
    import_classnames25 = __toESM(require_classnames());
    init_MenuContext();
    init_PathContext();
  }
});

// node_modules/rc-menu/es/utils/nodeUtil.js
function convertItemsToNodes(list, components, prefixCls) {
  var MergedMenuItem = components.item, MergedMenuItemGroup = components.group, MergedSubMenu = components.submenu, MergedDivider = components.divider;
  return (list || []).map(function(opt, index2) {
    if (opt && _typeof(opt) === "object") {
      var _ref = opt, label = _ref.label, children = _ref.children, key = _ref.key, type = _ref.type, extra = _ref.extra, restProps = _objectWithoutProperties(_ref, _excluded21);
      var mergedKey = key !== null && key !== void 0 ? key : "tmp-".concat(index2);
      if (children || type === "group") {
        if (type === "group") {
          return React90.createElement(MergedMenuItemGroup, _extends({
            key: mergedKey
          }, restProps, {
            title: label
          }), convertItemsToNodes(children, components, prefixCls));
        }
        return React90.createElement(MergedSubMenu, _extends({
          key: mergedKey
        }, restProps, {
          title: label
        }), convertItemsToNodes(children, components, prefixCls));
      }
      if (type === "divider") {
        return React90.createElement(MergedDivider, _extends({
          key: mergedKey
        }, restProps));
      }
      return React90.createElement(MergedMenuItem, _extends({
        key: mergedKey
      }, restProps, {
        extra
      }), label, (!!extra || extra === 0) && React90.createElement("span", {
        className: "".concat(prefixCls, "-item-extra")
      }, extra));
    }
    return null;
  }).filter(function(opt) {
    return opt;
  });
}
function parseItems(children, items, keyPath, components, prefixCls) {
  var childNodes = children;
  var mergedComponents = _objectSpread2({
    divider: Divider,
    item: MenuItem_default,
    group: MenuItemGroup_default,
    submenu: SubMenu_default
  }, components);
  if (items) {
    childNodes = convertItemsToNodes(items, mergedComponents, prefixCls);
  }
  return parseChildren(childNodes, keyPath);
}
var React90, _excluded21;
var init_nodeUtil = __esm({
  "node_modules/rc-menu/es/utils/nodeUtil.js"() {
    init_objectSpread2();
    init_extends();
    init_objectWithoutProperties();
    init_typeof();
    React90 = __toESM(require_react());
    init_Divider();
    init_MenuItem();
    init_MenuItemGroup();
    init_SubMenu();
    init_commonUtil2();
    _excluded21 = ["label", "children", "key", "type", "extra"];
  }
});

// node_modules/rc-menu/es/Menu.js
var import_classnames26, React91, import_react19, import_react_dom5, _excluded27, EMPTY_LIST2, Menu, Menu_default;
var init_Menu = __esm({
  "node_modules/rc-menu/es/Menu.js"() {
    init_extends();
    init_defineProperty();
    init_objectSpread2();
    init_toConsumableArray();
    init_slicedToArray();
    init_objectWithoutProperties();
    import_classnames26 = __toESM(require_classnames());
    init_es5();
    init_useMergedState();
    init_isEqual();
    init_warning();
    React91 = __toESM(require_react());
    import_react19 = __toESM(require_react());
    import_react_dom5 = __toESM(require_react_dom());
    init_IdContext();
    init_MenuContext();
    init_PathContext();
    init_PrivateContext();
    init_useAccessibility();
    init_useKeyRecords();
    init_useMemoCallback();
    init_useUUID();
    init_MenuItem();
    init_SubMenu();
    init_nodeUtil();
    init_warnUtil();
    _excluded27 = ["prefixCls", "rootClassName", "style", "className", "tabIndex", "items", "children", "direction", "id", "mode", "inlineCollapsed", "disabled", "disabledOverflow", "subMenuOpenDelay", "subMenuCloseDelay", "forceSubMenuRender", "defaultOpenKeys", "openKeys", "activeKey", "defaultActiveFirst", "selectable", "multiple", "defaultSelectedKeys", "selectedKeys", "onSelect", "onDeselect", "inlineIndent", "motion", "defaultMotions", "triggerSubMenuAction", "builtinPlacements", "itemIcon", "expandIcon", "overflowedIndicator", "overflowedIndicatorPopupClassName", "getPopupContainer", "onClick", "onOpenChange", "onKeyDown", "openAnimation", "openTransitionName", "_internalRenderMenuItem", "_internalRenderSubMenuItem", "_internalComponents"];
    EMPTY_LIST2 = [];
    Menu = React91.forwardRef(function(props, ref) {
      var _childList$;
      var _ref = props, _ref$prefixCls = _ref.prefixCls, prefixCls = _ref$prefixCls === void 0 ? "rc-menu" : _ref$prefixCls, rootClassName = _ref.rootClassName, style2 = _ref.style, className = _ref.className, _ref$tabIndex = _ref.tabIndex, tabIndex = _ref$tabIndex === void 0 ? 0 : _ref$tabIndex, items = _ref.items, children = _ref.children, direction = _ref.direction, id = _ref.id, _ref$mode = _ref.mode, mode = _ref$mode === void 0 ? "vertical" : _ref$mode, inlineCollapsed = _ref.inlineCollapsed, disabled = _ref.disabled, disabledOverflow = _ref.disabledOverflow, _ref$subMenuOpenDelay = _ref.subMenuOpenDelay, subMenuOpenDelay = _ref$subMenuOpenDelay === void 0 ? 0.1 : _ref$subMenuOpenDelay, _ref$subMenuCloseDela = _ref.subMenuCloseDelay, subMenuCloseDelay = _ref$subMenuCloseDela === void 0 ? 0.1 : _ref$subMenuCloseDela, forceSubMenuRender = _ref.forceSubMenuRender, defaultOpenKeys = _ref.defaultOpenKeys, openKeys = _ref.openKeys, activeKey = _ref.activeKey, defaultActiveFirst = _ref.defaultActiveFirst, _ref$selectable = _ref.selectable, selectable = _ref$selectable === void 0 ? true : _ref$selectable, _ref$multiple = _ref.multiple, multiple = _ref$multiple === void 0 ? false : _ref$multiple, defaultSelectedKeys = _ref.defaultSelectedKeys, selectedKeys = _ref.selectedKeys, onSelect = _ref.onSelect, onDeselect = _ref.onDeselect, _ref$inlineIndent = _ref.inlineIndent, inlineIndent = _ref$inlineIndent === void 0 ? 24 : _ref$inlineIndent, motion = _ref.motion, defaultMotions = _ref.defaultMotions, _ref$triggerSubMenuAc = _ref.triggerSubMenuAction, triggerSubMenuAction = _ref$triggerSubMenuAc === void 0 ? "hover" : _ref$triggerSubMenuAc, builtinPlacements = _ref.builtinPlacements, itemIcon = _ref.itemIcon, expandIcon = _ref.expandIcon, _ref$overflowedIndica = _ref.overflowedIndicator, overflowedIndicator = _ref$overflowedIndica === void 0 ? "..." : _ref$overflowedIndica, overflowedIndicatorPopupClassName = _ref.overflowedIndicatorPopupClassName, getPopupContainer = _ref.getPopupContainer, onClick = _ref.onClick, onOpenChange = _ref.onOpenChange, onKeyDown = _ref.onKeyDown, openAnimation = _ref.openAnimation, openTransitionName = _ref.openTransitionName, _internalRenderMenuItem = _ref._internalRenderMenuItem, _internalRenderSubMenuItem = _ref._internalRenderSubMenuItem, _internalComponents = _ref._internalComponents, restProps = _objectWithoutProperties(_ref, _excluded27);
      var _React$useMemo = React91.useMemo(function() {
        return [parseItems(children, items, EMPTY_LIST2, _internalComponents, prefixCls), parseItems(children, items, EMPTY_LIST2, {}, prefixCls)];
      }, [children, items, _internalComponents]), _React$useMemo2 = _slicedToArray(_React$useMemo, 2), childList = _React$useMemo2[0], measureChildList = _React$useMemo2[1];
      var _React$useState = React91.useState(false), _React$useState2 = _slicedToArray(_React$useState, 2), mounted = _React$useState2[0], setMounted = _React$useState2[1];
      var containerRef = React91.useRef();
      var uuid4 = useUUID(id);
      var isRtl = direction === "rtl";
      if (true) {
        warning_default(!openAnimation && !openTransitionName, "`openAnimation` and `openTransitionName` is removed. Please use `motion` or `defaultMotion` instead.");
      }
      var _useMergedState = useMergedState(defaultOpenKeys, {
        value: openKeys,
        postState: function postState(keys) {
          return keys || EMPTY_LIST2;
        }
      }), _useMergedState2 = _slicedToArray(_useMergedState, 2), mergedOpenKeys = _useMergedState2[0], setMergedOpenKeys = _useMergedState2[1];
      var triggerOpenKeys = function triggerOpenKeys2(keys) {
        var forceFlush = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
        function doUpdate() {
          setMergedOpenKeys(keys);
          onOpenChange === null || onOpenChange === void 0 || onOpenChange(keys);
        }
        if (forceFlush) {
          (0, import_react_dom5.flushSync)(doUpdate);
        } else {
          doUpdate();
        }
      };
      var _React$useState3 = React91.useState(mergedOpenKeys), _React$useState4 = _slicedToArray(_React$useState3, 2), inlineCacheOpenKeys = _React$useState4[0], setInlineCacheOpenKeys = _React$useState4[1];
      var mountRef = React91.useRef(false);
      var _React$useMemo3 = React91.useMemo(function() {
        if ((mode === "inline" || mode === "vertical") && inlineCollapsed) {
          return ["vertical", inlineCollapsed];
        }
        return [mode, false];
      }, [mode, inlineCollapsed]), _React$useMemo4 = _slicedToArray(_React$useMemo3, 2), mergedMode = _React$useMemo4[0], mergedInlineCollapsed = _React$useMemo4[1];
      var isInlineMode = mergedMode === "inline";
      var _React$useState5 = React91.useState(mergedMode), _React$useState6 = _slicedToArray(_React$useState5, 2), internalMode = _React$useState6[0], setInternalMode = _React$useState6[1];
      var _React$useState7 = React91.useState(mergedInlineCollapsed), _React$useState8 = _slicedToArray(_React$useState7, 2), internalInlineCollapsed = _React$useState8[0], setInternalInlineCollapsed = _React$useState8[1];
      React91.useEffect(function() {
        setInternalMode(mergedMode);
        setInternalInlineCollapsed(mergedInlineCollapsed);
        if (!mountRef.current) {
          return;
        }
        if (isInlineMode) {
          setMergedOpenKeys(inlineCacheOpenKeys);
        } else {
          triggerOpenKeys(EMPTY_LIST2);
        }
      }, [mergedMode, mergedInlineCollapsed]);
      var _React$useState9 = React91.useState(0), _React$useState10 = _slicedToArray(_React$useState9, 2), lastVisibleIndex = _React$useState10[0], setLastVisibleIndex = _React$useState10[1];
      var allVisible = lastVisibleIndex >= childList.length - 1 || internalMode !== "horizontal" || disabledOverflow;
      React91.useEffect(function() {
        if (isInlineMode) {
          setInlineCacheOpenKeys(mergedOpenKeys);
        }
      }, [mergedOpenKeys]);
      React91.useEffect(function() {
        mountRef.current = true;
        return function() {
          mountRef.current = false;
        };
      }, []);
      var _useKeyRecords = useKeyRecords(), registerPath = _useKeyRecords.registerPath, unregisterPath = _useKeyRecords.unregisterPath, refreshOverflowKeys = _useKeyRecords.refreshOverflowKeys, isSubPathKey = _useKeyRecords.isSubPathKey, getKeyPath = _useKeyRecords.getKeyPath, getKeys = _useKeyRecords.getKeys, getSubPathKeys = _useKeyRecords.getSubPathKeys;
      var registerPathContext = React91.useMemo(function() {
        return {
          registerPath,
          unregisterPath
        };
      }, [registerPath, unregisterPath]);
      var pathUserContext = React91.useMemo(function() {
        return {
          isSubPathKey
        };
      }, [isSubPathKey]);
      React91.useEffect(function() {
        refreshOverflowKeys(allVisible ? EMPTY_LIST2 : childList.slice(lastVisibleIndex + 1).map(function(child) {
          return child.key;
        }));
      }, [lastVisibleIndex, allVisible]);
      var _useMergedState3 = useMergedState(activeKey || defaultActiveFirst && ((_childList$ = childList[0]) === null || _childList$ === void 0 ? void 0 : _childList$.key), {
        value: activeKey
      }), _useMergedState4 = _slicedToArray(_useMergedState3, 2), mergedActiveKey = _useMergedState4[0], setMergedActiveKey = _useMergedState4[1];
      var onActive = useMemoCallback(function(key) {
        setMergedActiveKey(key);
      });
      var onInactive = useMemoCallback(function() {
        setMergedActiveKey(void 0);
      });
      (0, import_react19.useImperativeHandle)(ref, function() {
        return {
          list: containerRef.current,
          focus: function focus(options) {
            var _childList$find;
            var keys = getKeys();
            var _refreshElements = refreshElements(keys, uuid4), elements = _refreshElements.elements, key2element = _refreshElements.key2element, element2key = _refreshElements.element2key;
            var focusableElements = getFocusableElements(containerRef.current, elements);
            var shouldFocusKey = mergedActiveKey !== null && mergedActiveKey !== void 0 ? mergedActiveKey : focusableElements[0] ? element2key.get(focusableElements[0]) : (_childList$find = childList.find(function(node) {
              return !node.props.disabled;
            })) === null || _childList$find === void 0 ? void 0 : _childList$find.key;
            var elementToFocus = key2element.get(shouldFocusKey);
            if (shouldFocusKey && elementToFocus) {
              var _elementToFocus$focus;
              elementToFocus === null || elementToFocus === void 0 || (_elementToFocus$focus = elementToFocus.focus) === null || _elementToFocus$focus === void 0 || _elementToFocus$focus.call(elementToFocus, options);
            }
          }
        };
      });
      var _useMergedState5 = useMergedState(defaultSelectedKeys || [], {
        value: selectedKeys,
        // Legacy convert key to array
        postState: function postState(keys) {
          if (Array.isArray(keys)) {
            return keys;
          }
          if (keys === null || keys === void 0) {
            return EMPTY_LIST2;
          }
          return [keys];
        }
      }), _useMergedState6 = _slicedToArray(_useMergedState5, 2), mergedSelectKeys = _useMergedState6[0], setMergedSelectKeys = _useMergedState6[1];
      var triggerSelection = function triggerSelection2(info) {
        if (selectable) {
          var targetKey = info.key;
          var exist = mergedSelectKeys.includes(targetKey);
          var newSelectKeys;
          if (multiple) {
            if (exist) {
              newSelectKeys = mergedSelectKeys.filter(function(key) {
                return key !== targetKey;
              });
            } else {
              newSelectKeys = [].concat(_toConsumableArray(mergedSelectKeys), [targetKey]);
            }
          } else {
            newSelectKeys = [targetKey];
          }
          setMergedSelectKeys(newSelectKeys);
          var selectInfo = _objectSpread2(_objectSpread2({}, info), {}, {
            selectedKeys: newSelectKeys
          });
          if (exist) {
            onDeselect === null || onDeselect === void 0 || onDeselect(selectInfo);
          } else {
            onSelect === null || onSelect === void 0 || onSelect(selectInfo);
          }
        }
        if (!multiple && mergedOpenKeys.length && internalMode !== "inline") {
          triggerOpenKeys(EMPTY_LIST2);
        }
      };
      var onInternalClick = useMemoCallback(function(info) {
        onClick === null || onClick === void 0 || onClick(warnItemProp(info));
        triggerSelection(info);
      });
      var onInternalOpenChange = useMemoCallback(function(key, open) {
        var newOpenKeys = mergedOpenKeys.filter(function(k) {
          return k !== key;
        });
        if (open) {
          newOpenKeys.push(key);
        } else if (internalMode !== "inline") {
          var subPathKeys = getSubPathKeys(key);
          newOpenKeys = newOpenKeys.filter(function(k) {
            return !subPathKeys.has(k);
          });
        }
        if (!isEqual_default(mergedOpenKeys, newOpenKeys, true)) {
          triggerOpenKeys(newOpenKeys, true);
        }
      });
      var triggerAccessibilityOpen = function triggerAccessibilityOpen2(key, open) {
        var nextOpen = open !== null && open !== void 0 ? open : !mergedOpenKeys.includes(key);
        onInternalOpenChange(key, nextOpen);
      };
      var onInternalKeyDown = useAccessibility(internalMode, mergedActiveKey, isRtl, uuid4, containerRef, getKeys, getKeyPath, setMergedActiveKey, triggerAccessibilityOpen, onKeyDown);
      React91.useEffect(function() {
        setMounted(true);
      }, []);
      var privateContext = React91.useMemo(function() {
        return {
          _internalRenderMenuItem,
          _internalRenderSubMenuItem
        };
      }, [_internalRenderMenuItem, _internalRenderSubMenuItem]);
      var wrappedChildList = internalMode !== "horizontal" || disabledOverflow ? childList : (
        // Need wrap for overflow dropdown that do not response for open
        childList.map(function(child, index2) {
          return (
            // Always wrap provider to avoid sub node re-mount
            React91.createElement(InheritableContextProvider, {
              key: child.key,
              overflowDisabled: index2 > lastVisibleIndex
            }, child)
          );
        })
      );
      var container = React91.createElement(es_default3, _extends({
        id,
        ref: containerRef,
        prefixCls: "".concat(prefixCls, "-overflow"),
        component: "ul",
        itemComponent: MenuItem_default,
        className: (0, import_classnames26.default)(prefixCls, "".concat(prefixCls, "-root"), "".concat(prefixCls, "-").concat(internalMode), className, _defineProperty(_defineProperty({}, "".concat(prefixCls, "-inline-collapsed"), internalInlineCollapsed), "".concat(prefixCls, "-rtl"), isRtl), rootClassName),
        dir: direction,
        style: style2,
        role: "menu",
        tabIndex,
        data: wrappedChildList,
        renderRawItem: function renderRawItem(node) {
          return node;
        },
        renderRawRest: function renderRawRest(omitItems) {
          var len = omitItems.length;
          var originOmitItems = len ? childList.slice(-len) : null;
          return React91.createElement(SubMenu_default, {
            eventKey: OVERFLOW_KEY,
            title: overflowedIndicator,
            disabled: allVisible,
            internalPopupClose: len === 0,
            popupClassName: overflowedIndicatorPopupClassName
          }, originOmitItems);
        },
        maxCount: internalMode !== "horizontal" || disabledOverflow ? es_default3.INVALIDATE : es_default3.RESPONSIVE,
        ssr: "full",
        "data-menu-list": true,
        onVisibleChange: function onVisibleChange(newLastIndex) {
          setLastVisibleIndex(newLastIndex);
        },
        onKeyDown: onInternalKeyDown
      }, restProps));
      return React91.createElement(PrivateContext_default.Provider, {
        value: privateContext
      }, React91.createElement(IdContext.Provider, {
        value: uuid4
      }, React91.createElement(InheritableContextProvider, {
        prefixCls,
        rootClassName,
        mode: internalMode,
        openKeys: mergedOpenKeys,
        rtl: isRtl,
        disabled,
        motion: mounted ? motion : null,
        defaultMotions: mounted ? defaultMotions : null,
        activeKey: mergedActiveKey,
        onActive,
        onInactive,
        selectedKeys: mergedSelectKeys,
        inlineIndent,
        subMenuOpenDelay,
        subMenuCloseDelay,
        forceSubMenuRender,
        builtinPlacements,
        triggerSubMenuAction,
        getPopupContainer,
        itemIcon,
        expandIcon,
        onItemClick: onInternalClick,
        onOpenChange: onInternalOpenChange
      }, React91.createElement(PathUserContext.Provider, {
        value: pathUserContext
      }, container), React91.createElement("div", {
        style: {
          display: "none"
        },
        "aria-hidden": true
      }, React91.createElement(PathRegisterContext.Provider, {
        value: registerPathContext
      }, measureChildList)))));
    });
    Menu_default = Menu;
  }
});

// node_modules/rc-menu/es/index.js
var es_exports5 = {};
__export(es_exports5, {
  Divider: () => Divider,
  Item: () => MenuItem_default,
  ItemGroup: () => MenuItemGroup_default,
  MenuItem: () => MenuItem_default,
  MenuItemGroup: () => MenuItemGroup_default,
  SubMenu: () => SubMenu_default,
  default: () => es_default9,
  useFullPath: () => useFullPath
});
var ExportMenu, es_default9;
var init_es11 = __esm({
  "node_modules/rc-menu/es/index.js"() {
    init_Menu();
    init_MenuItem();
    init_SubMenu();
    init_MenuItemGroup();
    init_PathContext();
    init_Divider();
    ExportMenu = Menu_default;
    ExportMenu.Item = MenuItem_default;
    ExportMenu.SubMenu = SubMenu_default;
    ExportMenu.ItemGroup = MenuItemGroup_default;
    ExportMenu.Divider = Divider;
    es_default9 = ExportMenu;
  }
});

// node_modules/throttle-debounce/esm/index.js
function throttle2(delay, callback, options) {
  var _ref = options || {}, _ref$noTrailing = _ref.noTrailing, noTrailing = _ref$noTrailing === void 0 ? false : _ref$noTrailing, _ref$noLeading = _ref.noLeading, noLeading = _ref$noLeading === void 0 ? false : _ref$noLeading, _ref$debounceMode = _ref.debounceMode, debounceMode = _ref$debounceMode === void 0 ? void 0 : _ref$debounceMode;
  var timeoutID;
  var cancelled = false;
  var lastExec = 0;
  function clearExistingTimeout() {
    if (timeoutID) {
      clearTimeout(timeoutID);
    }
  }
  function cancel(options2) {
    var _ref2 = options2 || {}, _ref2$upcomingOnly = _ref2.upcomingOnly, upcomingOnly = _ref2$upcomingOnly === void 0 ? false : _ref2$upcomingOnly;
    clearExistingTimeout();
    cancelled = !upcomingOnly;
  }
  function wrapper() {
    for (var _len = arguments.length, arguments_ = new Array(_len), _key = 0; _key < _len; _key++) {
      arguments_[_key] = arguments[_key];
    }
    var self2 = this;
    var elapsed = Date.now() - lastExec;
    if (cancelled) {
      return;
    }
    function exec() {
      lastExec = Date.now();
      callback.apply(self2, arguments_);
    }
    function clear() {
      timeoutID = void 0;
    }
    if (!noLeading && debounceMode && !timeoutID) {
      exec();
    }
    clearExistingTimeout();
    if (debounceMode === void 0 && elapsed > delay) {
      if (noLeading) {
        lastExec = Date.now();
        if (!noTrailing) {
          timeoutID = setTimeout(debounceMode ? clear : exec, delay);
        }
      } else {
        exec();
      }
    } else if (noTrailing !== true) {
      timeoutID = setTimeout(debounceMode ? clear : exec, debounceMode === void 0 ? delay - elapsed : delay);
    }
  }
  wrapper.cancel = cancel;
  return wrapper;
}
function debounce(delay, callback, options) {
  var _ref = options || {}, _ref$atBegin = _ref.atBegin, atBegin = _ref$atBegin === void 0 ? false : _ref$atBegin;
  return throttle2(delay, callback, {
    debounceMode: atBegin !== false
  });
}
var init_esm = __esm({
  "node_modules/throttle-debounce/esm/index.js"() {
  }
});

// node_modules/rc-table/es/constant.js
var EXPAND_COLUMN, INTERNAL_HOOKS;
var init_constant = __esm({
  "node_modules/rc-table/es/constant.js"() {
    EXPAND_COLUMN = {};
    INTERNAL_HOOKS = "rc-table-internal-hook";
  }
});

// node_modules/@rc-component/context/es/context.js
function createContext12(defaultValue) {
  var Context2 = React92.createContext(void 0);
  var Provider = function Provider2(_ref) {
    var value = _ref.value, children = _ref.children;
    var valueRef = React92.useRef(value);
    valueRef.current = value;
    var _React$useState = React92.useState(function() {
      return {
        getValue: function getValue() {
          return valueRef.current;
        },
        listeners: /* @__PURE__ */ new Set()
      };
    }), _React$useState2 = _slicedToArray(_React$useState, 1), context = _React$useState2[0];
    useLayoutEffect_default(function() {
      (0, import_react_dom6.unstable_batchedUpdates)(function() {
        context.listeners.forEach(function(listener) {
          listener(value);
        });
      });
    }, [value]);
    return React92.createElement(Context2.Provider, {
      value: context
    }, children);
  };
  return {
    Context: Context2,
    Provider,
    defaultValue
  };
}
function useContext23(holder, selector) {
  var eventSelector = useEvent(typeof selector === "function" ? selector : function(ctx) {
    if (selector === void 0) {
      return ctx;
    }
    if (!Array.isArray(selector)) {
      return ctx[selector];
    }
    var obj = {};
    selector.forEach(function(key) {
      obj[key] = ctx[key];
    });
    return obj;
  });
  var context = React92.useContext(holder === null || holder === void 0 ? void 0 : holder.Context);
  var _ref2 = context || {}, listeners = _ref2.listeners, getValue = _ref2.getValue;
  var valueRef = React92.useRef();
  valueRef.current = eventSelector(context ? getValue() : holder === null || holder === void 0 ? void 0 : holder.defaultValue);
  var _React$useState3 = React92.useState({}), _React$useState4 = _slicedToArray(_React$useState3, 2), forceUpdate = _React$useState4[1];
  useLayoutEffect_default(function() {
    if (!context) {
      return;
    }
    function trigger(nextValue) {
      var nextSelectorValue = eventSelector(nextValue);
      if (!isEqual_default(valueRef.current, nextSelectorValue, true)) {
        forceUpdate({});
      }
    }
    listeners.add(trigger);
    return function() {
      listeners.delete(trigger);
    };
  }, [context]);
  return valueRef.current;
}
var React92, import_react_dom6;
var init_context4 = __esm({
  "node_modules/@rc-component/context/es/context.js"() {
    init_slicedToArray();
    init_useEvent();
    init_useLayoutEffect();
    init_isEqual();
    React92 = __toESM(require_react());
    import_react_dom6 = __toESM(require_react_dom());
  }
});

// node_modules/@rc-component/context/es/Immutable.js
function createImmutable() {
  var ImmutableContext = React93.createContext(null);
  function useImmutableMark3() {
    return React93.useContext(ImmutableContext);
  }
  function makeImmutable3(Component6, shouldTriggerRender) {
    var refAble = supportRef(Component6);
    var ImmutableComponent = function ImmutableComponent2(props, ref) {
      var refProps = refAble ? {
        ref
      } : {};
      var renderTimesRef = React93.useRef(0);
      var prevProps = React93.useRef(props);
      var mark = useImmutableMark3();
      if (mark !== null) {
        return React93.createElement(Component6, _extends({}, props, refProps));
      }
      if (
        // Always trigger re-render if not provide `notTriggerRender`
        !shouldTriggerRender || shouldTriggerRender(prevProps.current, props)
      ) {
        renderTimesRef.current += 1;
      }
      prevProps.current = props;
      return React93.createElement(ImmutableContext.Provider, {
        value: renderTimesRef.current
      }, React93.createElement(Component6, _extends({}, props, refProps)));
    };
    if (true) {
      ImmutableComponent.displayName = "ImmutableRoot(".concat(Component6.displayName || Component6.name, ")");
    }
    return refAble ? React93.forwardRef(ImmutableComponent) : ImmutableComponent;
  }
  function responseImmutable3(Component6, propsAreEqual) {
    var refAble = supportRef(Component6);
    var ImmutableComponent = function ImmutableComponent2(props, ref) {
      var refProps = refAble ? {
        ref
      } : {};
      useImmutableMark3();
      return React93.createElement(Component6, _extends({}, props, refProps));
    };
    if (true) {
      ImmutableComponent.displayName = "ImmutableResponse(".concat(Component6.displayName || Component6.name, ")");
    }
    return refAble ? React93.memo(React93.forwardRef(ImmutableComponent), propsAreEqual) : React93.memo(ImmutableComponent, propsAreEqual);
  }
  return {
    makeImmutable: makeImmutable3,
    responseImmutable: responseImmutable3,
    useImmutableMark: useImmutableMark3
  };
}
var React93;
var init_Immutable = __esm({
  "node_modules/@rc-component/context/es/Immutable.js"() {
    init_extends();
    init_ref();
    React93 = __toESM(require_react());
  }
});

// node_modules/@rc-component/context/es/index.js
var _createImmutable, makeImmutable, responseImmutable, useImmutableMark;
var init_es12 = __esm({
  "node_modules/@rc-component/context/es/index.js"() {
    init_context4();
    init_Immutable();
    _createImmutable = createImmutable();
    makeImmutable = _createImmutable.makeImmutable;
    responseImmutable = _createImmutable.responseImmutable;
    useImmutableMark = _createImmutable.useImmutableMark;
  }
});

// node_modules/rc-table/es/context/TableContext.js
var _createImmutable2, makeImmutable2, responseImmutable2, useImmutableMark2, TableContext, TableContext_default;
var init_TableContext = __esm({
  "node_modules/rc-table/es/context/TableContext.js"() {
    init_es12();
    _createImmutable2 = createImmutable();
    makeImmutable2 = _createImmutable2.makeImmutable;
    responseImmutable2 = _createImmutable2.responseImmutable;
    useImmutableMark2 = _createImmutable2.useImmutableMark;
    TableContext = createContext12();
    TableContext_default = TableContext;
  }
});

// node_modules/rc-table/es/hooks/useRenderTimes.js
function useRenderTimes(props, debug) {
  var timesRef = React94.useRef(0);
  timesRef.current += 1;
  var propsRef = React94.useRef(props);
  var keys = [];
  Object.keys(props || {}).map(function(key) {
    var _propsRef$current;
    if ((props === null || props === void 0 ? void 0 : props[key]) !== ((_propsRef$current = propsRef.current) === null || _propsRef$current === void 0 ? void 0 : _propsRef$current[key])) {
      keys.push(key);
    }
  });
  propsRef.current = props;
  var keysRef = React94.useRef([]);
  if (keys.length) {
    keysRef.current = keys;
  }
  React94.useDebugValue(timesRef.current);
  React94.useDebugValue(keysRef.current.join(", "));
  if (debug) {
    console.log("".concat(debug, ":"), timesRef.current, keysRef.current);
  }
  return timesRef.current;
}
var React94, useRenderTimes_default, RenderBlock;
var init_useRenderTimes = __esm({
  "node_modules/rc-table/es/hooks/useRenderTimes.js"() {
    React94 = __toESM(require_react());
    useRenderTimes_default = true ? useRenderTimes : function() {
    };
    RenderBlock = React94.memo(function() {
      var times = useRenderTimes();
      return React94.createElement("h1", null, "Render Times: ", times);
    });
    if (true) {
      RenderBlock.displayName = "RenderBlock";
    }
  }
});

// node_modules/rc-table/es/context/PerfContext.js
var React95, PerfContext, PerfContext_default;
var init_PerfContext = __esm({
  "node_modules/rc-table/es/context/PerfContext.js"() {
    React95 = __toESM(require_react());
    PerfContext = React95.createContext({
      renderWithProps: false
    });
    PerfContext_default = PerfContext;
  }
});

// node_modules/rc-table/es/utils/valueUtil.js
function toArray4(arr) {
  if (arr === void 0 || arr === null) {
    return [];
  }
  return Array.isArray(arr) ? arr : [arr];
}
function getColumnsKey(columns) {
  var columnKeys = [];
  var keys = {};
  columns.forEach(function(column) {
    var _ref = column || {}, key = _ref.key, dataIndex = _ref.dataIndex;
    var mergedKey = key || toArray4(dataIndex).join("-") || INTERNAL_KEY_PREFIX;
    while (keys[mergedKey]) {
      mergedKey = "".concat(mergedKey, "_next");
    }
    keys[mergedKey] = true;
    columnKeys.push(mergedKey);
  });
  return columnKeys;
}
function validateValue(val) {
  return val !== null && val !== void 0;
}
function validNumberValue(value) {
  return typeof value === "number" && !Number.isNaN(value);
}
var INTERNAL_KEY_PREFIX;
var init_valueUtil2 = __esm({
  "node_modules/rc-table/es/utils/valueUtil.js"() {
    INTERNAL_KEY_PREFIX = "RC_TABLE_KEY";
  }
});

// node_modules/rc-table/es/Cell/useCellRender.js
function isRenderCell(data) {
  return data && _typeof(data) === "object" && !Array.isArray(data) && !React96.isValidElement(data);
}
function useCellRender(record, dataIndex, renderIndex, children, render, shouldCellUpdate) {
  var perfRecord = React96.useContext(PerfContext_default);
  var mark = useImmutableMark2();
  var retData = useMemo(function() {
    if (validateValue(children)) {
      return [children];
    }
    var path = dataIndex === null || dataIndex === void 0 || dataIndex === "" ? [] : Array.isArray(dataIndex) ? dataIndex : [dataIndex];
    var value = get(record, path);
    var returnChildNode = value;
    var returnCellProps = void 0;
    if (render) {
      var renderData = render(value, record, renderIndex);
      if (isRenderCell(renderData)) {
        if (true) {
          warning_default(false, "`columns.render` return cell props is deprecated with perf issue, please use `onCell` instead.");
        }
        returnChildNode = renderData.children;
        returnCellProps = renderData.props;
        perfRecord.renderWithProps = true;
      } else {
        returnChildNode = renderData;
      }
    }
    return [returnChildNode, returnCellProps];
  }, [
    // Force update deps
    mark,
    // Normal deps
    record,
    children,
    dataIndex,
    render,
    renderIndex
  ], function(prev, next) {
    if (shouldCellUpdate) {
      var _prev = _slicedToArray(prev, 2), prevRecord = _prev[1];
      var _next = _slicedToArray(next, 2), nextRecord = _next[1];
      return shouldCellUpdate(nextRecord, prevRecord);
    }
    if (perfRecord.renderWithProps) {
      return true;
    }
    return !isEqual_default(prev, next, true);
  });
  return retData;
}
var React96;
var init_useCellRender = __esm({
  "node_modules/rc-table/es/Cell/useCellRender.js"() {
    init_slicedToArray();
    init_typeof();
    init_useMemo();
    init_isEqual();
    init_get();
    init_warning();
    React96 = __toESM(require_react());
    init_PerfContext();
    init_valueUtil2();
    init_TableContext();
  }
});

// node_modules/rc-table/es/Cell/useHoverState.js
function inHoverRange(cellStartRow, cellRowSpan, startRow, endRow) {
  var cellEndRow = cellStartRow + cellRowSpan - 1;
  return cellStartRow <= endRow && cellEndRow >= startRow;
}
function useHoverState(rowIndex, rowSpan) {
  return useContext23(TableContext_default, function(ctx) {
    var hovering = inHoverRange(rowIndex, rowSpan || 1, ctx.hoverStartRow, ctx.hoverEndRow);
    return [hovering, ctx.onHover];
  });
}
var init_useHoverState = __esm({
  "node_modules/rc-table/es/Cell/useHoverState.js"() {
    init_es12();
    init_TableContext();
  }
});

// node_modules/rc-table/es/Cell/index.js
function Cell(props) {
  var _ref2, _ref3, _legacyCellProps$colS, _ref4, _ref5, _legacyCellProps$rowS, _additionalProps$titl, _classNames;
  if (true) {
    useRenderTimes_default(props);
  }
  var Component6 = props.component, children = props.children, ellipsis = props.ellipsis, scope = props.scope, prefixCls = props.prefixCls, className = props.className, align = props.align, record = props.record, render = props.render, dataIndex = props.dataIndex, renderIndex = props.renderIndex, shouldCellUpdate = props.shouldCellUpdate, index2 = props.index, rowType = props.rowType, colSpan = props.colSpan, rowSpan = props.rowSpan, fixLeft = props.fixLeft, fixRight = props.fixRight, firstFixLeft = props.firstFixLeft, lastFixLeft = props.lastFixLeft, firstFixRight = props.firstFixRight, lastFixRight = props.lastFixRight, appendNode = props.appendNode, _props$additionalProp = props.additionalProps, additionalProps = _props$additionalProp === void 0 ? {} : _props$additionalProp, isSticky = props.isSticky;
  var cellPrefixCls = "".concat(prefixCls, "-cell");
  var _useContext = useContext23(TableContext_default, ["supportSticky", "allColumnsFixedLeft", "rowHoverable"]), supportSticky = _useContext.supportSticky, allColumnsFixedLeft = _useContext.allColumnsFixedLeft, rowHoverable = _useContext.rowHoverable;
  var _useCellRender = useCellRender(record, dataIndex, renderIndex, children, render, shouldCellUpdate), _useCellRender2 = _slicedToArray(_useCellRender, 2), childNode = _useCellRender2[0], legacyCellProps = _useCellRender2[1];
  var fixedStyle = {};
  var isFixLeft = typeof fixLeft === "number" && supportSticky;
  var isFixRight = typeof fixRight === "number" && supportSticky;
  if (isFixLeft) {
    fixedStyle.position = "sticky";
    fixedStyle.left = fixLeft;
  }
  if (isFixRight) {
    fixedStyle.position = "sticky";
    fixedStyle.right = fixRight;
  }
  var mergedColSpan = (_ref2 = (_ref3 = (_legacyCellProps$colS = legacyCellProps === null || legacyCellProps === void 0 ? void 0 : legacyCellProps.colSpan) !== null && _legacyCellProps$colS !== void 0 ? _legacyCellProps$colS : additionalProps.colSpan) !== null && _ref3 !== void 0 ? _ref3 : colSpan) !== null && _ref2 !== void 0 ? _ref2 : 1;
  var mergedRowSpan = (_ref4 = (_ref5 = (_legacyCellProps$rowS = legacyCellProps === null || legacyCellProps === void 0 ? void 0 : legacyCellProps.rowSpan) !== null && _legacyCellProps$rowS !== void 0 ? _legacyCellProps$rowS : additionalProps.rowSpan) !== null && _ref5 !== void 0 ? _ref5 : rowSpan) !== null && _ref4 !== void 0 ? _ref4 : 1;
  var _useHoverState = useHoverState(index2, mergedRowSpan), _useHoverState2 = _slicedToArray(_useHoverState, 2), hovering = _useHoverState2[0], onHover = _useHoverState2[1];
  var onMouseEnter = useEvent(function(event) {
    var _additionalProps$onMo;
    if (record) {
      onHover(index2, index2 + mergedRowSpan - 1);
    }
    additionalProps === null || additionalProps === void 0 || (_additionalProps$onMo = additionalProps.onMouseEnter) === null || _additionalProps$onMo === void 0 || _additionalProps$onMo.call(additionalProps, event);
  });
  var onMouseLeave = useEvent(function(event) {
    var _additionalProps$onMo2;
    if (record) {
      onHover(-1, -1);
    }
    additionalProps === null || additionalProps === void 0 || (_additionalProps$onMo2 = additionalProps.onMouseLeave) === null || _additionalProps$onMo2 === void 0 || _additionalProps$onMo2.call(additionalProps, event);
  });
  if (mergedColSpan === 0 || mergedRowSpan === 0) {
    return null;
  }
  var title = (_additionalProps$titl = additionalProps.title) !== null && _additionalProps$titl !== void 0 ? _additionalProps$titl : getTitleFromCellRenderChildren({
    rowType,
    ellipsis,
    children: childNode
  });
  var mergedClassName = (0, import_classnames27.default)(cellPrefixCls, className, (_classNames = {}, _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_classNames, "".concat(cellPrefixCls, "-fix-left"), isFixLeft && supportSticky), "".concat(cellPrefixCls, "-fix-left-first"), firstFixLeft && supportSticky), "".concat(cellPrefixCls, "-fix-left-last"), lastFixLeft && supportSticky), "".concat(cellPrefixCls, "-fix-left-all"), lastFixLeft && allColumnsFixedLeft && supportSticky), "".concat(cellPrefixCls, "-fix-right"), isFixRight && supportSticky), "".concat(cellPrefixCls, "-fix-right-first"), firstFixRight && supportSticky), "".concat(cellPrefixCls, "-fix-right-last"), lastFixRight && supportSticky), "".concat(cellPrefixCls, "-ellipsis"), ellipsis), "".concat(cellPrefixCls, "-with-append"), appendNode), "".concat(cellPrefixCls, "-fix-sticky"), (isFixLeft || isFixRight) && isSticky && supportSticky), _defineProperty(_classNames, "".concat(cellPrefixCls, "-row-hover"), !legacyCellProps && hovering)), additionalProps.className, legacyCellProps === null || legacyCellProps === void 0 ? void 0 : legacyCellProps.className);
  var alignStyle = {};
  if (align) {
    alignStyle.textAlign = align;
  }
  var mergedStyle = _objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2({}, legacyCellProps === null || legacyCellProps === void 0 ? void 0 : legacyCellProps.style), fixedStyle), alignStyle), additionalProps.style);
  var mergedChildNode = childNode;
  if (_typeof(mergedChildNode) === "object" && !Array.isArray(mergedChildNode) && !React97.isValidElement(mergedChildNode)) {
    mergedChildNode = null;
  }
  if (ellipsis && (lastFixLeft || firstFixRight)) {
    mergedChildNode = React97.createElement("span", {
      className: "".concat(cellPrefixCls, "-content")
    }, mergedChildNode);
  }
  return React97.createElement(Component6, _extends({}, legacyCellProps, additionalProps, {
    className: mergedClassName,
    style: mergedStyle,
    title,
    scope,
    onMouseEnter: rowHoverable ? onMouseEnter : void 0,
    onMouseLeave: rowHoverable ? onMouseLeave : void 0,
    colSpan: mergedColSpan !== 1 ? mergedColSpan : null,
    rowSpan: mergedRowSpan !== 1 ? mergedRowSpan : null
  }), appendNode, mergedChildNode);
}
var import_classnames27, React97, getTitleFromCellRenderChildren, Cell_default;
var init_Cell = __esm({
  "node_modules/rc-table/es/Cell/index.js"() {
    init_extends();
    init_typeof();
    init_objectSpread2();
    init_defineProperty();
    init_slicedToArray();
    init_es12();
    import_classnames27 = __toESM(require_classnames());
    React97 = __toESM(require_react());
    init_TableContext();
    init_useRenderTimes();
    init_useCellRender();
    init_useHoverState();
    init_es2();
    getTitleFromCellRenderChildren = function getTitleFromCellRenderChildren2(_ref) {
      var ellipsis = _ref.ellipsis, rowType = _ref.rowType, children = _ref.children;
      var title;
      var ellipsisConfig = ellipsis === true ? {
        showTitle: true
      } : ellipsis;
      if (ellipsisConfig && (ellipsisConfig.showTitle || rowType === "header")) {
        if (typeof children === "string" || typeof children === "number") {
          title = children.toString();
        } else if (React97.isValidElement(children) && typeof children.props.children === "string") {
          title = children.props.children;
        }
      }
      return title;
    };
    Cell_default = React97.memo(Cell);
  }
});

// node_modules/rc-table/es/utils/fixUtil.js
function getCellFixedInfo(colStart, colEnd, columns, stickyOffsets, direction) {
  var startColumn = columns[colStart] || {};
  var endColumn = columns[colEnd] || {};
  var fixLeft;
  var fixRight;
  if (startColumn.fixed === "left") {
    fixLeft = stickyOffsets.left[direction === "rtl" ? colEnd : colStart];
  } else if (endColumn.fixed === "right") {
    fixRight = stickyOffsets.right[direction === "rtl" ? colStart : colEnd];
  }
  var lastFixLeft = false;
  var firstFixRight = false;
  var lastFixRight = false;
  var firstFixLeft = false;
  var nextColumn = columns[colEnd + 1];
  var prevColumn = columns[colStart - 1];
  var canLastFix = nextColumn && !nextColumn.fixed || prevColumn && !prevColumn.fixed || columns.every(function(col) {
    return col.fixed === "left";
  });
  if (direction === "rtl") {
    if (fixLeft !== void 0) {
      var prevFixLeft = prevColumn && prevColumn.fixed === "left";
      firstFixLeft = !prevFixLeft && canLastFix;
    } else if (fixRight !== void 0) {
      var nextFixRight = nextColumn && nextColumn.fixed === "right";
      lastFixRight = !nextFixRight && canLastFix;
    }
  } else if (fixLeft !== void 0) {
    var nextFixLeft = nextColumn && nextColumn.fixed === "left";
    lastFixLeft = !nextFixLeft && canLastFix;
  } else if (fixRight !== void 0) {
    var prevFixRight = prevColumn && prevColumn.fixed === "right";
    firstFixRight = !prevFixRight && canLastFix;
  }
  return {
    fixLeft,
    fixRight,
    lastFixLeft,
    firstFixRight,
    lastFixRight,
    firstFixLeft,
    isSticky: stickyOffsets.isSticky
  };
}
var init_fixUtil = __esm({
  "node_modules/rc-table/es/utils/fixUtil.js"() {
  }
});

// node_modules/rc-table/es/Footer/SummaryContext.js
var React98, SummaryContext, SummaryContext_default;
var init_SummaryContext = __esm({
  "node_modules/rc-table/es/Footer/SummaryContext.js"() {
    React98 = __toESM(require_react());
    SummaryContext = React98.createContext({});
    SummaryContext_default = SummaryContext;
  }
});

// node_modules/rc-table/es/Footer/Cell.js
function SummaryCell(_ref) {
  var className = _ref.className, index2 = _ref.index, children = _ref.children, _ref$colSpan = _ref.colSpan, colSpan = _ref$colSpan === void 0 ? 1 : _ref$colSpan, rowSpan = _ref.rowSpan, align = _ref.align;
  var _useContext = useContext23(TableContext_default, ["prefixCls", "direction"]), prefixCls = _useContext.prefixCls, direction = _useContext.direction;
  var _React$useContext = React99.useContext(SummaryContext_default), scrollColumnIndex = _React$useContext.scrollColumnIndex, stickyOffsets = _React$useContext.stickyOffsets, flattenColumns = _React$useContext.flattenColumns;
  var lastIndex = index2 + colSpan - 1;
  var mergedColSpan = lastIndex + 1 === scrollColumnIndex ? colSpan + 1 : colSpan;
  var fixedInfo = getCellFixedInfo(index2, index2 + mergedColSpan - 1, flattenColumns, stickyOffsets, direction);
  return React99.createElement(Cell_default, _extends({
    className,
    index: index2,
    component: "td",
    prefixCls,
    record: null,
    dataIndex: null,
    align,
    colSpan: mergedColSpan,
    rowSpan,
    render: function render() {
      return children;
    }
  }, fixedInfo));
}
var React99;
var init_Cell2 = __esm({
  "node_modules/rc-table/es/Footer/Cell.js"() {
    init_extends();
    React99 = __toESM(require_react());
    init_Cell();
    init_TableContext();
    init_es12();
    init_fixUtil();
    init_SummaryContext();
  }
});

// node_modules/rc-table/es/Footer/Row.js
function FooterRow(_ref) {
  var children = _ref.children, props = _objectWithoutProperties(_ref, _excluded28);
  return React100.createElement("tr", props, children);
}
var React100, _excluded28;
var init_Row = __esm({
  "node_modules/rc-table/es/Footer/Row.js"() {
    init_objectWithoutProperties();
    React100 = __toESM(require_react());
    _excluded28 = ["children"];
  }
});

// node_modules/rc-table/es/Footer/Summary.js
function Summary(_ref) {
  var children = _ref.children;
  return children;
}
var Summary_default;
var init_Summary = __esm({
  "node_modules/rc-table/es/Footer/Summary.js"() {
    init_Cell2();
    init_Row();
    Summary.Row = FooterRow;
    Summary.Cell = SummaryCell;
    Summary_default = Summary;
  }
});

// node_modules/rc-table/es/Footer/index.js
function Footer(props) {
  if (true) {
    useRenderTimes_default(props);
  }
  var children = props.children, stickyOffsets = props.stickyOffsets, flattenColumns = props.flattenColumns;
  var prefixCls = useContext23(TableContext_default, "prefixCls");
  var lastColumnIndex = flattenColumns.length - 1;
  var scrollColumn = flattenColumns[lastColumnIndex];
  var summaryContext = React101.useMemo(function() {
    return {
      stickyOffsets,
      flattenColumns,
      scrollColumnIndex: scrollColumn !== null && scrollColumn !== void 0 && scrollColumn.scrollbar ? lastColumnIndex : null
    };
  }, [scrollColumn, flattenColumns, lastColumnIndex, stickyOffsets]);
  return React101.createElement(SummaryContext_default.Provider, {
    value: summaryContext
  }, React101.createElement("tfoot", {
    className: "".concat(prefixCls, "-summary")
  }, children));
}
var React101, Footer_default, FooterComponents;
var init_Footer = __esm({
  "node_modules/rc-table/es/Footer/index.js"() {
    init_es12();
    React101 = __toESM(require_react());
    init_TableContext();
    init_useRenderTimes();
    init_Summary();
    init_SummaryContext();
    Footer_default = responseImmutable2(Footer);
    FooterComponents = Summary_default;
  }
});

// node_modules/rc-table/es/sugar/Column.js
function Column(_) {
  return null;
}
var Column_default;
var init_Column = __esm({
  "node_modules/rc-table/es/sugar/Column.js"() {
    Column_default = Column;
  }
});

// node_modules/rc-table/es/sugar/ColumnGroup.js
function ColumnGroup(_) {
  return null;
}
var ColumnGroup_default;
var init_ColumnGroup = __esm({
  "node_modules/rc-table/es/sugar/ColumnGroup.js"() {
    ColumnGroup_default = ColumnGroup;
  }
});

// node_modules/rc-util/es/Dom/styleChecker.js
function isStyleSupport(styleName, styleValue) {
  if (!Array.isArray(styleName) && styleValue !== void 0) {
    return isStyleValueSupport(styleName, styleValue);
  }
  return isStyleNameSupport(styleName);
}
var isStyleNameSupport, isStyleValueSupport;
var init_styleChecker = __esm({
  "node_modules/rc-util/es/Dom/styleChecker.js"() {
    init_canUseDom();
    isStyleNameSupport = function isStyleNameSupport2(styleName) {
      if (canUseDom() && window.document.documentElement) {
        var styleNameList = Array.isArray(styleName) ? styleName : [styleName];
        var documentElement = window.document.documentElement;
        return styleNameList.some(function(name) {
          return name in documentElement.style;
        });
      }
      return false;
    };
    isStyleValueSupport = function isStyleValueSupport2(styleName, value) {
      if (!isStyleNameSupport(styleName)) {
        return false;
      }
      var ele = document.createElement("div");
      var origin = ele.style[styleName];
      ele.style[styleName] = value;
      return ele.style[styleName] !== origin;
    };
  }
});

// node_modules/rc-table/es/hooks/useFlattenRecords.js
function fillRecords(list, record, indent, childrenColumnName, expandedKeys, getRowKey, index2) {
  var key = getRowKey(record, index2);
  list.push({
    record,
    indent,
    index: index2,
    rowKey: key
  });
  var expanded = expandedKeys === null || expandedKeys === void 0 ? void 0 : expandedKeys.has(key);
  if (record && Array.isArray(record[childrenColumnName]) && expanded) {
    for (var i = 0; i < record[childrenColumnName].length; i += 1) {
      fillRecords(list, record[childrenColumnName][i], indent + 1, childrenColumnName, expandedKeys, getRowKey, i);
    }
  }
}
function useFlattenRecords(data, childrenColumnName, expandedKeys, getRowKey) {
  var arr = React102.useMemo(function() {
    if (expandedKeys !== null && expandedKeys !== void 0 && expandedKeys.size) {
      var list = [];
      for (var i = 0; i < (data === null || data === void 0 ? void 0 : data.length); i += 1) {
        var record = data[i];
        fillRecords(list, record, 0, childrenColumnName, expandedKeys, getRowKey, i);
      }
      return list;
    }
    return data === null || data === void 0 ? void 0 : data.map(function(item, index2) {
      return {
        record: item,
        indent: 0,
        index: index2,
        rowKey: getRowKey(item, index2)
      };
    });
  }, [data, childrenColumnName, expandedKeys, getRowKey]);
  return arr;
}
var React102;
var init_useFlattenRecords = __esm({
  "node_modules/rc-table/es/hooks/useFlattenRecords.js"() {
    React102 = __toESM(require_react());
  }
});

// node_modules/rc-table/es/hooks/useRowInfo.js
function useRowInfo(record, rowKey, recordIndex, indent) {
  var context = useContext23(TableContext_default, ["prefixCls", "fixedInfoList", "flattenColumns", "expandableType", "expandRowByClick", "onTriggerExpand", "rowClassName", "expandedRowClassName", "indentSize", "expandIcon", "expandedRowRender", "expandIconColumnIndex", "expandedKeys", "childrenColumnName", "rowExpandable", "onRow"]);
  var flattenColumns = context.flattenColumns, expandableType = context.expandableType, expandedKeys = context.expandedKeys, childrenColumnName = context.childrenColumnName, onTriggerExpand = context.onTriggerExpand, rowExpandable = context.rowExpandable, onRow = context.onRow, expandRowByClick = context.expandRowByClick, rowClassName = context.rowClassName;
  var nestExpandable = expandableType === "nest";
  var rowSupportExpand = expandableType === "row" && (!rowExpandable || rowExpandable(record));
  var mergedExpandable = rowSupportExpand || nestExpandable;
  var expanded = expandedKeys && expandedKeys.has(rowKey);
  var hasNestChildren = childrenColumnName && record && record[childrenColumnName];
  var onInternalTriggerExpand = useEvent(onTriggerExpand);
  var rowProps = onRow === null || onRow === void 0 ? void 0 : onRow(record, recordIndex);
  var onRowClick = rowProps === null || rowProps === void 0 ? void 0 : rowProps.onClick;
  var onClick = function onClick2(event) {
    if (expandRowByClick && mergedExpandable) {
      onTriggerExpand(record, event);
    }
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    onRowClick === null || onRowClick === void 0 || onRowClick.apply(void 0, [event].concat(args));
  };
  var computeRowClassName;
  if (typeof rowClassName === "string") {
    computeRowClassName = rowClassName;
  } else if (typeof rowClassName === "function") {
    computeRowClassName = rowClassName(record, recordIndex, indent);
  }
  var columnsKey = getColumnsKey(flattenColumns);
  return _objectSpread2(_objectSpread2({}, context), {}, {
    columnsKey,
    nestExpandable,
    expanded,
    hasNestChildren,
    record,
    onTriggerExpand: onInternalTriggerExpand,
    rowSupportExpand,
    expandable: mergedExpandable,
    rowProps: _objectSpread2(_objectSpread2({}, rowProps), {}, {
      className: (0, import_classnames28.default)(computeRowClassName, rowProps === null || rowProps === void 0 ? void 0 : rowProps.className),
      onClick
    })
  });
}
var import_classnames28;
var init_useRowInfo = __esm({
  "node_modules/rc-table/es/hooks/useRowInfo.js"() {
    init_objectSpread2();
    init_es12();
    init_TableContext();
    init_valueUtil2();
    init_es2();
    import_classnames28 = __toESM(require_classnames());
  }
});

// node_modules/rc-table/es/Body/ExpandedRow.js
function ExpandedRow(props) {
  if (true) {
    useRenderTimes_default(props);
  }
  var prefixCls = props.prefixCls, children = props.children, Component6 = props.component, cellComponent = props.cellComponent, className = props.className, expanded = props.expanded, colSpan = props.colSpan, isEmpty = props.isEmpty, _props$stickyOffset = props.stickyOffset, stickyOffset = _props$stickyOffset === void 0 ? 0 : _props$stickyOffset;
  var _useContext = useContext23(TableContext_default, ["scrollbarSize", "fixHeader", "fixColumn", "componentWidth", "horizonScroll"]), scrollbarSize = _useContext.scrollbarSize, fixHeader = _useContext.fixHeader, fixColumn = _useContext.fixColumn, componentWidth = _useContext.componentWidth, horizonScroll = _useContext.horizonScroll;
  var contentNode = children;
  if (isEmpty ? horizonScroll && componentWidth : fixColumn) {
    contentNode = React103.createElement("div", {
      style: {
        width: componentWidth - stickyOffset - (fixHeader && !isEmpty ? scrollbarSize : 0),
        position: "sticky",
        left: stickyOffset,
        overflow: "hidden"
      },
      className: "".concat(prefixCls, "-expanded-row-fixed")
    }, contentNode);
  }
  return React103.createElement(Component6, {
    className,
    style: {
      display: expanded ? null : "none"
    }
  }, React103.createElement(Cell_default, {
    component: cellComponent,
    prefixCls,
    colSpan
  }, contentNode));
}
var React103, ExpandedRow_default;
var init_ExpandedRow = __esm({
  "node_modules/rc-table/es/Body/ExpandedRow.js"() {
    init_es12();
    React103 = __toESM(require_react());
    init_Cell();
    init_TableContext();
    init_useRenderTimes();
    ExpandedRow_default = ExpandedRow;
  }
});

// node_modules/rc-table/es/utils/expandUtil.js
function renderExpandIcon(_ref) {
  var prefixCls = _ref.prefixCls, record = _ref.record, onExpand = _ref.onExpand, expanded = _ref.expanded, expandable = _ref.expandable;
  var expandClassName = "".concat(prefixCls, "-row-expand-icon");
  if (!expandable) {
    return React104.createElement("span", {
      className: (0, import_classnames29.default)(expandClassName, "".concat(prefixCls, "-row-spaced"))
    });
  }
  var onClick = function onClick2(event) {
    onExpand(record, event);
    event.stopPropagation();
  };
  return React104.createElement("span", {
    className: (0, import_classnames29.default)(expandClassName, _defineProperty(_defineProperty({}, "".concat(prefixCls, "-row-expanded"), expanded), "".concat(prefixCls, "-row-collapsed"), !expanded)),
    onClick
  });
}
function findAllChildrenKeys(data, getRowKey, childrenColumnName) {
  var keys = [];
  function dig(list) {
    (list || []).forEach(function(item, index2) {
      keys.push(getRowKey(item, index2));
      dig(item[childrenColumnName]);
    });
  }
  dig(data);
  return keys;
}
function computedExpandedClassName(cls, record, index2, indent) {
  if (typeof cls === "string") {
    return cls;
  }
  if (typeof cls === "function") {
    return cls(record, index2, indent);
  }
  return "";
}
var React104, import_classnames29;
var init_expandUtil = __esm({
  "node_modules/rc-table/es/utils/expandUtil.js"() {
    init_defineProperty();
    React104 = __toESM(require_react());
    import_classnames29 = __toESM(require_classnames());
  }
});

// node_modules/rc-table/es/Body/BodyRow.js
function getCellProps(rowInfo, column, colIndex, indent, index2) {
  var _column$onCell;
  var rowKeys = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : [];
  var expandedRowOffset = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : 0;
  var record = rowInfo.record, prefixCls = rowInfo.prefixCls, columnsKey = rowInfo.columnsKey, fixedInfoList = rowInfo.fixedInfoList, expandIconColumnIndex = rowInfo.expandIconColumnIndex, nestExpandable = rowInfo.nestExpandable, indentSize = rowInfo.indentSize, expandIcon = rowInfo.expandIcon, expanded = rowInfo.expanded, hasNestChildren = rowInfo.hasNestChildren, onTriggerExpand = rowInfo.onTriggerExpand, expandable = rowInfo.expandable, expandedKeys = rowInfo.expandedKeys;
  var key = columnsKey[colIndex];
  var fixedInfo = fixedInfoList[colIndex];
  var appendCellNode;
  if (colIndex === (expandIconColumnIndex || 0) && nestExpandable) {
    appendCellNode = React105.createElement(React105.Fragment, null, React105.createElement("span", {
      style: {
        paddingLeft: "".concat(indentSize * indent, "px")
      },
      className: "".concat(prefixCls, "-row-indent indent-level-").concat(indent)
    }), expandIcon({
      prefixCls,
      expanded,
      expandable: hasNestChildren,
      record,
      onExpand: onTriggerExpand
    }));
  }
  var additionalCellProps = ((_column$onCell = column.onCell) === null || _column$onCell === void 0 ? void 0 : _column$onCell.call(column, record, index2)) || {};
  if (expandedRowOffset) {
    var _additionalCellProps$ = additionalCellProps.rowSpan, rowSpan = _additionalCellProps$ === void 0 ? 1 : _additionalCellProps$;
    if (expandable && rowSpan && colIndex < expandedRowOffset) {
      var currentRowSpan = rowSpan;
      for (var i = index2; i < index2 + rowSpan; i += 1) {
        var rowKey = rowKeys[i];
        if (expandedKeys.has(rowKey)) {
          currentRowSpan += 1;
        }
      }
      additionalCellProps.rowSpan = currentRowSpan;
    }
  }
  return {
    key,
    fixedInfo,
    appendCellNode,
    additionalCellProps
  };
}
function BodyRow(props) {
  if (true) {
    useRenderTimes_default(props);
  }
  var className = props.className, style2 = props.style, record = props.record, index2 = props.index, renderIndex = props.renderIndex, rowKey = props.rowKey, rowKeys = props.rowKeys, _props$indent = props.indent, indent = _props$indent === void 0 ? 0 : _props$indent, RowComponent = props.rowComponent, cellComponent = props.cellComponent, scopeCellComponent = props.scopeCellComponent, expandedRowInfo = props.expandedRowInfo;
  var rowInfo = useRowInfo(record, rowKey, index2, indent);
  var prefixCls = rowInfo.prefixCls, flattenColumns = rowInfo.flattenColumns, expandedRowClassName = rowInfo.expandedRowClassName, expandedRowRender = rowInfo.expandedRowRender, rowProps = rowInfo.rowProps, expanded = rowInfo.expanded, rowSupportExpand = rowInfo.rowSupportExpand;
  var expandedRef = React105.useRef(false);
  expandedRef.current || (expandedRef.current = expanded);
  if (true) {
    useRenderTimes_default(props);
  }
  var expandedClsName = computedExpandedClassName(expandedRowClassName, record, index2, indent);
  var baseRowNode = React105.createElement(RowComponent, _extends({}, rowProps, {
    "data-row-key": rowKey,
    className: (0, import_classnames30.default)(className, "".concat(prefixCls, "-row"), "".concat(prefixCls, "-row-level-").concat(indent), rowProps === null || rowProps === void 0 ? void 0 : rowProps.className, _defineProperty({}, expandedClsName, indent >= 1)),
    style: _objectSpread2(_objectSpread2({}, style2), rowProps === null || rowProps === void 0 ? void 0 : rowProps.style)
  }), flattenColumns.map(function(column, colIndex) {
    var render = column.render, dataIndex = column.dataIndex, columnClassName = column.className;
    var _getCellProps = getCellProps(rowInfo, column, colIndex, indent, index2, rowKeys, expandedRowInfo === null || expandedRowInfo === void 0 ? void 0 : expandedRowInfo.offset), key = _getCellProps.key, fixedInfo = _getCellProps.fixedInfo, appendCellNode = _getCellProps.appendCellNode, additionalCellProps = _getCellProps.additionalCellProps;
    return React105.createElement(Cell_default, _extends({
      className: columnClassName,
      ellipsis: column.ellipsis,
      align: column.align,
      scope: column.rowScope,
      component: column.rowScope ? scopeCellComponent : cellComponent,
      prefixCls,
      key,
      record,
      index: index2,
      renderIndex,
      dataIndex,
      render,
      shouldCellUpdate: column.shouldCellUpdate
    }, fixedInfo, {
      appendNode: appendCellNode,
      additionalProps: additionalCellProps
    }));
  }));
  var expandRowNode;
  if (rowSupportExpand && (expandedRef.current || expanded)) {
    var expandContent = expandedRowRender(record, index2, indent + 1, expanded);
    expandRowNode = React105.createElement(ExpandedRow_default, {
      expanded,
      className: (0, import_classnames30.default)("".concat(prefixCls, "-expanded-row"), "".concat(prefixCls, "-expanded-row-level-").concat(indent + 1), expandedClsName),
      prefixCls,
      component: RowComponent,
      cellComponent,
      colSpan: expandedRowInfo ? expandedRowInfo.colSpan : flattenColumns.length,
      stickyOffset: expandedRowInfo === null || expandedRowInfo === void 0 ? void 0 : expandedRowInfo.sticky,
      isEmpty: false
    }, expandContent);
  }
  return React105.createElement(React105.Fragment, null, baseRowNode, expandRowNode);
}
var import_classnames30, React105, BodyRow_default;
var init_BodyRow = __esm({
  "node_modules/rc-table/es/Body/BodyRow.js"() {
    init_extends();
    init_objectSpread2();
    init_defineProperty();
    import_classnames30 = __toESM(require_classnames());
    React105 = __toESM(require_react());
    init_Cell();
    init_TableContext();
    init_useRenderTimes();
    init_useRowInfo();
    init_ExpandedRow();
    init_expandUtil();
    if (true) {
      BodyRow.displayName = "BodyRow";
    }
    BodyRow_default = responseImmutable2(BodyRow);
  }
});

// node_modules/rc-table/es/Body/MeasureCell.js
function MeasureCell(_ref) {
  var columnKey = _ref.columnKey, onColumnResize = _ref.onColumnResize;
  var cellRef = React106.useRef();
  useLayoutEffect_default(function() {
    if (cellRef.current) {
      onColumnResize(columnKey, cellRef.current.offsetWidth);
    }
  }, []);
  return React106.createElement(es_default, {
    data: columnKey
  }, React106.createElement("td", {
    ref: cellRef,
    style: {
      padding: 0,
      border: 0,
      height: 0
    }
  }, React106.createElement("div", {
    style: {
      height: 0,
      overflow: "hidden"
    }
  }, " ")));
}
var React106;
var init_MeasureCell = __esm({
  "node_modules/rc-table/es/Body/MeasureCell.js"() {
    React106 = __toESM(require_react());
    init_es3();
    init_useLayoutEffect();
  }
});

// node_modules/rc-table/es/Body/MeasureRow.js
function MeasureRow(_ref) {
  var prefixCls = _ref.prefixCls, columnsKey = _ref.columnsKey, onColumnResize = _ref.onColumnResize;
  var ref = React107.useRef(null);
  return React107.createElement("tr", {
    "aria-hidden": "true",
    className: "".concat(prefixCls, "-measure-row"),
    style: {
      height: 0,
      fontSize: 0
    },
    ref
  }, React107.createElement(es_default.Collection, {
    onBatchResize: function onBatchResize(infoList) {
      if (isVisible_default(ref.current)) {
        infoList.forEach(function(_ref2) {
          var columnKey = _ref2.data, size = _ref2.size;
          onColumnResize(columnKey, size.offsetWidth);
        });
      }
    }
  }, columnsKey.map(function(columnKey) {
    return React107.createElement(MeasureCell, {
      key: columnKey,
      columnKey,
      onColumnResize
    });
  })));
}
var React107;
var init_MeasureRow = __esm({
  "node_modules/rc-table/es/Body/MeasureRow.js"() {
    React107 = __toESM(require_react());
    init_es3();
    init_MeasureCell();
    init_isVisible();
  }
});

// node_modules/rc-table/es/Body/index.js
function Body(props) {
  if (true) {
    useRenderTimes_default(props);
  }
  var data = props.data, measureColumnWidth = props.measureColumnWidth;
  var _useContext = useContext23(TableContext_default, ["prefixCls", "getComponent", "onColumnResize", "flattenColumns", "getRowKey", "expandedKeys", "childrenColumnName", "emptyNode", "expandedRowOffset", "fixedInfoList", "colWidths"]), prefixCls = _useContext.prefixCls, getComponent = _useContext.getComponent, onColumnResize = _useContext.onColumnResize, flattenColumns = _useContext.flattenColumns, getRowKey = _useContext.getRowKey, expandedKeys = _useContext.expandedKeys, childrenColumnName = _useContext.childrenColumnName, emptyNode = _useContext.emptyNode, _useContext$expandedR = _useContext.expandedRowOffset, expandedRowOffset = _useContext$expandedR === void 0 ? 0 : _useContext$expandedR, colWidths = _useContext.colWidths;
  var flattenData = useFlattenRecords(data, childrenColumnName, expandedKeys, getRowKey);
  var rowKeys = React108.useMemo(function() {
    return flattenData.map(function(item) {
      return item.rowKey;
    });
  }, [flattenData]);
  var perfRef = React108.useRef({
    renderWithProps: false
  });
  var expandedRowInfo = React108.useMemo(function() {
    var expandedColSpan = flattenColumns.length - expandedRowOffset;
    var expandedStickyStart = 0;
    for (var i = 0; i < expandedRowOffset; i += 1) {
      expandedStickyStart += colWidths[i] || 0;
    }
    return {
      offset: expandedRowOffset,
      colSpan: expandedColSpan,
      sticky: expandedStickyStart
    };
  }, [flattenColumns.length, expandedRowOffset, colWidths]);
  var WrapperComponent = getComponent(["body", "wrapper"], "tbody");
  var trComponent = getComponent(["body", "row"], "tr");
  var tdComponent = getComponent(["body", "cell"], "td");
  var thComponent = getComponent(["body", "cell"], "th");
  var rows;
  if (data.length) {
    rows = flattenData.map(function(item, idx) {
      var record = item.record, indent = item.indent, renderIndex = item.index, rowKey = item.rowKey;
      return React108.createElement(BodyRow_default, {
        key: rowKey,
        rowKey,
        rowKeys,
        record,
        index: idx,
        renderIndex,
        rowComponent: trComponent,
        cellComponent: tdComponent,
        scopeCellComponent: thComponent,
        indent,
        expandedRowInfo
      });
    });
  } else {
    rows = React108.createElement(ExpandedRow_default, {
      expanded: true,
      className: "".concat(prefixCls, "-placeholder"),
      prefixCls,
      component: trComponent,
      cellComponent: tdComponent,
      colSpan: flattenColumns.length,
      isEmpty: true
    }, emptyNode);
  }
  var columnsKey = getColumnsKey(flattenColumns);
  return React108.createElement(PerfContext_default.Provider, {
    value: perfRef.current
  }, React108.createElement(WrapperComponent, {
    className: "".concat(prefixCls, "-tbody")
  }, measureColumnWidth && React108.createElement(MeasureRow, {
    prefixCls,
    columnsKey,
    onColumnResize
  }), rows));
}
var React108, Body_default;
var init_Body = __esm({
  "node_modules/rc-table/es/Body/index.js"() {
    init_es12();
    React108 = __toESM(require_react());
    init_PerfContext();
    init_TableContext();
    init_useFlattenRecords();
    init_useRenderTimes();
    init_valueUtil2();
    init_BodyRow();
    init_ExpandedRow();
    init_MeasureRow();
    if (true) {
      Body.displayName = "Body";
    }
    Body_default = responseImmutable2(Body);
  }
});

// node_modules/rc-table/es/utils/legacyUtil.js
function getExpandableProps(props) {
  var expandable = props.expandable, legacyExpandableConfig = _objectWithoutProperties(props, _excluded29);
  var config;
  if ("expandable" in props) {
    config = _objectSpread2(_objectSpread2({}, legacyExpandableConfig), expandable);
  } else {
    if (["indentSize", "expandedRowKeys", "defaultExpandedRowKeys", "defaultExpandAllRows", "expandedRowRender", "expandRowByClick", "expandIcon", "onExpand", "onExpandedRowsChange", "expandedRowClassName", "expandIconColumnIndex", "showExpandColumn", "title"].some(function(prop) {
      return prop in props;
    })) {
      warning_default(false, "expanded related props have been moved into `expandable`.");
    }
    config = legacyExpandableConfig;
  }
  if (config.showExpandColumn === false) {
    config.expandIconColumnIndex = -1;
  }
  return config;
}
var _excluded29, INTERNAL_COL_DEFINE;
var init_legacyUtil2 = __esm({
  "node_modules/rc-table/es/utils/legacyUtil.js"() {
    init_objectSpread2();
    init_objectWithoutProperties();
    init_warning();
    _excluded29 = ["expandable"];
    INTERNAL_COL_DEFINE = "RC_TABLE_INTERNAL_COL_DEFINE";
  }
});

// node_modules/rc-table/es/ColGroup.js
function ColGroup(_ref) {
  var colWidths = _ref.colWidths, columns = _ref.columns, columCount = _ref.columCount;
  var _useContext = useContext23(TableContext_default, ["tableLayout"]), tableLayout = _useContext.tableLayout;
  var cols = [];
  var len = columCount || columns.length;
  var mustInsert = false;
  for (var i = len - 1; i >= 0; i -= 1) {
    var width = colWidths[i];
    var column = columns && columns[i];
    var additionalProps = void 0;
    var minWidth = void 0;
    if (column) {
      additionalProps = column[INTERNAL_COL_DEFINE];
      if (tableLayout === "auto") {
        minWidth = column.minWidth;
      }
    }
    if (width || minWidth || additionalProps || mustInsert) {
      var _ref2 = additionalProps || {}, columnType = _ref2.columnType, restAdditionalProps = _objectWithoutProperties(_ref2, _excluded30);
      cols.unshift(React109.createElement("col", _extends({
        key: i,
        style: {
          width,
          minWidth
        }
      }, restAdditionalProps)));
      mustInsert = true;
    }
  }
  return React109.createElement("colgroup", null, cols);
}
var React109, _excluded30, ColGroup_default;
var init_ColGroup = __esm({
  "node_modules/rc-table/es/ColGroup.js"() {
    init_extends();
    init_objectWithoutProperties();
    React109 = __toESM(require_react());
    init_legacyUtil2();
    init_es12();
    init_TableContext();
    _excluded30 = ["columnType"];
    ColGroup_default = ColGroup;
  }
});

// node_modules/rc-table/es/FixedHolder/index.js
function useColumnWidth(colWidths, columCount) {
  return (0, import_react20.useMemo)(function() {
    var cloneColumns = [];
    for (var i = 0; i < columCount; i += 1) {
      var val = colWidths[i];
      if (val !== void 0) {
        cloneColumns[i] = val;
      } else {
        return null;
      }
    }
    return cloneColumns;
  }, [colWidths.join("_"), columCount]);
}
var import_classnames31, React110, import_react20, _excluded31, FixedHolder, FixedHolder_default;
var init_FixedHolder = __esm({
  "node_modules/rc-table/es/FixedHolder/index.js"() {
    init_defineProperty();
    init_objectSpread2();
    init_toConsumableArray();
    init_objectWithoutProperties();
    init_es12();
    import_classnames31 = __toESM(require_classnames());
    init_ref();
    React110 = __toESM(require_react());
    import_react20 = __toESM(require_react());
    init_ColGroup();
    init_TableContext();
    init_useRenderTimes();
    _excluded31 = ["className", "noData", "columns", "flattenColumns", "colWidths", "columCount", "stickyOffsets", "direction", "fixHeader", "stickyTopOffset", "stickyBottomOffset", "stickyClassName", "onScroll", "maxContentScroll", "children"];
    FixedHolder = React110.forwardRef(function(props, ref) {
      if (true) {
        useRenderTimes_default(props);
      }
      var className = props.className, noData = props.noData, columns = props.columns, flattenColumns = props.flattenColumns, colWidths = props.colWidths, columCount = props.columCount, stickyOffsets = props.stickyOffsets, direction = props.direction, fixHeader = props.fixHeader, stickyTopOffset = props.stickyTopOffset, stickyBottomOffset = props.stickyBottomOffset, stickyClassName = props.stickyClassName, onScroll = props.onScroll, maxContentScroll = props.maxContentScroll, children = props.children, restProps = _objectWithoutProperties(props, _excluded31);
      var _useContext = useContext23(TableContext_default, ["prefixCls", "scrollbarSize", "isSticky", "getComponent"]), prefixCls = _useContext.prefixCls, scrollbarSize = _useContext.scrollbarSize, isSticky = _useContext.isSticky, getComponent = _useContext.getComponent;
      var TableComponent = getComponent(["header", "table"], "table");
      var combinationScrollBarSize = isSticky && !fixHeader ? 0 : scrollbarSize;
      var scrollRef = React110.useRef(null);
      var setScrollRef = React110.useCallback(function(element) {
        fillRef(ref, element);
        fillRef(scrollRef, element);
      }, []);
      React110.useEffect(function() {
        function onWheel(e) {
          var _ref = e, currentTarget = _ref.currentTarget, deltaX = _ref.deltaX;
          if (deltaX) {
            onScroll({
              currentTarget,
              scrollLeft: currentTarget.scrollLeft + deltaX
            });
            e.preventDefault();
          }
        }
        var scrollEle = scrollRef.current;
        scrollEle === null || scrollEle === void 0 || scrollEle.addEventListener("wheel", onWheel, {
          passive: false
        });
        return function() {
          scrollEle === null || scrollEle === void 0 || scrollEle.removeEventListener("wheel", onWheel);
        };
      }, []);
      var allFlattenColumnsWithWidth = React110.useMemo(function() {
        return flattenColumns.every(function(column) {
          return column.width;
        });
      }, [flattenColumns]);
      var lastColumn = flattenColumns[flattenColumns.length - 1];
      var ScrollBarColumn = {
        fixed: lastColumn ? lastColumn.fixed : null,
        scrollbar: true,
        onHeaderCell: function onHeaderCell() {
          return {
            className: "".concat(prefixCls, "-cell-scrollbar")
          };
        }
      };
      var columnsWithScrollbar = (0, import_react20.useMemo)(function() {
        return combinationScrollBarSize ? [].concat(_toConsumableArray(columns), [ScrollBarColumn]) : columns;
      }, [combinationScrollBarSize, columns]);
      var flattenColumnsWithScrollbar = (0, import_react20.useMemo)(function() {
        return combinationScrollBarSize ? [].concat(_toConsumableArray(flattenColumns), [ScrollBarColumn]) : flattenColumns;
      }, [combinationScrollBarSize, flattenColumns]);
      var headerStickyOffsets = (0, import_react20.useMemo)(function() {
        var right = stickyOffsets.right, left = stickyOffsets.left;
        return _objectSpread2(_objectSpread2({}, stickyOffsets), {}, {
          left: direction === "rtl" ? [].concat(_toConsumableArray(left.map(function(width) {
            return width + combinationScrollBarSize;
          })), [0]) : left,
          right: direction === "rtl" ? right : [].concat(_toConsumableArray(right.map(function(width) {
            return width + combinationScrollBarSize;
          })), [0]),
          isSticky
        });
      }, [combinationScrollBarSize, stickyOffsets, isSticky]);
      var mergedColumnWidth = useColumnWidth(colWidths, columCount);
      return React110.createElement("div", {
        style: _objectSpread2({
          overflow: "hidden"
        }, isSticky ? {
          top: stickyTopOffset,
          bottom: stickyBottomOffset
        } : {}),
        ref: setScrollRef,
        className: (0, import_classnames31.default)(className, _defineProperty({}, stickyClassName, !!stickyClassName))
      }, React110.createElement(TableComponent, {
        style: {
          tableLayout: "fixed",
          visibility: noData || mergedColumnWidth ? null : "hidden"
        }
      }, (!noData || !maxContentScroll || allFlattenColumnsWithWidth) && React110.createElement(ColGroup_default, {
        colWidths: mergedColumnWidth ? [].concat(_toConsumableArray(mergedColumnWidth), [combinationScrollBarSize]) : [],
        columCount: columCount + 1,
        columns: flattenColumnsWithScrollbar
      }), children(_objectSpread2(_objectSpread2({}, restProps), {}, {
        stickyOffsets: headerStickyOffsets,
        columns: columnsWithScrollbar,
        flattenColumns: flattenColumnsWithScrollbar
      }))));
    });
    if (true) {
      FixedHolder.displayName = "FixedHolder";
    }
    FixedHolder_default = React110.memo(FixedHolder);
  }
});

// node_modules/rc-table/es/Header/HeaderRow.js
var React111, HeaderRow, HeaderRow_default;
var init_HeaderRow = __esm({
  "node_modules/rc-table/es/Header/HeaderRow.js"() {
    init_extends();
    React111 = __toESM(require_react());
    init_Cell();
    init_TableContext();
    init_es12();
    init_fixUtil();
    init_valueUtil2();
    HeaderRow = function HeaderRow2(props) {
      var cells = props.cells, stickyOffsets = props.stickyOffsets, flattenColumns = props.flattenColumns, RowComponent = props.rowComponent, CellComponent = props.cellComponent, onHeaderRow = props.onHeaderRow, index2 = props.index;
      var _useContext = useContext23(TableContext_default, ["prefixCls", "direction"]), prefixCls = _useContext.prefixCls, direction = _useContext.direction;
      var rowProps;
      if (onHeaderRow) {
        rowProps = onHeaderRow(cells.map(function(cell) {
          return cell.column;
        }), index2);
      }
      var columnsKey = getColumnsKey(cells.map(function(cell) {
        return cell.column;
      }));
      return React111.createElement(RowComponent, rowProps, cells.map(function(cell, cellIndex) {
        var column = cell.column;
        var fixedInfo = getCellFixedInfo(cell.colStart, cell.colEnd, flattenColumns, stickyOffsets, direction);
        var additionalProps;
        if (column && column.onHeaderCell) {
          additionalProps = cell.column.onHeaderCell(column);
        }
        return React111.createElement(Cell_default, _extends({}, cell, {
          scope: column.title ? cell.colSpan > 1 ? "colgroup" : "col" : null,
          ellipsis: column.ellipsis,
          align: column.align,
          component: CellComponent,
          prefixCls,
          key: columnsKey[cellIndex]
        }, fixedInfo, {
          additionalProps,
          rowType: "header"
        }));
      }));
    };
    if (true) {
      HeaderRow.displayName = "HeaderRow";
    }
    HeaderRow_default = HeaderRow;
  }
});

// node_modules/rc-table/es/Header/Header.js
function parseHeaderRows(rootColumns) {
  var rows = [];
  function fillRowCells(columns, colIndex) {
    var rowIndex2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0;
    rows[rowIndex2] = rows[rowIndex2] || [];
    var currentColIndex = colIndex;
    var colSpans = columns.filter(Boolean).map(function(column) {
      var cell = {
        key: column.key,
        className: column.className || "",
        children: column.title,
        column,
        colStart: currentColIndex
      };
      var colSpan = 1;
      var subColumns = column.children;
      if (subColumns && subColumns.length > 0) {
        colSpan = fillRowCells(subColumns, currentColIndex, rowIndex2 + 1).reduce(function(total, count) {
          return total + count;
        }, 0);
        cell.hasSubColumns = true;
      }
      if ("colSpan" in column) {
        colSpan = column.colSpan;
      }
      if ("rowSpan" in column) {
        cell.rowSpan = column.rowSpan;
      }
      cell.colSpan = colSpan;
      cell.colEnd = cell.colStart + colSpan - 1;
      rows[rowIndex2].push(cell);
      currentColIndex += colSpan;
      return colSpan;
    });
    return colSpans;
  }
  fillRowCells(rootColumns, 0);
  var rowCount = rows.length;
  var _loop = function _loop2(rowIndex2) {
    rows[rowIndex2].forEach(function(cell) {
      if (!("rowSpan" in cell) && !cell.hasSubColumns) {
        cell.rowSpan = rowCount - rowIndex2;
      }
    });
  };
  for (var rowIndex = 0; rowIndex < rowCount; rowIndex += 1) {
    _loop(rowIndex);
  }
  return rows;
}
var React112, Header, Header_default;
var init_Header = __esm({
  "node_modules/rc-table/es/Header/Header.js"() {
    init_es12();
    React112 = __toESM(require_react());
    init_TableContext();
    init_useRenderTimes();
    init_HeaderRow();
    Header = function Header2(props) {
      if (true) {
        useRenderTimes_default(props);
      }
      var stickyOffsets = props.stickyOffsets, columns = props.columns, flattenColumns = props.flattenColumns, onHeaderRow = props.onHeaderRow;
      var _useContext = useContext23(TableContext_default, ["prefixCls", "getComponent"]), prefixCls = _useContext.prefixCls, getComponent = _useContext.getComponent;
      var rows = React112.useMemo(function() {
        return parseHeaderRows(columns);
      }, [columns]);
      var WrapperComponent = getComponent(["header", "wrapper"], "thead");
      var trComponent = getComponent(["header", "row"], "tr");
      var thComponent = getComponent(["header", "cell"], "th");
      return React112.createElement(WrapperComponent, {
        className: "".concat(prefixCls, "-thead")
      }, rows.map(function(row, rowIndex) {
        var rowNode = React112.createElement(HeaderRow_default, {
          key: rowIndex,
          flattenColumns,
          cells: row,
          stickyOffsets,
          rowComponent: trComponent,
          cellComponent: thComponent,
          onHeaderRow,
          index: rowIndex
        });
        return rowNode;
      }));
    };
    Header_default = responseImmutable2(Header);
  }
});

// node_modules/rc-table/es/hooks/useColumns/useWidthColumns.js
function parseColWidth(totalWidth) {
  var width = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "";
  if (typeof width === "number") {
    return width;
  }
  if (width.endsWith("%")) {
    return totalWidth * parseFloat(width) / 100;
  }
  return null;
}
function useWidthColumns(flattenColumns, scrollWidth, clientWidth) {
  return React113.useMemo(function() {
    if (scrollWidth && scrollWidth > 0) {
      var totalWidth = 0;
      var missWidthCount = 0;
      flattenColumns.forEach(function(col) {
        var colWidth = parseColWidth(scrollWidth, col.width);
        if (colWidth) {
          totalWidth += colWidth;
        } else {
          missWidthCount += 1;
        }
      });
      var maxFitWidth = Math.max(scrollWidth, clientWidth);
      var restWidth = Math.max(maxFitWidth - totalWidth, missWidthCount);
      var restCount = missWidthCount;
      var avgWidth = restWidth / missWidthCount;
      var realTotal = 0;
      var filledColumns = flattenColumns.map(function(col) {
        var clone = _objectSpread2({}, col);
        var colWidth = parseColWidth(scrollWidth, clone.width);
        if (colWidth) {
          clone.width = colWidth;
        } else {
          var colAvgWidth = Math.floor(avgWidth);
          clone.width = restCount === 1 ? restWidth : colAvgWidth;
          restWidth -= colAvgWidth;
          restCount -= 1;
        }
        realTotal += clone.width;
        return clone;
      });
      if (realTotal < maxFitWidth) {
        var scale = maxFitWidth / realTotal;
        restWidth = maxFitWidth;
        filledColumns.forEach(function(col, index2) {
          var colWidth = Math.floor(col.width * scale);
          col.width = index2 === filledColumns.length - 1 ? restWidth : colWidth;
          restWidth -= colWidth;
        });
      }
      return [filledColumns, Math.max(realTotal, maxFitWidth)];
    }
    return [flattenColumns, scrollWidth];
  }, [flattenColumns, scrollWidth, clientWidth]);
}
var React113;
var init_useWidthColumns = __esm({
  "node_modules/rc-table/es/hooks/useColumns/useWidthColumns.js"() {
    init_objectSpread2();
    React113 = __toESM(require_react());
  }
});

// node_modules/rc-table/es/hooks/useColumns/index.js
function convertChildrenToColumns(children) {
  return toArray(children).filter(function(node) {
    return React114.isValidElement(node);
  }).map(function(_ref) {
    var key = _ref.key, props = _ref.props;
    var nodeChildren = props.children, restProps = _objectWithoutProperties(props, _excluded34);
    var column = _objectSpread2({
      key
    }, restProps);
    if (nodeChildren) {
      column.children = convertChildrenToColumns(nodeChildren);
    }
    return column;
  });
}
function filterHiddenColumns(columns) {
  return columns.filter(function(column) {
    return column && _typeof(column) === "object" && !column.hidden;
  }).map(function(column) {
    var subColumns = column.children;
    if (subColumns && subColumns.length > 0) {
      return _objectSpread2(_objectSpread2({}, column), {}, {
        children: filterHiddenColumns(subColumns)
      });
    }
    return column;
  });
}
function flatColumns(columns) {
  var parentKey = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "key";
  return columns.filter(function(column) {
    return column && _typeof(column) === "object";
  }).reduce(function(list, column, index2) {
    var fixed = column.fixed;
    var parsedFixed = fixed === true ? "left" : fixed;
    var mergedKey = "".concat(parentKey, "-").concat(index2);
    var subColumns = column.children;
    if (subColumns && subColumns.length > 0) {
      return [].concat(_toConsumableArray(list), _toConsumableArray(flatColumns(subColumns, mergedKey).map(function(subColum) {
        return _objectSpread2({
          fixed: parsedFixed
        }, subColum);
      })));
    }
    return [].concat(_toConsumableArray(list), [_objectSpread2(_objectSpread2({
      key: mergedKey
    }, column), {}, {
      fixed: parsedFixed
    })]);
  }, []);
}
function revertForRtl(columns) {
  return columns.map(function(column) {
    var fixed = column.fixed, restProps = _objectWithoutProperties(column, _excluded210);
    var parsedFixed = fixed;
    if (fixed === "left") {
      parsedFixed = "right";
    } else if (fixed === "right") {
      parsedFixed = "left";
    }
    return _objectSpread2({
      fixed: parsedFixed
    }, restProps);
  });
}
function useColumns(_ref2, transformColumns) {
  var prefixCls = _ref2.prefixCls, columns = _ref2.columns, children = _ref2.children, expandable = _ref2.expandable, expandedKeys = _ref2.expandedKeys, columnTitle = _ref2.columnTitle, getRowKey = _ref2.getRowKey, onTriggerExpand = _ref2.onTriggerExpand, expandIcon = _ref2.expandIcon, rowExpandable = _ref2.rowExpandable, expandIconColumnIndex = _ref2.expandIconColumnIndex, _ref2$expandedRowOffs = _ref2.expandedRowOffset, expandedRowOffset = _ref2$expandedRowOffs === void 0 ? 0 : _ref2$expandedRowOffs, direction = _ref2.direction, expandRowByClick = _ref2.expandRowByClick, columnWidth = _ref2.columnWidth, fixed = _ref2.fixed, scrollWidth = _ref2.scrollWidth, clientWidth = _ref2.clientWidth;
  var baseColumns = React114.useMemo(function() {
    var newColumns = columns || convertChildrenToColumns(children) || [];
    return filterHiddenColumns(newColumns.slice());
  }, [columns, children]);
  var withExpandColumns = React114.useMemo(function() {
    if (expandable) {
      var cloneColumns = baseColumns.slice();
      if (expandIconColumnIndex >= 0) {
        warning_default(false, "`expandIconColumnIndex` is deprecated. Please use `Table.EXPAND_COLUMN` in `columns` instead.");
      }
      if (!cloneColumns.includes(EXPAND_COLUMN)) {
        var expandColIndex = expandIconColumnIndex || 0;
        if (expandColIndex >= 0 && (expandColIndex || fixed === "left" || !fixed)) {
          cloneColumns.splice(expandColIndex, 0, EXPAND_COLUMN);
        }
        if (fixed === "right") {
          cloneColumns.splice(baseColumns.length, 0, EXPAND_COLUMN);
        }
      }
      if (cloneColumns.filter(function(c) {
        return c === EXPAND_COLUMN;
      }).length > 1) {
        warning_default(false, "There exist more than one `EXPAND_COLUMN` in `columns`.");
      }
      var expandColumnIndex = cloneColumns.indexOf(EXPAND_COLUMN);
      cloneColumns = cloneColumns.filter(function(column, index2) {
        return column !== EXPAND_COLUMN || index2 === expandColumnIndex;
      });
      var prevColumn = baseColumns[expandColumnIndex];
      var fixedColumn;
      if (fixed) {
        fixedColumn = fixed;
      } else {
        fixedColumn = prevColumn ? prevColumn.fixed : null;
      }
      var expandColumn = _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty({}, INTERNAL_COL_DEFINE, {
        className: "".concat(prefixCls, "-expand-icon-col"),
        columnType: "EXPAND_COLUMN"
      }), "title", columnTitle), "fixed", fixedColumn), "className", "".concat(prefixCls, "-row-expand-icon-cell")), "width", columnWidth), "render", function render(_, record, index2) {
        var rowKey = getRowKey(record, index2);
        var expanded = expandedKeys.has(rowKey);
        var recordExpandable = rowExpandable ? rowExpandable(record) : true;
        var icon = expandIcon({
          prefixCls,
          expanded,
          expandable: recordExpandable,
          record,
          onExpand: onTriggerExpand
        });
        if (expandRowByClick) {
          return React114.createElement("span", {
            onClick: function onClick(e) {
              return e.stopPropagation();
            }
          }, icon);
        }
        return icon;
      });
      return cloneColumns.map(function(col, index2) {
        var column = col === EXPAND_COLUMN ? expandColumn : col;
        if (index2 < expandedRowOffset) {
          return _objectSpread2(_objectSpread2({}, column), {}, {
            fixed: column.fixed || "left"
          });
        }
        return column;
      });
    }
    if (baseColumns.includes(EXPAND_COLUMN)) {
      warning_default(false, "`expandable` is not config but there exist `EXPAND_COLUMN` in `columns`.");
    }
    return baseColumns.filter(function(col) {
      return col !== EXPAND_COLUMN;
    });
  }, [expandable, baseColumns, getRowKey, expandedKeys, expandIcon, direction, expandedRowOffset]);
  var mergedColumns = React114.useMemo(function() {
    var finalColumns = withExpandColumns;
    if (transformColumns) {
      finalColumns = transformColumns(finalColumns);
    }
    if (!finalColumns.length) {
      finalColumns = [{
        render: function render() {
          return null;
        }
      }];
    }
    return finalColumns;
  }, [transformColumns, withExpandColumns, direction]);
  var flattenColumns = React114.useMemo(function() {
    if (direction === "rtl") {
      return revertForRtl(flatColumns(mergedColumns));
    }
    return flatColumns(mergedColumns);
  }, [mergedColumns, direction, scrollWidth]);
  var hasGapFixed = React114.useMemo(function() {
    var lastLeftIndex = -1;
    for (var i = flattenColumns.length - 1; i >= 0; i -= 1) {
      var colFixed = flattenColumns[i].fixed;
      if (colFixed === "left" || colFixed === true) {
        lastLeftIndex = i;
        break;
      }
    }
    if (lastLeftIndex >= 0) {
      for (var _i = 0; _i <= lastLeftIndex; _i += 1) {
        var _colFixed = flattenColumns[_i].fixed;
        if (_colFixed !== "left" && _colFixed !== true) {
          return true;
        }
      }
    }
    var firstRightIndex = flattenColumns.findIndex(function(_ref3) {
      var colFixed2 = _ref3.fixed;
      return colFixed2 === "right";
    });
    if (firstRightIndex >= 0) {
      for (var _i2 = firstRightIndex; _i2 < flattenColumns.length; _i2 += 1) {
        var _colFixed2 = flattenColumns[_i2].fixed;
        if (_colFixed2 !== "right") {
          return true;
        }
      }
    }
    return false;
  }, [flattenColumns]);
  var _useWidthColumns = useWidthColumns(flattenColumns, scrollWidth, clientWidth), _useWidthColumns2 = _slicedToArray(_useWidthColumns, 2), filledColumns = _useWidthColumns2[0], realScrollWidth = _useWidthColumns2[1];
  return [mergedColumns, filledColumns, realScrollWidth, hasGapFixed];
}
var React114, _excluded34, _excluded210, useColumns_default;
var init_useColumns = __esm({
  "node_modules/rc-table/es/hooks/useColumns/index.js"() {
    init_slicedToArray();
    init_defineProperty();
    init_toConsumableArray();
    init_typeof();
    init_objectSpread2();
    init_objectWithoutProperties();
    init_toArray();
    init_warning();
    React114 = __toESM(require_react());
    init_constant();
    init_legacyUtil2();
    init_useWidthColumns();
    _excluded34 = ["children"];
    _excluded210 = ["fixed"];
    useColumns_default = useColumns;
  }
});

// node_modules/rc-table/es/hooks/useExpand.js
function useExpand(props, mergedData, getRowKey) {
  var expandableConfig = getExpandableProps(props);
  var expandIcon = expandableConfig.expandIcon, expandedRowKeys = expandableConfig.expandedRowKeys, defaultExpandedRowKeys = expandableConfig.defaultExpandedRowKeys, defaultExpandAllRows = expandableConfig.defaultExpandAllRows, expandedRowRender = expandableConfig.expandedRowRender, onExpand = expandableConfig.onExpand, onExpandedRowsChange = expandableConfig.onExpandedRowsChange, childrenColumnName = expandableConfig.childrenColumnName;
  var mergedExpandIcon = expandIcon || renderExpandIcon;
  var mergedChildrenColumnName = childrenColumnName || "children";
  var expandableType = React115.useMemo(function() {
    if (expandedRowRender) {
      return "row";
    }
    if (props.expandable && props.internalHooks === INTERNAL_HOOKS && props.expandable.__PARENT_RENDER_ICON__ || mergedData.some(function(record) {
      return record && _typeof(record) === "object" && record[mergedChildrenColumnName];
    })) {
      return "nest";
    }
    return false;
  }, [!!expandedRowRender, mergedData]);
  var _React$useState = React115.useState(function() {
    if (defaultExpandedRowKeys) {
      return defaultExpandedRowKeys;
    }
    if (defaultExpandAllRows) {
      return findAllChildrenKeys(mergedData, getRowKey, mergedChildrenColumnName);
    }
    return [];
  }), _React$useState2 = _slicedToArray(_React$useState, 2), innerExpandedKeys = _React$useState2[0], setInnerExpandedKeys = _React$useState2[1];
  var mergedExpandedKeys = React115.useMemo(function() {
    return new Set(expandedRowKeys || innerExpandedKeys || []);
  }, [expandedRowKeys, innerExpandedKeys]);
  var onTriggerExpand = React115.useCallback(function(record) {
    var key = getRowKey(record, mergedData.indexOf(record));
    var newExpandedKeys;
    var hasKey = mergedExpandedKeys.has(key);
    if (hasKey) {
      mergedExpandedKeys.delete(key);
      newExpandedKeys = _toConsumableArray(mergedExpandedKeys);
    } else {
      newExpandedKeys = [].concat(_toConsumableArray(mergedExpandedKeys), [key]);
    }
    setInnerExpandedKeys(newExpandedKeys);
    if (onExpand) {
      onExpand(!hasKey, record);
    }
    if (onExpandedRowsChange) {
      onExpandedRowsChange(newExpandedKeys);
    }
  }, [getRowKey, mergedExpandedKeys, mergedData, onExpand, onExpandedRowsChange]);
  if (expandedRowRender && mergedData.some(function(record) {
    return Array.isArray(record === null || record === void 0 ? void 0 : record[mergedChildrenColumnName]);
  })) {
    warning_default(false, "`expandedRowRender` should not use with nested Table");
  }
  return [expandableConfig, expandableType, mergedExpandedKeys, mergedExpandIcon, mergedChildrenColumnName, onTriggerExpand];
}
var React115;
var init_useExpand = __esm({
  "node_modules/rc-table/es/hooks/useExpand.js"() {
    init_toConsumableArray();
    init_slicedToArray();
    init_typeof();
    init_warning();
    React115 = __toESM(require_react());
    init_constant();
    init_expandUtil();
    init_legacyUtil2();
  }
});

// node_modules/rc-table/es/hooks/useFixedInfo.js
function useFixedInfo(flattenColumns, stickyOffsets, direction) {
  var fixedInfoList = flattenColumns.map(function(_, colIndex) {
    return getCellFixedInfo(colIndex, colIndex, flattenColumns, stickyOffsets, direction);
  });
  return useMemo(function() {
    return fixedInfoList;
  }, [fixedInfoList], function(prev, next) {
    return !isEqual_default(prev, next);
  });
}
var init_useFixedInfo = __esm({
  "node_modules/rc-table/es/hooks/useFixedInfo.js"() {
    init_useMemo();
    init_isEqual();
    init_fixUtil();
  }
});

// node_modules/rc-table/es/hooks/useFrame.js
function useLayoutState(defaultState) {
  var stateRef = (0, import_react21.useRef)(defaultState);
  var _useState = (0, import_react21.useState)({}), _useState2 = _slicedToArray(_useState, 2), forceUpdate = _useState2[1];
  var lastPromiseRef = (0, import_react21.useRef)(null);
  var updateBatchRef = (0, import_react21.useRef)([]);
  function setFrameState(updater) {
    updateBatchRef.current.push(updater);
    var promise = Promise.resolve();
    lastPromiseRef.current = promise;
    promise.then(function() {
      if (lastPromiseRef.current === promise) {
        var prevBatch = updateBatchRef.current;
        var prevState = stateRef.current;
        updateBatchRef.current = [];
        prevBatch.forEach(function(batchUpdater) {
          stateRef.current = batchUpdater(stateRef.current);
        });
        lastPromiseRef.current = null;
        if (prevState !== stateRef.current) {
          forceUpdate({});
        }
      }
    });
  }
  (0, import_react21.useEffect)(function() {
    return function() {
      lastPromiseRef.current = null;
    };
  }, []);
  return [stateRef.current, setFrameState];
}
function useTimeoutLock(defaultState) {
  var frameRef = (0, import_react21.useRef)(defaultState || null);
  var timeoutRef = (0, import_react21.useRef)();
  function cleanUp() {
    window.clearTimeout(timeoutRef.current);
  }
  function setState(newState) {
    frameRef.current = newState;
    cleanUp();
    timeoutRef.current = window.setTimeout(function() {
      frameRef.current = null;
      timeoutRef.current = void 0;
    }, 100);
  }
  function getState() {
    return frameRef.current;
  }
  (0, import_react21.useEffect)(function() {
    return cleanUp;
  }, []);
  return [setState, getState];
}
var import_react21;
var init_useFrame = __esm({
  "node_modules/rc-table/es/hooks/useFrame.js"() {
    init_slicedToArray();
    import_react21 = __toESM(require_react());
  }
});

// node_modules/rc-table/es/hooks/useHover.js
function useHover() {
  var _React$useState = React116.useState(-1), _React$useState2 = _slicedToArray(_React$useState, 2), startRow = _React$useState2[0], setStartRow = _React$useState2[1];
  var _React$useState3 = React116.useState(-1), _React$useState4 = _slicedToArray(_React$useState3, 2), endRow = _React$useState4[0], setEndRow = _React$useState4[1];
  var onHover = React116.useCallback(function(start, end) {
    setStartRow(start);
    setEndRow(end);
  }, []);
  return [startRow, endRow, onHover];
}
var React116;
var init_useHover = __esm({
  "node_modules/rc-table/es/hooks/useHover.js"() {
    init_slicedToArray();
    React116 = __toESM(require_react());
  }
});

// node_modules/rc-table/es/hooks/useSticky.js
function useSticky(sticky, prefixCls) {
  var _ref = _typeof(sticky) === "object" ? sticky : {}, _ref$offsetHeader = _ref.offsetHeader, offsetHeader = _ref$offsetHeader === void 0 ? 0 : _ref$offsetHeader, _ref$offsetSummary = _ref.offsetSummary, offsetSummary = _ref$offsetSummary === void 0 ? 0 : _ref$offsetSummary, _ref$offsetScroll = _ref.offsetScroll, offsetScroll = _ref$offsetScroll === void 0 ? 0 : _ref$offsetScroll, _ref$getContainer = _ref.getContainer, getContainer = _ref$getContainer === void 0 ? function() {
    return defaultContainer;
  } : _ref$getContainer;
  var container = getContainer() || defaultContainer;
  var isSticky = !!sticky;
  return React117.useMemo(function() {
    return {
      isSticky,
      stickyClassName: isSticky ? "".concat(prefixCls, "-sticky-holder") : "",
      offsetHeader,
      offsetSummary,
      offsetScroll,
      container
    };
  }, [isSticky, offsetScroll, offsetHeader, offsetSummary, prefixCls, container]);
}
var React117, defaultContainer;
var init_useSticky = __esm({
  "node_modules/rc-table/es/hooks/useSticky.js"() {
    init_typeof();
    React117 = __toESM(require_react());
    init_canUseDom();
    defaultContainer = canUseDom() ? window : null;
  }
});

// node_modules/rc-table/es/hooks/useStickyOffsets.js
function useStickyOffsets(colWidths, flattenColumns, direction) {
  var stickyOffsets = (0, import_react22.useMemo)(function() {
    var columnCount = flattenColumns.length;
    var getOffsets = function getOffsets2(startIndex, endIndex, offset) {
      var offsets = [];
      var total = 0;
      for (var i = startIndex; i !== endIndex; i += offset) {
        offsets.push(total);
        if (flattenColumns[i].fixed) {
          total += colWidths[i] || 0;
        }
      }
      return offsets;
    };
    var startOffsets = getOffsets(0, columnCount, 1);
    var endOffsets = getOffsets(columnCount - 1, -1, -1).reverse();
    return direction === "rtl" ? {
      left: endOffsets,
      right: startOffsets
    } : {
      left: startOffsets,
      right: endOffsets
    };
  }, [colWidths, flattenColumns, direction]);
  return stickyOffsets;
}
var import_react22, useStickyOffsets_default;
var init_useStickyOffsets = __esm({
  "node_modules/rc-table/es/hooks/useStickyOffsets.js"() {
    import_react22 = __toESM(require_react());
    useStickyOffsets_default = useStickyOffsets;
  }
});

// node_modules/rc-table/es/Panel/index.js
function Panel(_ref) {
  var className = _ref.className, children = _ref.children;
  return React118.createElement("div", {
    className
  }, children);
}
var React118, Panel_default;
var init_Panel = __esm({
  "node_modules/rc-table/es/Panel/index.js"() {
    React118 = __toESM(require_react());
    Panel_default = Panel;
  }
});

// node_modules/rc-util/es/Dom/addEventListener.js
function addEventListenerWrap(target, eventType, cb, option) {
  var callback = import_react_dom7.default.unstable_batchedUpdates ? function run(e) {
    import_react_dom7.default.unstable_batchedUpdates(cb, e);
  } : cb;
  if (target !== null && target !== void 0 && target.addEventListener) {
    target.addEventListener(eventType, callback, option);
  }
  return {
    remove: function remove() {
      if (target !== null && target !== void 0 && target.removeEventListener) {
        target.removeEventListener(eventType, callback, option);
      }
    }
  };
}
var import_react_dom7;
var init_addEventListener = __esm({
  "node_modules/rc-util/es/Dom/addEventListener.js"() {
    import_react_dom7 = __toESM(require_react_dom());
  }
});

// node_modules/rc-table/es/utils/offsetUtil.js
function getOffset2(node) {
  var element = getDOM(node);
  var box = element.getBoundingClientRect();
  var docElem = document.documentElement;
  return {
    left: box.left + (window.pageXOffset || docElem.scrollLeft) - (docElem.clientLeft || document.body.clientLeft || 0),
    top: box.top + (window.pageYOffset || docElem.scrollTop) - (docElem.clientTop || document.body.clientTop || 0)
  };
}
var init_offsetUtil = __esm({
  "node_modules/rc-table/es/utils/offsetUtil.js"() {
    init_findDOMNode();
  }
});

// node_modules/rc-table/es/stickyScrollBar.js
var import_classnames32, React119, StickyScrollBar, stickyScrollBar_default;
var init_stickyScrollBar = __esm({
  "node_modules/rc-table/es/stickyScrollBar.js"() {
    init_defineProperty();
    init_objectSpread2();
    init_slicedToArray();
    init_es12();
    import_classnames32 = __toESM(require_classnames());
    init_addEventListener();
    init_getScrollBarSize();
    React119 = __toESM(require_react());
    init_TableContext();
    init_useFrame();
    init_raf();
    init_offsetUtil();
    init_findDOMNode();
    StickyScrollBar = function StickyScrollBar2(_ref, ref) {
      var _scrollBodyRef$curren, _scrollBodyRef$curren2;
      var scrollBodyRef = _ref.scrollBodyRef, onScroll = _ref.onScroll, offsetScroll = _ref.offsetScroll, container = _ref.container, direction = _ref.direction;
      var prefixCls = useContext23(TableContext_default, "prefixCls");
      var bodyScrollWidth = ((_scrollBodyRef$curren = scrollBodyRef.current) === null || _scrollBodyRef$curren === void 0 ? void 0 : _scrollBodyRef$curren.scrollWidth) || 0;
      var bodyWidth = ((_scrollBodyRef$curren2 = scrollBodyRef.current) === null || _scrollBodyRef$curren2 === void 0 ? void 0 : _scrollBodyRef$curren2.clientWidth) || 0;
      var scrollBarWidth = bodyScrollWidth && bodyWidth * (bodyWidth / bodyScrollWidth);
      var scrollBarRef = React119.useRef();
      var _useLayoutState = useLayoutState({
        scrollLeft: 0,
        isHiddenScrollBar: true
      }), _useLayoutState2 = _slicedToArray(_useLayoutState, 2), scrollState = _useLayoutState2[0], setScrollState = _useLayoutState2[1];
      var refState = React119.useRef({
        delta: 0,
        x: 0
      });
      var _React$useState = React119.useState(false), _React$useState2 = _slicedToArray(_React$useState, 2), isActive2 = _React$useState2[0], setActive = _React$useState2[1];
      var rafRef = React119.useRef(null);
      React119.useEffect(function() {
        return function() {
          raf_default.cancel(rafRef.current);
        };
      }, []);
      var onMouseUp = function onMouseUp2() {
        setActive(false);
      };
      var onMouseDown = function onMouseDown2(event) {
        event.persist();
        refState.current.delta = event.pageX - scrollState.scrollLeft;
        refState.current.x = 0;
        setActive(true);
        event.preventDefault();
      };
      var onMouseMove = function onMouseMove2(event) {
        var _window;
        var _ref2 = event || ((_window = window) === null || _window === void 0 ? void 0 : _window.event), buttons = _ref2.buttons;
        if (!isActive2 || buttons === 0) {
          if (isActive2) {
            setActive(false);
          }
          return;
        }
        var left = refState.current.x + event.pageX - refState.current.x - refState.current.delta;
        var isRTL = direction === "rtl";
        left = Math.max(isRTL ? scrollBarWidth - bodyWidth : 0, Math.min(isRTL ? 0 : bodyWidth - scrollBarWidth, left));
        var shouldScroll = !isRTL || Math.abs(left) + Math.abs(scrollBarWidth) < bodyWidth;
        if (shouldScroll) {
          onScroll({
            scrollLeft: left / bodyWidth * (bodyScrollWidth + 2)
          });
          refState.current.x = event.pageX;
        }
      };
      var checkScrollBarVisible = function checkScrollBarVisible2() {
        raf_default.cancel(rafRef.current);
        rafRef.current = raf_default(function() {
          if (!scrollBodyRef.current) {
            return;
          }
          var tableOffsetTop = getOffset2(scrollBodyRef.current).top;
          var tableBottomOffset = tableOffsetTop + scrollBodyRef.current.offsetHeight;
          var currentClientOffset = container === window ? document.documentElement.scrollTop + window.innerHeight : getOffset2(container).top + container.clientHeight;
          if (tableBottomOffset - getScrollBarSize() <= currentClientOffset || tableOffsetTop >= currentClientOffset - offsetScroll) {
            setScrollState(function(state) {
              return _objectSpread2(_objectSpread2({}, state), {}, {
                isHiddenScrollBar: true
              });
            });
          } else {
            setScrollState(function(state) {
              return _objectSpread2(_objectSpread2({}, state), {}, {
                isHiddenScrollBar: false
              });
            });
          }
        });
      };
      var setScrollLeft = function setScrollLeft2(left) {
        setScrollState(function(state) {
          return _objectSpread2(_objectSpread2({}, state), {}, {
            scrollLeft: left / bodyScrollWidth * bodyWidth || 0
          });
        });
      };
      React119.useImperativeHandle(ref, function() {
        return {
          setScrollLeft,
          checkScrollBarVisible
        };
      });
      React119.useEffect(function() {
        var onMouseUpListener = addEventListenerWrap(document.body, "mouseup", onMouseUp, false);
        var onMouseMoveListener = addEventListenerWrap(document.body, "mousemove", onMouseMove, false);
        checkScrollBarVisible();
        return function() {
          onMouseUpListener.remove();
          onMouseMoveListener.remove();
        };
      }, [scrollBarWidth, isActive2]);
      React119.useEffect(function() {
        if (!scrollBodyRef.current) return;
        var scrollParents = [];
        var parent = getDOM(scrollBodyRef.current);
        while (parent) {
          scrollParents.push(parent);
          parent = parent.parentElement;
        }
        scrollParents.forEach(function(p) {
          return p.addEventListener("scroll", checkScrollBarVisible, false);
        });
        window.addEventListener("resize", checkScrollBarVisible, false);
        window.addEventListener("scroll", checkScrollBarVisible, false);
        container.addEventListener("scroll", checkScrollBarVisible, false);
        return function() {
          scrollParents.forEach(function(p) {
            return p.removeEventListener("scroll", checkScrollBarVisible);
          });
          window.removeEventListener("resize", checkScrollBarVisible);
          window.removeEventListener("scroll", checkScrollBarVisible);
          container.removeEventListener("scroll", checkScrollBarVisible);
        };
      }, [container]);
      React119.useEffect(function() {
        if (!scrollState.isHiddenScrollBar) {
          setScrollState(function(state) {
            var bodyNode = scrollBodyRef.current;
            if (!bodyNode) {
              return state;
            }
            return _objectSpread2(_objectSpread2({}, state), {}, {
              scrollLeft: bodyNode.scrollLeft / bodyNode.scrollWidth * bodyNode.clientWidth
            });
          });
        }
      }, [scrollState.isHiddenScrollBar]);
      if (bodyScrollWidth <= bodyWidth || !scrollBarWidth || scrollState.isHiddenScrollBar) {
        return null;
      }
      return React119.createElement("div", {
        style: {
          height: getScrollBarSize(),
          width: bodyWidth,
          bottom: offsetScroll
        },
        className: "".concat(prefixCls, "-sticky-scroll")
      }, React119.createElement("div", {
        onMouseDown,
        ref: scrollBarRef,
        className: (0, import_classnames32.default)("".concat(prefixCls, "-sticky-scroll-bar"), _defineProperty({}, "".concat(prefixCls, "-sticky-scroll-bar-active"), isActive2)),
        style: {
          width: "".concat(scrollBarWidth, "px"),
          transform: "translate3d(".concat(scrollState.scrollLeft, "px, 0, 0)")
        }
      }));
    };
    stickyScrollBar_default = React119.forwardRef(StickyScrollBar);
  }
});

// node_modules/rc-table/es/Table.js
function defaultEmpty() {
  return "No Data";
}
function Table(tableProps, ref) {
  var props = _objectSpread2({
    rowKey: "key",
    prefixCls: DEFAULT_PREFIX,
    emptyText: defaultEmpty
  }, tableProps);
  var prefixCls = props.prefixCls, className = props.className, rowClassName = props.rowClassName, style2 = props.style, data = props.data, rowKey = props.rowKey, scroll = props.scroll, tableLayout = props.tableLayout, direction = props.direction, title = props.title, footer = props.footer, summary = props.summary, caption = props.caption, id = props.id, showHeader = props.showHeader, components = props.components, emptyText = props.emptyText, onRow = props.onRow, onHeaderRow = props.onHeaderRow, onScroll = props.onScroll, internalHooks = props.internalHooks, transformColumns = props.transformColumns, internalRefs = props.internalRefs, tailor = props.tailor, getContainerWidth = props.getContainerWidth, sticky = props.sticky, _props$rowHoverable = props.rowHoverable, rowHoverable = _props$rowHoverable === void 0 ? true : _props$rowHoverable;
  var mergedData = data || EMPTY_DATA2;
  var hasData = !!mergedData.length;
  var useInternalHooks = internalHooks === INTERNAL_HOOKS;
  if (true) {
    ["onRowClick", "onRowDoubleClick", "onRowContextMenu", "onRowMouseEnter", "onRowMouseLeave"].forEach(function(name) {
      warning_default(props[name] === void 0, "`".concat(name, "` is removed, please use `onRow` instead."));
    });
    warning_default(!("getBodyWrapper" in props), "`getBodyWrapper` is deprecated, please use custom `components` instead.");
  }
  var getComponent = React120.useCallback(function(path, defaultComponent) {
    return get(components, path) || defaultComponent;
  }, [components]);
  var getRowKey = React120.useMemo(function() {
    if (typeof rowKey === "function") {
      return rowKey;
    }
    return function(record) {
      var key = record && record[rowKey];
      if (true) {
        warning_default(key !== void 0, "Each record in table should have a unique `key` prop, or set `rowKey` to an unique primary key.");
      }
      return key;
    };
  }, [rowKey]);
  var customizeScrollBody = getComponent(["body"]);
  var _useHover = useHover(), _useHover2 = _slicedToArray(_useHover, 3), startRow = _useHover2[0], endRow = _useHover2[1], onHover = _useHover2[2];
  var _useExpand = useExpand(props, mergedData, getRowKey), _useExpand2 = _slicedToArray(_useExpand, 6), expandableConfig = _useExpand2[0], expandableType = _useExpand2[1], mergedExpandedKeys = _useExpand2[2], mergedExpandIcon = _useExpand2[3], mergedChildrenColumnName = _useExpand2[4], onTriggerExpand = _useExpand2[5];
  var scrollX = scroll === null || scroll === void 0 ? void 0 : scroll.x;
  var _React$useState = React120.useState(0), _React$useState2 = _slicedToArray(_React$useState, 2), componentWidth = _React$useState2[0], setComponentWidth = _React$useState2[1];
  var _useColumns = useColumns_default(_objectSpread2(_objectSpread2(_objectSpread2({}, props), expandableConfig), {}, {
    expandable: !!expandableConfig.expandedRowRender,
    columnTitle: expandableConfig.columnTitle,
    expandedKeys: mergedExpandedKeys,
    getRowKey,
    // https://github.com/ant-design/ant-design/issues/23894
    onTriggerExpand,
    expandIcon: mergedExpandIcon,
    expandIconColumnIndex: expandableConfig.expandIconColumnIndex,
    direction,
    scrollWidth: useInternalHooks && tailor && typeof scrollX === "number" ? scrollX : null,
    clientWidth: componentWidth
  }), useInternalHooks ? transformColumns : null), _useColumns2 = _slicedToArray(_useColumns, 4), columns = _useColumns2[0], flattenColumns = _useColumns2[1], flattenScrollX = _useColumns2[2], hasGapFixed = _useColumns2[3];
  var mergedScrollX = flattenScrollX !== null && flattenScrollX !== void 0 ? flattenScrollX : scrollX;
  var columnContext = React120.useMemo(function() {
    return {
      columns,
      flattenColumns
    };
  }, [columns, flattenColumns]);
  var fullTableRef = React120.useRef();
  var scrollHeaderRef = React120.useRef();
  var scrollBodyRef = React120.useRef();
  var scrollBodyContainerRef = React120.useRef();
  React120.useImperativeHandle(ref, function() {
    return {
      nativeElement: fullTableRef.current,
      scrollTo: function scrollTo(config) {
        var _scrollBodyRef$curren3;
        if (scrollBodyRef.current instanceof HTMLElement) {
          var index2 = config.index, top = config.top, key = config.key;
          if (validNumberValue(top)) {
            var _scrollBodyRef$curren;
            (_scrollBodyRef$curren = scrollBodyRef.current) === null || _scrollBodyRef$curren === void 0 || _scrollBodyRef$curren.scrollTo({
              top
            });
          } else {
            var _scrollBodyRef$curren2;
            var mergedKey = key !== null && key !== void 0 ? key : getRowKey(mergedData[index2]);
            (_scrollBodyRef$curren2 = scrollBodyRef.current.querySelector('[data-row-key="'.concat(mergedKey, '"]'))) === null || _scrollBodyRef$curren2 === void 0 || _scrollBodyRef$curren2.scrollIntoView();
          }
        } else if ((_scrollBodyRef$curren3 = scrollBodyRef.current) !== null && _scrollBodyRef$curren3 !== void 0 && _scrollBodyRef$curren3.scrollTo) {
          scrollBodyRef.current.scrollTo(config);
        }
      }
    };
  });
  var scrollSummaryRef = React120.useRef();
  var _React$useState3 = React120.useState(false), _React$useState4 = _slicedToArray(_React$useState3, 2), pingedLeft = _React$useState4[0], setPingedLeft = _React$useState4[1];
  var _React$useState5 = React120.useState(false), _React$useState6 = _slicedToArray(_React$useState5, 2), pingedRight = _React$useState6[0], setPingedRight = _React$useState6[1];
  var _React$useState7 = React120.useState(/* @__PURE__ */ new Map()), _React$useState8 = _slicedToArray(_React$useState7, 2), colsWidths = _React$useState8[0], updateColsWidths = _React$useState8[1];
  var colsKeys = getColumnsKey(flattenColumns);
  var pureColWidths = colsKeys.map(function(columnKey) {
    return colsWidths.get(columnKey);
  });
  var colWidths = React120.useMemo(function() {
    return pureColWidths;
  }, [pureColWidths.join("_")]);
  var stickyOffsets = useStickyOffsets_default(colWidths, flattenColumns, direction);
  var fixHeader = scroll && validateValue(scroll.y);
  var horizonScroll = scroll && validateValue(mergedScrollX) || Boolean(expandableConfig.fixed);
  var fixColumn = horizonScroll && flattenColumns.some(function(_ref) {
    var fixed = _ref.fixed;
    return fixed;
  });
  var stickyRef = React120.useRef();
  var _useSticky = useSticky(sticky, prefixCls), isSticky = _useSticky.isSticky, offsetHeader = _useSticky.offsetHeader, offsetSummary = _useSticky.offsetSummary, offsetScroll = _useSticky.offsetScroll, stickyClassName = _useSticky.stickyClassName, container = _useSticky.container;
  var summaryNode = React120.useMemo(function() {
    return summary === null || summary === void 0 ? void 0 : summary(mergedData);
  }, [summary, mergedData]);
  var fixFooter = (fixHeader || isSticky) && React120.isValidElement(summaryNode) && summaryNode.type === Summary_default && summaryNode.props.fixed;
  var scrollXStyle;
  var scrollYStyle;
  var scrollTableStyle;
  if (fixHeader) {
    scrollYStyle = {
      overflowY: hasData ? "scroll" : "auto",
      maxHeight: scroll.y
    };
  }
  if (horizonScroll) {
    scrollXStyle = {
      overflowX: "auto"
    };
    if (!fixHeader) {
      scrollYStyle = {
        overflowY: "hidden"
      };
    }
    scrollTableStyle = {
      width: mergedScrollX === true ? "auto" : mergedScrollX,
      minWidth: "100%"
    };
  }
  var onColumnResize = React120.useCallback(function(columnKey, width) {
    updateColsWidths(function(widths) {
      if (widths.get(columnKey) !== width) {
        var newWidths = new Map(widths);
        newWidths.set(columnKey, width);
        return newWidths;
      }
      return widths;
    });
  }, []);
  var _useTimeoutLock = useTimeoutLock(null), _useTimeoutLock2 = _slicedToArray(_useTimeoutLock, 2), setScrollTarget = _useTimeoutLock2[0], getScrollTarget = _useTimeoutLock2[1];
  function forceScroll(scrollLeft, target) {
    if (!target) {
      return;
    }
    if (typeof target === "function") {
      target(scrollLeft);
    } else if (target.scrollLeft !== scrollLeft) {
      target.scrollLeft = scrollLeft;
      if (target.scrollLeft !== scrollLeft) {
        setTimeout(function() {
          target.scrollLeft = scrollLeft;
        }, 0);
      }
    }
  }
  var onInternalScroll = useEvent(function(_ref2) {
    var currentTarget = _ref2.currentTarget, scrollLeft = _ref2.scrollLeft;
    var isRTL = direction === "rtl";
    var mergedScrollLeft = typeof scrollLeft === "number" ? scrollLeft : currentTarget.scrollLeft;
    var compareTarget = currentTarget || EMPTY_SCROLL_TARGET;
    if (!getScrollTarget() || getScrollTarget() === compareTarget) {
      var _stickyRef$current;
      setScrollTarget(compareTarget);
      forceScroll(mergedScrollLeft, scrollHeaderRef.current);
      forceScroll(mergedScrollLeft, scrollBodyRef.current);
      forceScroll(mergedScrollLeft, scrollSummaryRef.current);
      forceScroll(mergedScrollLeft, (_stickyRef$current = stickyRef.current) === null || _stickyRef$current === void 0 ? void 0 : _stickyRef$current.setScrollLeft);
    }
    var measureTarget = currentTarget || scrollHeaderRef.current;
    if (measureTarget) {
      var scrollWidth = (
        // Should use mergedScrollX in virtual table(useInternalHooks && tailor === true)
        useInternalHooks && tailor && typeof mergedScrollX === "number" ? mergedScrollX : measureTarget.scrollWidth
      );
      var clientWidth = measureTarget.clientWidth;
      if (scrollWidth === clientWidth) {
        setPingedLeft(false);
        setPingedRight(false);
        return;
      }
      if (isRTL) {
        setPingedLeft(-mergedScrollLeft < scrollWidth - clientWidth);
        setPingedRight(-mergedScrollLeft > 0);
      } else {
        setPingedLeft(mergedScrollLeft > 0);
        setPingedRight(mergedScrollLeft < scrollWidth - clientWidth);
      }
    }
  });
  var onBodyScroll = useEvent(function(e) {
    onInternalScroll(e);
    onScroll === null || onScroll === void 0 || onScroll(e);
  });
  var triggerOnScroll = function triggerOnScroll2() {
    if (horizonScroll && scrollBodyRef.current) {
      var _scrollBodyRef$curren4;
      onInternalScroll({
        currentTarget: getDOM(scrollBodyRef.current),
        scrollLeft: (_scrollBodyRef$curren4 = scrollBodyRef.current) === null || _scrollBodyRef$curren4 === void 0 ? void 0 : _scrollBodyRef$curren4.scrollLeft
      });
    } else {
      setPingedLeft(false);
      setPingedRight(false);
    }
  };
  var onFullTableResize = function onFullTableResize2(_ref3) {
    var _stickyRef$current2;
    var width = _ref3.width;
    (_stickyRef$current2 = stickyRef.current) === null || _stickyRef$current2 === void 0 || _stickyRef$current2.checkScrollBarVisible();
    var mergedWidth = fullTableRef.current ? fullTableRef.current.offsetWidth : width;
    if (useInternalHooks && getContainerWidth && fullTableRef.current) {
      mergedWidth = getContainerWidth(fullTableRef.current, mergedWidth) || mergedWidth;
    }
    if (mergedWidth !== componentWidth) {
      triggerOnScroll();
      setComponentWidth(mergedWidth);
    }
  };
  var mounted = React120.useRef(false);
  React120.useEffect(function() {
    if (mounted.current) {
      triggerOnScroll();
    }
  }, [horizonScroll, data, columns.length]);
  React120.useEffect(function() {
    mounted.current = true;
  }, []);
  var _React$useState9 = React120.useState(0), _React$useState10 = _slicedToArray(_React$useState9, 2), scrollbarSize = _React$useState10[0], setScrollbarSize = _React$useState10[1];
  var _React$useState11 = React120.useState(true), _React$useState12 = _slicedToArray(_React$useState11, 2), supportSticky = _React$useState12[0], setSupportSticky = _React$useState12[1];
  useLayoutEffect_default(function() {
    if (!tailor || !useInternalHooks) {
      if (scrollBodyRef.current instanceof Element) {
        setScrollbarSize(getTargetScrollBarSize(scrollBodyRef.current).width);
      } else {
        setScrollbarSize(getTargetScrollBarSize(scrollBodyContainerRef.current).width);
      }
    }
    setSupportSticky(isStyleSupport("position", "sticky"));
  }, []);
  React120.useEffect(function() {
    if (useInternalHooks && internalRefs) {
      internalRefs.body.current = scrollBodyRef.current;
    }
  });
  var renderFixedHeaderTable = React120.useCallback(function(fixedHolderPassProps) {
    return React120.createElement(React120.Fragment, null, React120.createElement(Header_default, fixedHolderPassProps), fixFooter === "top" && React120.createElement(Footer_default, fixedHolderPassProps, summaryNode));
  }, [fixFooter, summaryNode]);
  var renderFixedFooterTable = React120.useCallback(function(fixedHolderPassProps) {
    return React120.createElement(Footer_default, fixedHolderPassProps, summaryNode);
  }, [summaryNode]);
  var TableComponent = getComponent(["table"], "table");
  var mergedTableLayout = React120.useMemo(function() {
    if (tableLayout) {
      return tableLayout;
    }
    if (fixColumn) {
      return mergedScrollX === "max-content" ? "auto" : "fixed";
    }
    if (fixHeader || isSticky || flattenColumns.some(function(_ref4) {
      var ellipsis = _ref4.ellipsis;
      return ellipsis;
    })) {
      return "fixed";
    }
    return "auto";
  }, [fixHeader, fixColumn, flattenColumns, tableLayout, isSticky]);
  var groupTableNode;
  var headerProps = {
    colWidths,
    columCount: flattenColumns.length,
    stickyOffsets,
    onHeaderRow,
    fixHeader,
    scroll
  };
  var emptyNode = React120.useMemo(function() {
    if (hasData) {
      return null;
    }
    if (typeof emptyText === "function") {
      return emptyText();
    }
    return emptyText;
  }, [hasData, emptyText]);
  var bodyTable = React120.createElement(Body_default, {
    data: mergedData,
    measureColumnWidth: fixHeader || horizonScroll || isSticky
  });
  var bodyColGroup = React120.createElement(ColGroup_default, {
    colWidths: flattenColumns.map(function(_ref5) {
      var width = _ref5.width;
      return width;
    }),
    columns: flattenColumns
  });
  var captionElement = caption !== null && caption !== void 0 ? React120.createElement("caption", {
    className: "".concat(prefixCls, "-caption")
  }, caption) : void 0;
  var dataProps = pickAttrs(props, {
    data: true
  });
  var ariaProps = pickAttrs(props, {
    aria: true
  });
  if (fixHeader || isSticky) {
    var bodyContent;
    if (typeof customizeScrollBody === "function") {
      bodyContent = customizeScrollBody(mergedData, {
        scrollbarSize,
        ref: scrollBodyRef,
        onScroll: onInternalScroll
      });
      headerProps.colWidths = flattenColumns.map(function(_ref6, index2) {
        var width = _ref6.width;
        var colWidth = index2 === flattenColumns.length - 1 ? width - scrollbarSize : width;
        if (typeof colWidth === "number" && !Number.isNaN(colWidth)) {
          return colWidth;
        }
        if (true) {
          warning_default(props.columns.length === 0, "When use `components.body` with render props. Each column should have a fixed `width` value.");
        }
        return 0;
      });
    } else {
      bodyContent = React120.createElement("div", {
        style: _objectSpread2(_objectSpread2({}, scrollXStyle), scrollYStyle),
        onScroll: onBodyScroll,
        ref: scrollBodyRef,
        className: (0, import_classnames33.default)("".concat(prefixCls, "-body"))
      }, React120.createElement(TableComponent, _extends({
        style: _objectSpread2(_objectSpread2({}, scrollTableStyle), {}, {
          tableLayout: mergedTableLayout
        })
      }, ariaProps), captionElement, bodyColGroup, bodyTable, !fixFooter && summaryNode && React120.createElement(Footer_default, {
        stickyOffsets,
        flattenColumns
      }, summaryNode)));
    }
    var fixedHolderProps = _objectSpread2(_objectSpread2(_objectSpread2({
      noData: !mergedData.length,
      maxContentScroll: horizonScroll && mergedScrollX === "max-content"
    }, headerProps), columnContext), {}, {
      direction,
      stickyClassName,
      onScroll: onInternalScroll
    });
    groupTableNode = React120.createElement(React120.Fragment, null, showHeader !== false && React120.createElement(FixedHolder_default, _extends({}, fixedHolderProps, {
      stickyTopOffset: offsetHeader,
      className: "".concat(prefixCls, "-header"),
      ref: scrollHeaderRef
    }), renderFixedHeaderTable), bodyContent, fixFooter && fixFooter !== "top" && React120.createElement(FixedHolder_default, _extends({}, fixedHolderProps, {
      stickyBottomOffset: offsetSummary,
      className: "".concat(prefixCls, "-summary"),
      ref: scrollSummaryRef
    }), renderFixedFooterTable), isSticky && scrollBodyRef.current && scrollBodyRef.current instanceof Element && React120.createElement(stickyScrollBar_default, {
      ref: stickyRef,
      offsetScroll,
      scrollBodyRef,
      onScroll: onInternalScroll,
      container,
      direction
    }));
  } else {
    groupTableNode = React120.createElement("div", {
      style: _objectSpread2(_objectSpread2({}, scrollXStyle), scrollYStyle),
      className: (0, import_classnames33.default)("".concat(prefixCls, "-content")),
      onScroll: onInternalScroll,
      ref: scrollBodyRef
    }, React120.createElement(TableComponent, _extends({
      style: _objectSpread2(_objectSpread2({}, scrollTableStyle), {}, {
        tableLayout: mergedTableLayout
      })
    }, ariaProps), captionElement, bodyColGroup, showHeader !== false && React120.createElement(Header_default, _extends({}, headerProps, columnContext)), bodyTable, summaryNode && React120.createElement(Footer_default, {
      stickyOffsets,
      flattenColumns
    }, summaryNode)));
  }
  var fullTable = React120.createElement("div", _extends({
    className: (0, import_classnames33.default)(prefixCls, className, _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty({}, "".concat(prefixCls, "-rtl"), direction === "rtl"), "".concat(prefixCls, "-ping-left"), pingedLeft), "".concat(prefixCls, "-ping-right"), pingedRight), "".concat(prefixCls, "-layout-fixed"), tableLayout === "fixed"), "".concat(prefixCls, "-fixed-header"), fixHeader), "".concat(prefixCls, "-fixed-column"), fixColumn), "".concat(prefixCls, "-fixed-column-gapped"), fixColumn && hasGapFixed), "".concat(prefixCls, "-scroll-horizontal"), horizonScroll), "".concat(prefixCls, "-has-fix-left"), flattenColumns[0] && flattenColumns[0].fixed), "".concat(prefixCls, "-has-fix-right"), flattenColumns[flattenColumns.length - 1] && flattenColumns[flattenColumns.length - 1].fixed === "right")),
    style: style2,
    id,
    ref: fullTableRef
  }, dataProps), title && React120.createElement(Panel_default, {
    className: "".concat(prefixCls, "-title")
  }, title(mergedData)), React120.createElement("div", {
    ref: scrollBodyContainerRef,
    className: "".concat(prefixCls, "-container")
  }, groupTableNode), footer && React120.createElement(Panel_default, {
    className: "".concat(prefixCls, "-footer")
  }, footer(mergedData)));
  if (horizonScroll) {
    fullTable = React120.createElement(es_default, {
      onResize: onFullTableResize
    }, fullTable);
  }
  var fixedInfoList = useFixedInfo(flattenColumns, stickyOffsets, direction);
  var TableContextValue = React120.useMemo(function() {
    return {
      // Scroll
      scrollX: mergedScrollX,
      // Table
      prefixCls,
      getComponent,
      scrollbarSize,
      direction,
      fixedInfoList,
      isSticky,
      supportSticky,
      componentWidth,
      fixHeader,
      fixColumn,
      horizonScroll,
      // Body
      tableLayout: mergedTableLayout,
      rowClassName,
      expandedRowClassName: expandableConfig.expandedRowClassName,
      expandIcon: mergedExpandIcon,
      expandableType,
      expandRowByClick: expandableConfig.expandRowByClick,
      expandedRowRender: expandableConfig.expandedRowRender,
      expandedRowOffset: expandableConfig.expandedRowOffset,
      onTriggerExpand,
      expandIconColumnIndex: expandableConfig.expandIconColumnIndex,
      indentSize: expandableConfig.indentSize,
      allColumnsFixedLeft: flattenColumns.every(function(col) {
        return col.fixed === "left";
      }),
      emptyNode,
      // Column
      columns,
      flattenColumns,
      onColumnResize,
      colWidths,
      // Row
      hoverStartRow: startRow,
      hoverEndRow: endRow,
      onHover,
      rowExpandable: expandableConfig.rowExpandable,
      onRow,
      getRowKey,
      expandedKeys: mergedExpandedKeys,
      childrenColumnName: mergedChildrenColumnName,
      rowHoverable
    };
  }, [
    // Scroll
    mergedScrollX,
    // Table
    prefixCls,
    getComponent,
    scrollbarSize,
    direction,
    fixedInfoList,
    isSticky,
    supportSticky,
    componentWidth,
    fixHeader,
    fixColumn,
    horizonScroll,
    // Body
    mergedTableLayout,
    rowClassName,
    expandableConfig.expandedRowClassName,
    mergedExpandIcon,
    expandableType,
    expandableConfig.expandRowByClick,
    expandableConfig.expandedRowRender,
    expandableConfig.expandedRowOffset,
    onTriggerExpand,
    expandableConfig.expandIconColumnIndex,
    expandableConfig.indentSize,
    emptyNode,
    // Column
    columns,
    flattenColumns,
    onColumnResize,
    colWidths,
    // Row
    startRow,
    endRow,
    onHover,
    expandableConfig.rowExpandable,
    onRow,
    getRowKey,
    mergedExpandedKeys,
    mergedChildrenColumnName,
    rowHoverable
  ]);
  return React120.createElement(TableContext_default.Provider, {
    value: TableContextValue
  }, fullTable);
}
function genTable(shouldTriggerRender) {
  return makeImmutable2(RefTable, shouldTriggerRender);
}
var import_classnames33, React120, DEFAULT_PREFIX, EMPTY_DATA2, EMPTY_SCROLL_TARGET, RefTable, ImmutableTable, Table_default;
var init_Table = __esm({
  "node_modules/rc-table/es/Table.js"() {
    init_defineProperty();
    init_extends();
    init_slicedToArray();
    init_objectSpread2();
    import_classnames33 = __toESM(require_classnames());
    init_es3();
    init_styleChecker();
    init_getScrollBarSize();
    init_useEvent();
    init_pickAttrs();
    init_get();
    init_warning();
    React120 = __toESM(require_react());
    init_Body();
    init_ColGroup();
    init_constant();
    init_TableContext();
    init_FixedHolder();
    init_Footer();
    init_Summary();
    init_Header();
    init_useColumns();
    init_useExpand();
    init_useFixedInfo();
    init_useFrame();
    init_useHover();
    init_useSticky();
    init_useStickyOffsets();
    init_Panel();
    init_stickyScrollBar();
    init_Column();
    init_ColumnGroup();
    init_valueUtil2();
    init_findDOMNode();
    init_useLayoutEffect();
    DEFAULT_PREFIX = "rc-table";
    EMPTY_DATA2 = [];
    EMPTY_SCROLL_TARGET = {};
    RefTable = React120.forwardRef(Table);
    if (true) {
      RefTable.displayName = "Table";
    }
    ImmutableTable = genTable();
    ImmutableTable.EXPAND_COLUMN = EXPAND_COLUMN;
    ImmutableTable.INTERNAL_HOOKS = INTERNAL_HOOKS;
    ImmutableTable.Column = Column_default;
    ImmutableTable.ColumnGroup = ColumnGroup_default;
    ImmutableTable.Summary = FooterComponents;
    Table_default = ImmutableTable;
  }
});

// node_modules/rc-table/es/VirtualTable/context.js
var StaticContext, GridContext;
var init_context5 = __esm({
  "node_modules/rc-table/es/VirtualTable/context.js"() {
    init_es12();
    StaticContext = createContext12(null);
    GridContext = createContext12(null);
  }
});

// node_modules/rc-table/es/VirtualTable/VirtualCell.js
function getColumnWidth(colIndex, colSpan, columnsOffset) {
  var mergedColSpan = colSpan || 1;
  return columnsOffset[colIndex + mergedColSpan] - (columnsOffset[colIndex] || 0);
}
function VirtualCell(props) {
  var rowInfo = props.rowInfo, column = props.column, colIndex = props.colIndex, indent = props.indent, index2 = props.index, component = props.component, renderIndex = props.renderIndex, record = props.record, style2 = props.style, className = props.className, inverse = props.inverse, getHeight = props.getHeight;
  var render = column.render, dataIndex = column.dataIndex, columnClassName = column.className, colWidth = column.width;
  var _useContext = useContext23(GridContext, ["columnsOffset"]), columnsOffset = _useContext.columnsOffset;
  var _getCellProps = getCellProps(rowInfo, column, colIndex, indent, index2), key = _getCellProps.key, fixedInfo = _getCellProps.fixedInfo, appendCellNode = _getCellProps.appendCellNode, additionalCellProps = _getCellProps.additionalCellProps;
  var cellStyle = additionalCellProps.style, _additionalCellProps$ = additionalCellProps.colSpan, colSpan = _additionalCellProps$ === void 0 ? 1 : _additionalCellProps$, _additionalCellProps$2 = additionalCellProps.rowSpan, rowSpan = _additionalCellProps$2 === void 0 ? 1 : _additionalCellProps$2;
  var startColIndex = colIndex - 1;
  var concatColWidth = getColumnWidth(startColIndex, colSpan, columnsOffset);
  var marginOffset = colSpan > 1 ? colWidth - concatColWidth : 0;
  var mergedStyle = _objectSpread2(_objectSpread2(_objectSpread2({}, cellStyle), style2), {}, {
    flex: "0 0 ".concat(concatColWidth, "px"),
    width: "".concat(concatColWidth, "px"),
    marginRight: marginOffset,
    pointerEvents: "auto"
  });
  var needHide = React121.useMemo(function() {
    if (inverse) {
      return rowSpan <= 1;
    } else {
      return colSpan === 0 || rowSpan === 0 || rowSpan > 1;
    }
  }, [rowSpan, colSpan, inverse]);
  if (needHide) {
    mergedStyle.visibility = "hidden";
  } else if (inverse) {
    mergedStyle.height = getHeight === null || getHeight === void 0 ? void 0 : getHeight(rowSpan);
  }
  var mergedRender = needHide ? function() {
    return null;
  } : render;
  var cellSpan = {};
  if (rowSpan === 0 || colSpan === 0) {
    cellSpan.rowSpan = 1;
    cellSpan.colSpan = 1;
  }
  return React121.createElement(Cell_default, _extends({
    className: (0, import_classnames34.default)(columnClassName, className),
    ellipsis: column.ellipsis,
    align: column.align,
    scope: column.rowScope,
    component,
    prefixCls: rowInfo.prefixCls,
    key,
    record,
    index: index2,
    renderIndex,
    dataIndex,
    render: mergedRender,
    shouldCellUpdate: column.shouldCellUpdate
  }, fixedInfo, {
    appendNode: appendCellNode,
    additionalProps: _objectSpread2(_objectSpread2({}, additionalCellProps), {}, {
      style: mergedStyle
    }, cellSpan)
  }));
}
var import_classnames34, React121, VirtualCell_default;
var init_VirtualCell = __esm({
  "node_modules/rc-table/es/VirtualTable/VirtualCell.js"() {
    init_extends();
    init_objectSpread2();
    init_es12();
    import_classnames34 = __toESM(require_classnames());
    React121 = __toESM(require_react());
    init_BodyRow();
    init_Cell();
    init_context5();
    VirtualCell_default = VirtualCell;
  }
});

// node_modules/rc-table/es/VirtualTable/BodyLine.js
var import_classnames35, React122, _excluded35, BodyLine, ResponseBodyLine, BodyLine_default;
var init_BodyLine = __esm({
  "node_modules/rc-table/es/VirtualTable/BodyLine.js"() {
    init_extends();
    init_objectSpread2();
    init_defineProperty();
    init_objectWithoutProperties();
    init_es12();
    import_classnames35 = __toESM(require_classnames());
    React122 = __toESM(require_react());
    init_Cell();
    init_TableContext();
    init_useRowInfo();
    init_VirtualCell();
    init_context5();
    init_expandUtil();
    _excluded35 = ["data", "index", "className", "rowKey", "style", "extra", "getHeight"];
    BodyLine = React122.forwardRef(function(props, ref) {
      var data = props.data, index2 = props.index, className = props.className, rowKey = props.rowKey, style2 = props.style, extra = props.extra, getHeight = props.getHeight, restProps = _objectWithoutProperties(props, _excluded35);
      var record = data.record, indent = data.indent, renderIndex = data.index;
      var _useContext = useContext23(TableContext_default, ["prefixCls", "flattenColumns", "fixColumn", "componentWidth", "scrollX"]), scrollX = _useContext.scrollX, flattenColumns = _useContext.flattenColumns, prefixCls = _useContext.prefixCls, fixColumn = _useContext.fixColumn, componentWidth = _useContext.componentWidth;
      var _useContext2 = useContext23(StaticContext, ["getComponent"]), getComponent = _useContext2.getComponent;
      var rowInfo = useRowInfo(record, rowKey, index2, indent);
      var RowComponent = getComponent(["body", "row"], "div");
      var cellComponent = getComponent(["body", "cell"], "div");
      var rowSupportExpand = rowInfo.rowSupportExpand, expanded = rowInfo.expanded, rowProps = rowInfo.rowProps, expandedRowRender = rowInfo.expandedRowRender, expandedRowClassName = rowInfo.expandedRowClassName;
      var expandRowNode;
      if (rowSupportExpand && expanded) {
        var expandContent = expandedRowRender(record, index2, indent + 1, expanded);
        var expandedClsName = computedExpandedClassName(expandedRowClassName, record, index2, indent);
        var additionalProps = {};
        if (fixColumn) {
          additionalProps = {
            style: _defineProperty({}, "--virtual-width", "".concat(componentWidth, "px"))
          };
        }
        var rowCellCls = "".concat(prefixCls, "-expanded-row-cell");
        expandRowNode = React122.createElement(RowComponent, {
          className: (0, import_classnames35.default)("".concat(prefixCls, "-expanded-row"), "".concat(prefixCls, "-expanded-row-level-").concat(indent + 1), expandedClsName)
        }, React122.createElement(Cell_default, {
          component: cellComponent,
          prefixCls,
          className: (0, import_classnames35.default)(rowCellCls, _defineProperty({}, "".concat(rowCellCls, "-fixed"), fixColumn)),
          additionalProps
        }, expandContent));
      }
      var rowStyle = _objectSpread2(_objectSpread2({}, style2), {}, {
        width: scrollX
      });
      if (extra) {
        rowStyle.position = "absolute";
        rowStyle.pointerEvents = "none";
      }
      var rowNode = React122.createElement(RowComponent, _extends({}, rowProps, restProps, {
        "data-row-key": rowKey,
        ref: rowSupportExpand ? null : ref,
        className: (0, import_classnames35.default)(className, "".concat(prefixCls, "-row"), rowProps === null || rowProps === void 0 ? void 0 : rowProps.className, _defineProperty({}, "".concat(prefixCls, "-row-extra"), extra)),
        style: _objectSpread2(_objectSpread2({}, rowStyle), rowProps === null || rowProps === void 0 ? void 0 : rowProps.style)
      }), flattenColumns.map(function(column, colIndex) {
        return React122.createElement(VirtualCell_default, {
          key: colIndex,
          component: cellComponent,
          rowInfo,
          column,
          colIndex,
          indent,
          index: index2,
          renderIndex,
          record,
          inverse: extra,
          getHeight
        });
      }));
      if (rowSupportExpand) {
        return React122.createElement("div", {
          ref
        }, rowNode, expandRowNode);
      }
      return rowNode;
    });
    ResponseBodyLine = responseImmutable2(BodyLine);
    if (true) {
      ResponseBodyLine.displayName = "BodyLine";
    }
    BodyLine_default = ResponseBodyLine;
  }
});

// node_modules/rc-table/es/VirtualTable/BodyGrid.js
var React123, Grid, ResponseGrid, BodyGrid_default;
var init_BodyGrid = __esm({
  "node_modules/rc-table/es/VirtualTable/BodyGrid.js"() {
    init_typeof();
    init_slicedToArray();
    init_es12();
    init_es8();
    React123 = __toESM(require_react());
    init_TableContext();
    init_useFlattenRecords();
    init_BodyLine();
    init_context5();
    Grid = React123.forwardRef(function(props, ref) {
      var data = props.data, onScroll = props.onScroll;
      var _useContext = useContext23(TableContext_default, ["flattenColumns", "onColumnResize", "getRowKey", "prefixCls", "expandedKeys", "childrenColumnName", "scrollX", "direction"]), flattenColumns = _useContext.flattenColumns, onColumnResize = _useContext.onColumnResize, getRowKey = _useContext.getRowKey, expandedKeys = _useContext.expandedKeys, prefixCls = _useContext.prefixCls, childrenColumnName = _useContext.childrenColumnName, scrollX = _useContext.scrollX, direction = _useContext.direction;
      var _useContext2 = useContext23(StaticContext), sticky = _useContext2.sticky, scrollY = _useContext2.scrollY, listItemHeight = _useContext2.listItemHeight, getComponent = _useContext2.getComponent, onTablePropScroll = _useContext2.onScroll;
      var listRef = React123.useRef();
      var flattenData = useFlattenRecords(data, childrenColumnName, expandedKeys, getRowKey);
      var columnsWidth = React123.useMemo(function() {
        var total = 0;
        return flattenColumns.map(function(_ref) {
          var width = _ref.width, key = _ref.key;
          total += width;
          return [key, width, total];
        });
      }, [flattenColumns]);
      var columnsOffset = React123.useMemo(function() {
        return columnsWidth.map(function(colWidth) {
          return colWidth[2];
        });
      }, [columnsWidth]);
      React123.useEffect(function() {
        columnsWidth.forEach(function(_ref2) {
          var _ref3 = _slicedToArray(_ref2, 2), key = _ref3[0], width = _ref3[1];
          onColumnResize(key, width);
        });
      }, [columnsWidth]);
      React123.useImperativeHandle(ref, function() {
        var _listRef$current2;
        var obj = {
          scrollTo: function scrollTo(config) {
            var _listRef$current;
            (_listRef$current = listRef.current) === null || _listRef$current === void 0 || _listRef$current.scrollTo(config);
          },
          nativeElement: (_listRef$current2 = listRef.current) === null || _listRef$current2 === void 0 ? void 0 : _listRef$current2.nativeElement
        };
        Object.defineProperty(obj, "scrollLeft", {
          get: function get2() {
            var _listRef$current3;
            return ((_listRef$current3 = listRef.current) === null || _listRef$current3 === void 0 ? void 0 : _listRef$current3.getScrollInfo().x) || 0;
          },
          set: function set(value) {
            var _listRef$current4;
            (_listRef$current4 = listRef.current) === null || _listRef$current4 === void 0 || _listRef$current4.scrollTo({
              left: value
            });
          }
        });
        return obj;
      });
      var getRowSpan = function getRowSpan2(column, index2) {
        var _flattenData$index;
        var record = (_flattenData$index = flattenData[index2]) === null || _flattenData$index === void 0 ? void 0 : _flattenData$index.record;
        var onCell = column.onCell;
        if (onCell) {
          var _cellProps$rowSpan;
          var cellProps = onCell(record, index2);
          return (_cellProps$rowSpan = cellProps === null || cellProps === void 0 ? void 0 : cellProps.rowSpan) !== null && _cellProps$rowSpan !== void 0 ? _cellProps$rowSpan : 1;
        }
        return 1;
      };
      var extraRender = function extraRender2(info) {
        var start = info.start, end = info.end, getSize = info.getSize, offsetY = info.offsetY;
        if (end < 0) {
          return null;
        }
        var firstRowSpanColumns = flattenColumns.filter(
          // rowSpan is 0
          function(column) {
            return getRowSpan(column, start) === 0;
          }
        );
        var startIndex = start;
        var _loop = function _loop4(i2) {
          firstRowSpanColumns = firstRowSpanColumns.filter(function(column) {
            return getRowSpan(column, i2) === 0;
          });
          if (!firstRowSpanColumns.length) {
            startIndex = i2;
            return 1;
          }
        };
        for (var i = start; i >= 0; i -= 1) {
          if (_loop(i)) break;
        }
        var lastRowSpanColumns = flattenColumns.filter(
          // rowSpan is not 1
          function(column) {
            return getRowSpan(column, end) !== 1;
          }
        );
        var endIndex = end;
        var _loop2 = function _loop22(_i3) {
          lastRowSpanColumns = lastRowSpanColumns.filter(function(column) {
            return getRowSpan(column, _i3) !== 1;
          });
          if (!lastRowSpanColumns.length) {
            endIndex = Math.max(_i3 - 1, end);
            return 1;
          }
        };
        for (var _i = end; _i < flattenData.length; _i += 1) {
          if (_loop2(_i)) break;
        }
        var spanLines = [];
        var _loop3 = function _loop32(_i22) {
          var item = flattenData[_i22];
          if (!item) {
            return 1;
          }
          if (flattenColumns.some(function(column) {
            return getRowSpan(column, _i22) > 1;
          })) {
            spanLines.push(_i22);
          }
        };
        for (var _i2 = startIndex; _i2 <= endIndex; _i2 += 1) {
          if (_loop3(_i2)) continue;
        }
        var nodes = spanLines.map(function(index2) {
          var item = flattenData[index2];
          var rowKey = getRowKey(item.record, index2);
          var getHeight = function getHeight2(rowSpan) {
            var endItemIndex = index2 + rowSpan - 1;
            var endItemKey = getRowKey(flattenData[endItemIndex].record, endItemIndex);
            var sizeInfo2 = getSize(rowKey, endItemKey);
            return sizeInfo2.bottom - sizeInfo2.top;
          };
          var sizeInfo = getSize(rowKey);
          return React123.createElement(BodyLine_default, {
            key: index2,
            data: item,
            rowKey,
            index: index2,
            style: {
              top: -offsetY + sizeInfo.top
            },
            extra: true,
            getHeight
          });
        });
        return nodes;
      };
      var gridContext = React123.useMemo(function() {
        return {
          columnsOffset
        };
      }, [columnsOffset]);
      var tblPrefixCls = "".concat(prefixCls, "-tbody");
      var wrapperComponent = getComponent(["body", "wrapper"]);
      var horizontalScrollBarStyle = {};
      if (sticky) {
        horizontalScrollBarStyle.position = "sticky";
        horizontalScrollBarStyle.bottom = 0;
        if (_typeof(sticky) === "object" && sticky.offsetScroll) {
          horizontalScrollBarStyle.bottom = sticky.offsetScroll;
        }
      }
      return React123.createElement(GridContext.Provider, {
        value: gridContext
      }, React123.createElement(es_default6, {
        fullHeight: false,
        ref: listRef,
        prefixCls: "".concat(tblPrefixCls, "-virtual"),
        styles: {
          horizontalScrollBar: horizontalScrollBarStyle
        },
        className: tblPrefixCls,
        height: scrollY,
        itemHeight: listItemHeight || 24,
        data: flattenData,
        itemKey: function itemKey3(item) {
          return getRowKey(item.record);
        },
        component: wrapperComponent,
        scrollWidth: scrollX,
        direction,
        onVirtualScroll: function onVirtualScroll(_ref4) {
          var _listRef$current5;
          var x = _ref4.x;
          onScroll({
            currentTarget: (_listRef$current5 = listRef.current) === null || _listRef$current5 === void 0 ? void 0 : _listRef$current5.nativeElement,
            scrollLeft: x
          });
        },
        onScroll: onTablePropScroll,
        extraRender
      }, function(item, index2, itemProps) {
        var rowKey = getRowKey(item.record, index2);
        return React123.createElement(BodyLine_default, {
          data: item,
          rowKey,
          index: index2,
          style: itemProps.style
        });
      }));
    });
    ResponseGrid = responseImmutable2(Grid);
    if (true) {
      ResponseGrid.displayName = "ResponseGrid";
    }
    BodyGrid_default = ResponseGrid;
  }
});

// node_modules/rc-table/es/VirtualTable/index.js
function VirtualTable(props, ref) {
  var data = props.data, columns = props.columns, scroll = props.scroll, sticky = props.sticky, _props$prefixCls = props.prefixCls, prefixCls = _props$prefixCls === void 0 ? DEFAULT_PREFIX : _props$prefixCls, className = props.className, listItemHeight = props.listItemHeight, components = props.components, onScroll = props.onScroll;
  var _ref = scroll || {}, scrollX = _ref.x, scrollY = _ref.y;
  if (typeof scrollX !== "number") {
    if (true) {
      warning_default(!scrollX, "`scroll.x` in virtual table must be number.");
    }
    scrollX = 1;
  }
  if (typeof scrollY !== "number") {
    scrollY = 500;
    if (true) {
      warning_default(false, "`scroll.y` in virtual table must be number.");
    }
  }
  var getComponent = useEvent(function(path, defaultComponent) {
    return get(components, path) || defaultComponent;
  });
  var onInternalScroll = useEvent(onScroll);
  var context = React124.useMemo(function() {
    return {
      sticky,
      scrollY,
      listItemHeight,
      getComponent,
      onScroll: onInternalScroll
    };
  }, [sticky, scrollY, listItemHeight, getComponent, onInternalScroll]);
  return React124.createElement(StaticContext.Provider, {
    value: context
  }, React124.createElement(Table_default, _extends({}, props, {
    className: (0, import_classnames36.default)(className, "".concat(prefixCls, "-virtual")),
    scroll: _objectSpread2(_objectSpread2({}, scroll), {}, {
      x: scrollX
    }),
    components: _objectSpread2(_objectSpread2({}, components), {}, {
      // fix https://github.com/ant-design/ant-design/issues/48991
      body: data !== null && data !== void 0 && data.length ? renderBody : void 0
    }),
    columns,
    internalHooks: INTERNAL_HOOKS,
    tailor: true,
    ref
  })));
}
function genVirtualTable(shouldTriggerRender) {
  return makeImmutable2(RefVirtualTable, shouldTriggerRender);
}
var import_classnames36, React124, renderBody, RefVirtualTable, VirtualTable_default;
var init_VirtualTable = __esm({
  "node_modules/rc-table/es/VirtualTable/index.js"() {
    init_extends();
    init_objectSpread2();
    import_classnames36 = __toESM(require_classnames());
    init_es2();
    React124 = __toESM(require_react());
    init_constant();
    init_TableContext();
    init_Table();
    init_BodyGrid();
    init_context5();
    init_get();
    renderBody = function renderBody2(rawData, props) {
      var ref = props.ref, onScroll = props.onScroll;
      return React124.createElement(BodyGrid_default, {
        ref,
        data: rawData,
        onScroll
      });
    };
    RefVirtualTable = React124.forwardRef(VirtualTable);
    if (true) {
      RefVirtualTable.displayName = "VirtualTable";
    }
    VirtualTable_default = genVirtualTable();
  }
});

// node_modules/rc-table/es/index.js
var es_exports6 = {};
__export(es_exports6, {
  Column: () => Column_default,
  ColumnGroup: () => ColumnGroup_default,
  EXPAND_COLUMN: () => EXPAND_COLUMN,
  INTERNAL_COL_DEFINE: () => INTERNAL_COL_DEFINE,
  INTERNAL_HOOKS: () => INTERNAL_HOOKS,
  Summary: () => FooterComponents,
  VirtualTable: () => VirtualTable_default,
  default: () => es_default10,
  genTable: () => genTable,
  genVirtualTable: () => genVirtualTable
});
var es_default10;
var init_es13 = __esm({
  "node_modules/rc-table/es/index.js"() {
    init_constant();
    init_Footer();
    init_Column();
    init_ColumnGroup();
    init_Table();
    init_legacyUtil2();
    init_VirtualTable();
    es_default10 = Table_default;
  }
});

// node_modules/rc-tree/es/contextTypes.js
var React125, TreeContext, UnstableContext;
var init_contextTypes = __esm({
  "node_modules/rc-tree/es/contextTypes.js"() {
    React125 = __toESM(require_react());
    TreeContext = React125.createContext(null);
    UnstableContext = React125.createContext({});
  }
});

// node_modules/rc-tree/es/Indent.js
var import_classnames37, React126, Indent, Indent_default;
var init_Indent = __esm({
  "node_modules/rc-tree/es/Indent.js"() {
    init_defineProperty();
    import_classnames37 = __toESM(require_classnames());
    React126 = __toESM(require_react());
    Indent = function Indent2(_ref) {
      var prefixCls = _ref.prefixCls, level = _ref.level, isStart = _ref.isStart, isEnd = _ref.isEnd;
      var baseClassName = "".concat(prefixCls, "-indent-unit");
      var list = [];
      for (var i = 0; i < level; i += 1) {
        list.push(React126.createElement("span", {
          key: i,
          className: (0, import_classnames37.default)(baseClassName, _defineProperty(_defineProperty({}, "".concat(baseClassName, "-start"), isStart[i]), "".concat(baseClassName, "-end"), isEnd[i]))
        }));
      }
      return React126.createElement("span", {
        "aria-hidden": "true",
        className: "".concat(prefixCls, "-indent")
      }, list);
    };
    Indent_default = React126.memo(Indent);
  }
});

// node_modules/rc-tree/es/utils/keyUtil.js
function getEntity(keyEntities, key) {
  return keyEntities[key];
}
var init_keyUtil2 = __esm({
  "node_modules/rc-tree/es/utils/keyUtil.js"() {
  }
});

// node_modules/rc-tree/es/utils/treeUtil.js
function getPosition(level, index2) {
  return "".concat(level, "-").concat(index2);
}
function isTreeNode(node) {
  return node && node.type && node.type.isTreeNode;
}
function getKey2(key, pos) {
  if (key !== null && key !== void 0) {
    return key;
  }
  return pos;
}
function fillFieldNames2(fieldNames) {
  var _ref = fieldNames || {}, title = _ref.title, _title = _ref._title, key = _ref.key, children = _ref.children;
  var mergedTitle = title || "title";
  return {
    title: mergedTitle,
    _title: _title || [mergedTitle],
    key: key || "key",
    children: children || "children"
  };
}
function warningWithoutKey(treeData, fieldNames) {
  var keys = /* @__PURE__ */ new Map();
  function dig(list) {
    var path = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "";
    (list || []).forEach(function(treeNode) {
      var key = treeNode[fieldNames.key];
      var children = treeNode[fieldNames.children];
      warning_default(key !== null && key !== void 0, "Tree node must have a certain key: [".concat(path).concat(key, "]"));
      var recordKey = String(key);
      warning_default(!keys.has(recordKey) || key === null || key === void 0, "Same 'key' exist in the Tree: ".concat(recordKey));
      keys.set(recordKey, true);
      dig(children, "".concat(path).concat(recordKey, " > "));
    });
  }
  dig(treeData);
}
function convertTreeToData(rootNodes) {
  function dig(node) {
    var treeNodes = toArray(node);
    return treeNodes.map(function(treeNode) {
      if (!isTreeNode(treeNode)) {
        warning_default(!treeNode, "Tree/TreeNode can only accept TreeNode as children.");
        return null;
      }
      var key = treeNode.key;
      var _treeNode$props = treeNode.props, children = _treeNode$props.children, rest = _objectWithoutProperties(_treeNode$props, _excluded36);
      var dataNode = _objectSpread2({
        key
      }, rest);
      var parsedChildren = dig(children);
      if (parsedChildren.length) {
        dataNode.children = parsedChildren;
      }
      return dataNode;
    }).filter(function(dataNode) {
      return dataNode;
    });
  }
  return dig(rootNodes);
}
function flattenTreeData(treeNodeList, expandedKeys, fieldNames) {
  var _fillFieldNames = fillFieldNames2(fieldNames), fieldTitles = _fillFieldNames._title, fieldKey = _fillFieldNames.key, fieldChildren = _fillFieldNames.children;
  var expandedKeySet = new Set(expandedKeys === true ? [] : expandedKeys);
  var flattenList = [];
  function dig(list) {
    var parent = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
    return list.map(function(treeNode, index2) {
      var pos = getPosition(parent ? parent.pos : "0", index2);
      var mergedKey = getKey2(treeNode[fieldKey], pos);
      var mergedTitle;
      for (var i = 0; i < fieldTitles.length; i += 1) {
        var fieldTitle = fieldTitles[i];
        if (treeNode[fieldTitle] !== void 0) {
          mergedTitle = treeNode[fieldTitle];
          break;
        }
      }
      var flattenNode = Object.assign(omit(treeNode, [].concat(_toConsumableArray(fieldTitles), [fieldKey, fieldChildren])), {
        title: mergedTitle,
        key: mergedKey,
        parent,
        pos,
        children: null,
        data: treeNode,
        isStart: [].concat(_toConsumableArray(parent ? parent.isStart : []), [index2 === 0]),
        isEnd: [].concat(_toConsumableArray(parent ? parent.isEnd : []), [index2 === list.length - 1])
      });
      flattenList.push(flattenNode);
      if (expandedKeys === true || expandedKeySet.has(mergedKey)) {
        flattenNode.children = dig(treeNode[fieldChildren] || [], flattenNode);
      } else {
        flattenNode.children = [];
      }
      return flattenNode;
    });
  }
  dig(treeNodeList);
  return flattenList;
}
function traverseDataNodes(dataNodes, callback, config) {
  var mergedConfig = {};
  if (_typeof(config) === "object") {
    mergedConfig = config;
  } else {
    mergedConfig = {
      externalGetKey: config
    };
  }
  mergedConfig = mergedConfig || {};
  var _mergedConfig = mergedConfig, childrenPropName = _mergedConfig.childrenPropName, externalGetKey = _mergedConfig.externalGetKey, fieldNames = _mergedConfig.fieldNames;
  var _fillFieldNames2 = fillFieldNames2(fieldNames), fieldKey = _fillFieldNames2.key, fieldChildren = _fillFieldNames2.children;
  var mergeChildrenPropName = childrenPropName || fieldChildren;
  var syntheticGetKey;
  if (externalGetKey) {
    if (typeof externalGetKey === "string") {
      syntheticGetKey = function syntheticGetKey2(node) {
        return node[externalGetKey];
      };
    } else if (typeof externalGetKey === "function") {
      syntheticGetKey = function syntheticGetKey2(node) {
        return externalGetKey(node);
      };
    }
  } else {
    syntheticGetKey = function syntheticGetKey2(node, pos) {
      return getKey2(node[fieldKey], pos);
    };
  }
  function processNode(node, index2, parent, pathNodes) {
    var children = node ? node[mergeChildrenPropName] : dataNodes;
    var pos = node ? getPosition(parent.pos, index2) : "0";
    var connectNodes = node ? [].concat(_toConsumableArray(pathNodes), [node]) : [];
    if (node) {
      var key = syntheticGetKey(node, pos);
      var _data = {
        node,
        index: index2,
        pos,
        key,
        parentPos: parent.node ? parent.pos : null,
        level: parent.level + 1,
        nodes: connectNodes
      };
      callback(_data);
    }
    if (children) {
      children.forEach(function(subNode, subIndex) {
        processNode(subNode, subIndex, {
          node,
          pos,
          level: parent ? parent.level + 1 : -1
        }, connectNodes);
      });
    }
  }
  processNode(null);
}
function convertDataToEntities(dataNodes) {
  var _ref2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, initWrapper = _ref2.initWrapper, processEntity = _ref2.processEntity, onProcessFinished = _ref2.onProcessFinished, externalGetKey = _ref2.externalGetKey, childrenPropName = _ref2.childrenPropName, fieldNames = _ref2.fieldNames;
  var legacyExternalGetKey = arguments.length > 2 ? arguments[2] : void 0;
  var mergedExternalGetKey = externalGetKey || legacyExternalGetKey;
  var posEntities = {};
  var keyEntities = {};
  var wrapper = {
    posEntities,
    keyEntities
  };
  if (initWrapper) {
    wrapper = initWrapper(wrapper) || wrapper;
  }
  traverseDataNodes(dataNodes, function(item) {
    var node = item.node, index2 = item.index, pos = item.pos, key = item.key, parentPos = item.parentPos, level = item.level, nodes = item.nodes;
    var entity = {
      node,
      nodes,
      index: index2,
      key,
      pos,
      level
    };
    var mergedKey = getKey2(key, pos);
    posEntities[pos] = entity;
    keyEntities[mergedKey] = entity;
    entity.parent = posEntities[parentPos];
    if (entity.parent) {
      entity.parent.children = entity.parent.children || [];
      entity.parent.children.push(entity);
    }
    if (processEntity) {
      processEntity(entity, wrapper);
    }
  }, {
    externalGetKey: mergedExternalGetKey,
    childrenPropName,
    fieldNames
  });
  if (onProcessFinished) {
    onProcessFinished(wrapper);
  }
  return wrapper;
}
function getTreeNodeProps(key, _ref3) {
  var expandedKeys = _ref3.expandedKeys, selectedKeys = _ref3.selectedKeys, loadedKeys = _ref3.loadedKeys, loadingKeys = _ref3.loadingKeys, checkedKeys = _ref3.checkedKeys, halfCheckedKeys = _ref3.halfCheckedKeys, dragOverNodeKey = _ref3.dragOverNodeKey, dropPosition = _ref3.dropPosition, keyEntities = _ref3.keyEntities;
  var entity = getEntity(keyEntities, key);
  var treeNodeProps = {
    eventKey: key,
    expanded: expandedKeys.indexOf(key) !== -1,
    selected: selectedKeys.indexOf(key) !== -1,
    loaded: loadedKeys.indexOf(key) !== -1,
    loading: loadingKeys.indexOf(key) !== -1,
    checked: checkedKeys.indexOf(key) !== -1,
    halfChecked: halfCheckedKeys.indexOf(key) !== -1,
    pos: String(entity ? entity.pos : ""),
    // [Legacy] Drag props
    // Since the interaction of drag is changed, the semantic of the props are
    // not accuracy, I think it should be finally removed
    dragOver: dragOverNodeKey === key && dropPosition === 0,
    dragOverGapTop: dragOverNodeKey === key && dropPosition === -1,
    dragOverGapBottom: dragOverNodeKey === key && dropPosition === 1
  };
  return treeNodeProps;
}
function convertNodePropsToEventData(props) {
  var data = props.data, expanded = props.expanded, selected = props.selected, checked = props.checked, loaded = props.loaded, loading = props.loading, halfChecked = props.halfChecked, dragOver = props.dragOver, dragOverGapTop = props.dragOverGapTop, dragOverGapBottom = props.dragOverGapBottom, pos = props.pos, active = props.active, eventKey = props.eventKey;
  var eventData = _objectSpread2(_objectSpread2({}, data), {}, {
    expanded,
    selected,
    checked,
    loaded,
    loading,
    halfChecked,
    dragOver,
    dragOverGapTop,
    dragOverGapBottom,
    pos,
    active,
    key: eventKey
  });
  if (!("props" in eventData)) {
    Object.defineProperty(eventData, "props", {
      get: function get2() {
        warning_default(false, "Second param return from event is node data instead of TreeNode instance. Please read value directly instead of reading from `props`.");
        return props;
      }
    });
  }
  return eventData;
}
var _excluded36;
var init_treeUtil = __esm({
  "node_modules/rc-tree/es/utils/treeUtil.js"() {
    init_typeof();
    init_toConsumableArray();
    init_objectSpread2();
    init_objectWithoutProperties();
    init_toArray();
    init_omit();
    init_warning();
    init_keyUtil2();
    _excluded36 = ["children"];
  }
});

// node_modules/rc-tree/es/TreeNode.js
var import_react23, import_classnames38, _excluded37, ICON_OPEN, ICON_CLOSE, defaultTitle, TreeNode, TreeNode_default;
var init_TreeNode = __esm({
  "node_modules/rc-tree/es/TreeNode.js"() {
    init_extends();
    init_defineProperty();
    init_objectSpread2();
    init_slicedToArray();
    init_objectWithoutProperties();
    import_react23 = __toESM(require_react());
    import_classnames38 = __toESM(require_classnames());
    init_pickAttrs();
    init_contextTypes();
    init_Indent();
    init_keyUtil2();
    init_treeUtil();
    _excluded37 = ["eventKey", "className", "style", "dragOver", "dragOverGapTop", "dragOverGapBottom", "isLeaf", "isStart", "isEnd", "expanded", "selected", "checked", "halfChecked", "loading", "domRef", "active", "data", "onMouseMove", "selectable"];
    ICON_OPEN = "open";
    ICON_CLOSE = "close";
    defaultTitle = "---";
    TreeNode = function TreeNode2(props) {
      var _unstableContext$node, _context$filterTreeNo, _classNames4;
      var eventKey = props.eventKey, className = props.className, style2 = props.style, dragOver = props.dragOver, dragOverGapTop = props.dragOverGapTop, dragOverGapBottom = props.dragOverGapBottom, isLeaf = props.isLeaf, isStart = props.isStart, isEnd = props.isEnd, expanded = props.expanded, selected = props.selected, checked = props.checked, halfChecked = props.halfChecked, loading = props.loading, domRef = props.domRef, active = props.active, data = props.data, onMouseMove = props.onMouseMove, selectable = props.selectable, otherProps = _objectWithoutProperties(props, _excluded37);
      var context = import_react23.default.useContext(TreeContext);
      var unstableContext = import_react23.default.useContext(UnstableContext);
      var selectHandleRef = import_react23.default.useRef(null);
      var _React$useState = import_react23.default.useState(false), _React$useState2 = _slicedToArray(_React$useState, 2), dragNodeHighlight = _React$useState2[0], setDragNodeHighlight = _React$useState2[1];
      var isDisabled = !!(context.disabled || props.disabled || (_unstableContext$node = unstableContext.nodeDisabled) !== null && _unstableContext$node !== void 0 && _unstableContext$node.call(unstableContext, data));
      var isCheckable = import_react23.default.useMemo(function() {
        if (!context.checkable || props.checkable === false) {
          return false;
        }
        return context.checkable;
      }, [context.checkable, props.checkable]);
      var onSelect = function onSelect2(e) {
        if (isDisabled) {
          return;
        }
        context.onNodeSelect(e, convertNodePropsToEventData(props));
      };
      var onCheck = function onCheck2(e) {
        if (isDisabled) {
          return;
        }
        if (!isCheckable || props.disableCheckbox) {
          return;
        }
        context.onNodeCheck(e, convertNodePropsToEventData(props), !checked);
      };
      var isSelectable = import_react23.default.useMemo(function() {
        if (typeof selectable === "boolean") {
          return selectable;
        }
        return context.selectable;
      }, [selectable, context.selectable]);
      var onSelectorClick = function onSelectorClick2(e) {
        context.onNodeClick(e, convertNodePropsToEventData(props));
        if (isSelectable) {
          onSelect(e);
        } else {
          onCheck(e);
        }
      };
      var onSelectorDoubleClick = function onSelectorDoubleClick2(e) {
        context.onNodeDoubleClick(e, convertNodePropsToEventData(props));
      };
      var onMouseEnter = function onMouseEnter2(e) {
        context.onNodeMouseEnter(e, convertNodePropsToEventData(props));
      };
      var onMouseLeave = function onMouseLeave2(e) {
        context.onNodeMouseLeave(e, convertNodePropsToEventData(props));
      };
      var onContextMenu = function onContextMenu2(e) {
        context.onNodeContextMenu(e, convertNodePropsToEventData(props));
      };
      var isDraggable = import_react23.default.useMemo(function() {
        return !!(context.draggable && (!context.draggable.nodeDraggable || context.draggable.nodeDraggable(data)));
      }, [context.draggable, data]);
      var onDragStart = function onDragStart2(e) {
        e.stopPropagation();
        setDragNodeHighlight(true);
        context.onNodeDragStart(e, props);
        try {
          e.dataTransfer.setData("text/plain", "");
        } catch (_unused) {
        }
      };
      var onDragEnter = function onDragEnter2(e) {
        e.preventDefault();
        e.stopPropagation();
        context.onNodeDragEnter(e, props);
      };
      var onDragOver = function onDragOver2(e) {
        e.preventDefault();
        e.stopPropagation();
        context.onNodeDragOver(e, props);
      };
      var onDragLeave = function onDragLeave2(e) {
        e.stopPropagation();
        context.onNodeDragLeave(e, props);
      };
      var onDragEnd = function onDragEnd2(e) {
        e.stopPropagation();
        setDragNodeHighlight(false);
        context.onNodeDragEnd(e, props);
      };
      var onDrop = function onDrop2(e) {
        e.preventDefault();
        e.stopPropagation();
        setDragNodeHighlight(false);
        context.onNodeDrop(e, props);
      };
      var onExpand = function onExpand2(e) {
        if (loading) {
          return;
        }
        context.onNodeExpand(e, convertNodePropsToEventData(props));
      };
      var hasChildren = import_react23.default.useMemo(function() {
        var _ref = getEntity(context.keyEntities, eventKey) || {}, children = _ref.children;
        return Boolean((children || []).length);
      }, [context.keyEntities, eventKey]);
      var memoizedIsLeaf = import_react23.default.useMemo(function() {
        if (isLeaf === false) {
          return false;
        }
        return isLeaf || !context.loadData && !hasChildren || context.loadData && props.loaded && !hasChildren;
      }, [isLeaf, context.loadData, hasChildren, props.loaded]);
      import_react23.default.useEffect(function() {
        if (loading) {
          return;
        }
        if (typeof context.loadData === "function" && expanded && !memoizedIsLeaf && !props.loaded) {
          context.onNodeLoad(convertNodePropsToEventData(props));
        }
      }, [loading, context.loadData, context.onNodeLoad, expanded, memoizedIsLeaf, props]);
      var dragHandlerNode = import_react23.default.useMemo(function() {
        var _context$draggable;
        if (!((_context$draggable = context.draggable) !== null && _context$draggable !== void 0 && _context$draggable.icon)) {
          return null;
        }
        return import_react23.default.createElement("span", {
          className: "".concat(context.prefixCls, "-draggable-icon")
        }, context.draggable.icon);
      }, [context.draggable]);
      var renderSwitcherIconDom = function renderSwitcherIconDom2(isInternalLeaf) {
        var switcherIcon = props.switcherIcon || context.switcherIcon;
        if (typeof switcherIcon === "function") {
          return switcherIcon(_objectSpread2(_objectSpread2({}, props), {}, {
            isLeaf: isInternalLeaf
          }));
        }
        return switcherIcon;
      };
      var renderSwitcher = function renderSwitcher2() {
        if (memoizedIsLeaf) {
          var _switcherIconDom = renderSwitcherIconDom(true);
          return _switcherIconDom !== false ? import_react23.default.createElement("span", {
            className: (0, import_classnames38.default)("".concat(context.prefixCls, "-switcher"), "".concat(context.prefixCls, "-switcher-noop"))
          }, _switcherIconDom) : null;
        }
        var switcherIconDom = renderSwitcherIconDom(false);
        return switcherIconDom !== false ? import_react23.default.createElement("span", {
          onClick: onExpand,
          className: (0, import_classnames38.default)("".concat(context.prefixCls, "-switcher"), "".concat(context.prefixCls, "-switcher_").concat(expanded ? ICON_OPEN : ICON_CLOSE))
        }, switcherIconDom) : null;
      };
      var checkboxNode = import_react23.default.useMemo(function() {
        if (!isCheckable) {
          return null;
        }
        var $custom = typeof isCheckable !== "boolean" ? isCheckable : null;
        return import_react23.default.createElement("span", {
          className: (0, import_classnames38.default)("".concat(context.prefixCls, "-checkbox"), _defineProperty(_defineProperty(_defineProperty({}, "".concat(context.prefixCls, "-checkbox-checked"), checked), "".concat(context.prefixCls, "-checkbox-indeterminate"), !checked && halfChecked), "".concat(context.prefixCls, "-checkbox-disabled"), isDisabled || props.disableCheckbox)),
          onClick: onCheck,
          role: "checkbox",
          "aria-checked": halfChecked ? "mixed" : checked,
          "aria-disabled": isDisabled || props.disableCheckbox,
          "aria-label": "Select ".concat(typeof props.title === "string" ? props.title : "tree node")
        }, $custom);
      }, [isCheckable, checked, halfChecked, isDisabled, props.disableCheckbox, props.title]);
      var nodeState = import_react23.default.useMemo(function() {
        if (memoizedIsLeaf) {
          return null;
        }
        return expanded ? ICON_OPEN : ICON_CLOSE;
      }, [memoizedIsLeaf, expanded]);
      var iconNode = import_react23.default.useMemo(function() {
        return import_react23.default.createElement("span", {
          className: (0, import_classnames38.default)("".concat(context.prefixCls, "-iconEle"), "".concat(context.prefixCls, "-icon__").concat(nodeState || "docu"), _defineProperty({}, "".concat(context.prefixCls, "-icon_loading"), loading))
        });
      }, [context.prefixCls, nodeState, loading]);
      var dropIndicatorNode = import_react23.default.useMemo(function() {
        var rootDraggable = Boolean(context.draggable);
        var showIndicator = !props.disabled && rootDraggable && context.dragOverNodeKey === eventKey;
        if (!showIndicator) {
          return null;
        }
        return context.dropIndicatorRender({
          dropPosition: context.dropPosition,
          dropLevelOffset: context.dropLevelOffset,
          indent: context.indent,
          prefixCls: context.prefixCls,
          direction: context.direction
        });
      }, [context.dropPosition, context.dropLevelOffset, context.indent, context.prefixCls, context.direction, context.draggable, context.dragOverNodeKey, context.dropIndicatorRender]);
      var selectorNode = import_react23.default.useMemo(function() {
        var _props$title = props.title, title = _props$title === void 0 ? defaultTitle : _props$title;
        var wrapClass = "".concat(context.prefixCls, "-node-content-wrapper");
        var $icon;
        if (context.showIcon) {
          var currentIcon = props.icon || context.icon;
          $icon = currentIcon ? import_react23.default.createElement("span", {
            className: (0, import_classnames38.default)("".concat(context.prefixCls, "-iconEle"), "".concat(context.prefixCls, "-icon__customize"))
          }, typeof currentIcon === "function" ? currentIcon(props) : currentIcon) : iconNode;
        } else if (context.loadData && loading) {
          $icon = iconNode;
        }
        var titleNode;
        if (typeof title === "function") {
          titleNode = title(data);
        } else if (context.titleRender) {
          titleNode = context.titleRender(data);
        } else {
          titleNode = title;
        }
        return import_react23.default.createElement("span", {
          ref: selectHandleRef,
          title: typeof title === "string" ? title : "",
          className: (0, import_classnames38.default)(wrapClass, "".concat(wrapClass, "-").concat(nodeState || "normal"), _defineProperty({}, "".concat(context.prefixCls, "-node-selected"), !isDisabled && (selected || dragNodeHighlight))),
          onMouseEnter,
          onMouseLeave,
          onContextMenu,
          onClick: onSelectorClick,
          onDoubleClick: onSelectorDoubleClick
        }, $icon, import_react23.default.createElement("span", {
          className: "".concat(context.prefixCls, "-title")
        }, titleNode), dropIndicatorNode);
      }, [context.prefixCls, context.showIcon, props, context.icon, iconNode, context.titleRender, data, nodeState, onMouseEnter, onMouseLeave, onContextMenu, onSelectorClick, onSelectorDoubleClick]);
      var dataOrAriaAttributeProps = pickAttrs(otherProps, {
        aria: true,
        data: true
      });
      var _ref2 = getEntity(context.keyEntities, eventKey) || {}, level = _ref2.level;
      var isEndNode = isEnd[isEnd.length - 1];
      var draggableWithoutDisabled = !isDisabled && isDraggable;
      var dragging = context.draggingNodeKey === eventKey;
      var ariaSelected = selectable !== void 0 ? {
        "aria-selected": !!selectable
      } : void 0;
      return import_react23.default.createElement("div", _extends({
        ref: domRef,
        role: "treeitem",
        "aria-expanded": isLeaf ? void 0 : expanded,
        className: (0, import_classnames38.default)(className, "".concat(context.prefixCls, "-treenode"), (_classNames4 = {}, _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_classNames4, "".concat(context.prefixCls, "-treenode-disabled"), isDisabled), "".concat(context.prefixCls, "-treenode-switcher-").concat(expanded ? "open" : "close"), !isLeaf), "".concat(context.prefixCls, "-treenode-checkbox-checked"), checked), "".concat(context.prefixCls, "-treenode-checkbox-indeterminate"), halfChecked), "".concat(context.prefixCls, "-treenode-selected"), selected), "".concat(context.prefixCls, "-treenode-loading"), loading), "".concat(context.prefixCls, "-treenode-active"), active), "".concat(context.prefixCls, "-treenode-leaf-last"), isEndNode), "".concat(context.prefixCls, "-treenode-draggable"), isDraggable), "dragging", dragging), _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_classNames4, "drop-target", context.dropTargetKey === eventKey), "drop-container", context.dropContainerKey === eventKey), "drag-over", !isDisabled && dragOver), "drag-over-gap-top", !isDisabled && dragOverGapTop), "drag-over-gap-bottom", !isDisabled && dragOverGapBottom), "filter-node", (_context$filterTreeNo = context.filterTreeNode) === null || _context$filterTreeNo === void 0 ? void 0 : _context$filterTreeNo.call(context, convertNodePropsToEventData(props))), "".concat(context.prefixCls, "-treenode-leaf"), memoizedIsLeaf))),
        style: style2,
        draggable: draggableWithoutDisabled,
        onDragStart: draggableWithoutDisabled ? onDragStart : void 0,
        onDragEnter: isDraggable ? onDragEnter : void 0,
        onDragOver: isDraggable ? onDragOver : void 0,
        onDragLeave: isDraggable ? onDragLeave : void 0,
        onDrop: isDraggable ? onDrop : void 0,
        onDragEnd: isDraggable ? onDragEnd : void 0,
        onMouseMove
      }, ariaSelected, dataOrAriaAttributeProps), import_react23.default.createElement(Indent_default, {
        prefixCls: context.prefixCls,
        level,
        isStart,
        isEnd
      }), dragHandlerNode, renderSwitcher(), checkboxNode, selectorNode);
    };
    TreeNode.isTreeNode = 1;
    if (true) {
      TreeNode.displayName = "TreeNode";
    }
    TreeNode_default = TreeNode;
  }
});

// node_modules/rc-tree/es/DropIndicator.js
var import_react24, DropIndicator, DropIndicator_default;
var init_DropIndicator = __esm({
  "node_modules/rc-tree/es/DropIndicator.js"() {
    import_react24 = __toESM(require_react());
    DropIndicator = function DropIndicator2(props) {
      var dropPosition = props.dropPosition, dropLevelOffset = props.dropLevelOffset, indent = props.indent;
      var style2 = {
        pointerEvents: "none",
        position: "absolute",
        right: 0,
        backgroundColor: "red",
        height: 2
      };
      switch (dropPosition) {
        case -1:
          style2.top = 0;
          style2.left = -dropLevelOffset * indent;
          break;
        case 1:
          style2.bottom = 0;
          style2.left = -dropLevelOffset * indent;
          break;
        case 0:
          style2.bottom = 0;
          style2.left = indent;
          break;
      }
      return import_react24.default.createElement("div", {
        style: style2
      });
    };
    if (true) {
      DropIndicator.displayName = "DropIndicator";
    }
    DropIndicator_default = DropIndicator;
  }
});

// node_modules/@babel/runtime/helpers/esm/objectDestructuringEmpty.js
function _objectDestructuringEmpty(t) {
  if (null == t) throw new TypeError("Cannot destructure " + t);
}
var init_objectDestructuringEmpty = __esm({
  "node_modules/@babel/runtime/helpers/esm/objectDestructuringEmpty.js"() {
  }
});

// node_modules/rc-tree/es/useUnmount.js
function useUnmount(triggerStart, triggerEnd) {
  var _React$useState = React129.useState(false), _React$useState2 = _slicedToArray(_React$useState, 2), firstMount = _React$useState2[0], setFirstMount = _React$useState2[1];
  useLayoutEffect_default(function() {
    if (firstMount) {
      triggerStart();
      return function() {
        triggerEnd();
      };
    }
  }, [firstMount]);
  useLayoutEffect_default(function() {
    setFirstMount(true);
    return function() {
      setFirstMount(false);
    };
  }, []);
}
var React129, useUnmount_default;
var init_useUnmount = __esm({
  "node_modules/rc-tree/es/useUnmount.js"() {
    init_slicedToArray();
    React129 = __toESM(require_react());
    init_useLayoutEffect();
    useUnmount_default = useUnmount;
  }
});

// node_modules/rc-tree/es/MotionTreeNode.js
var import_classnames39, React130, _excluded38, MotionTreeNode, MotionTreeNode_default;
var init_MotionTreeNode = __esm({
  "node_modules/rc-tree/es/MotionTreeNode.js"() {
    init_extends();
    init_objectDestructuringEmpty();
    init_slicedToArray();
    init_objectWithoutProperties();
    import_classnames39 = __toESM(require_classnames());
    init_es4();
    init_useLayoutEffect();
    React130 = __toESM(require_react());
    init_contextTypes();
    init_TreeNode();
    init_useUnmount();
    init_treeUtil();
    _excluded38 = ["className", "style", "motion", "motionNodes", "motionType", "onMotionStart", "onMotionEnd", "active", "treeNodeRequiredProps"];
    MotionTreeNode = React130.forwardRef(function(oriProps, ref) {
      var className = oriProps.className, style2 = oriProps.style, motion = oriProps.motion, motionNodes = oriProps.motionNodes, motionType = oriProps.motionType, onOriginMotionStart = oriProps.onMotionStart, onOriginMotionEnd = oriProps.onMotionEnd, active = oriProps.active, treeNodeRequiredProps = oriProps.treeNodeRequiredProps, props = _objectWithoutProperties(oriProps, _excluded38);
      var _React$useState = React130.useState(true), _React$useState2 = _slicedToArray(_React$useState, 2), visible = _React$useState2[0], setVisible = _React$useState2[1];
      var _React$useContext = React130.useContext(TreeContext), prefixCls = _React$useContext.prefixCls;
      var targetVisible = motionNodes && motionType !== "hide";
      useLayoutEffect_default(function() {
        if (motionNodes) {
          if (targetVisible !== visible) {
            setVisible(targetVisible);
          }
        }
      }, [motionNodes]);
      var triggerMotionStart = function triggerMotionStart2() {
        if (motionNodes) {
          onOriginMotionStart();
        }
      };
      var triggerMotionEndRef = React130.useRef(false);
      var triggerMotionEnd = function triggerMotionEnd2() {
        if (motionNodes && !triggerMotionEndRef.current) {
          triggerMotionEndRef.current = true;
          onOriginMotionEnd();
        }
      };
      useUnmount_default(triggerMotionStart, triggerMotionEnd);
      var onVisibleChanged = function onVisibleChanged2(nextVisible) {
        if (targetVisible === nextVisible) {
          triggerMotionEnd();
        }
      };
      if (motionNodes) {
        return React130.createElement(es_default2, _extends({
          ref,
          visible
        }, motion, {
          motionAppear: motionType === "show",
          onVisibleChanged
        }), function(_ref, motionRef) {
          var motionClassName = _ref.className, motionStyle = _ref.style;
          return React130.createElement("div", {
            ref: motionRef,
            className: (0, import_classnames39.default)("".concat(prefixCls, "-treenode-motion"), motionClassName),
            style: motionStyle
          }, motionNodes.map(function(treeNode) {
            var restProps = Object.assign({}, (_objectDestructuringEmpty(treeNode.data), treeNode.data)), title = treeNode.title, key = treeNode.key, isStart = treeNode.isStart, isEnd = treeNode.isEnd;
            delete restProps.children;
            var treeNodeProps = getTreeNodeProps(key, treeNodeRequiredProps);
            return React130.createElement(TreeNode_default, _extends({}, restProps, treeNodeProps, {
              title,
              active,
              data: treeNode.data,
              key,
              isStart,
              isEnd
            }));
          }));
        });
      }
      return React130.createElement(TreeNode_default, _extends({
        domRef: ref,
        className,
        style: style2
      }, props, {
        active
      }));
    });
    if (true) {
      MotionTreeNode.displayName = "MotionTreeNode";
    }
    MotionTreeNode_default = MotionTreeNode;
  }
});

// node_modules/rc-tree/es/utils/diffUtil.js
function findExpandedKeys() {
  var prev = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
  var next = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
  var prevLen = prev.length;
  var nextLen = next.length;
  if (Math.abs(prevLen - nextLen) !== 1) {
    return {
      add: false,
      key: null
    };
  }
  function find(shorter, longer) {
    var cache = /* @__PURE__ */ new Map();
    shorter.forEach(function(key) {
      cache.set(key, true);
    });
    var keys = longer.filter(function(key) {
      return !cache.has(key);
    });
    return keys.length === 1 ? keys[0] : null;
  }
  if (prevLen < nextLen) {
    return {
      add: true,
      key: find(prev, next)
    };
  }
  return {
    add: false,
    key: find(next, prev)
  };
}
function getExpandRange(shorter, longer, key) {
  var shorterStartIndex = shorter.findIndex(function(data) {
    return data.key === key;
  });
  var shorterEndNode = shorter[shorterStartIndex + 1];
  var longerStartIndex = longer.findIndex(function(data) {
    return data.key === key;
  });
  if (shorterEndNode) {
    var longerEndIndex = longer.findIndex(function(data) {
      return data.key === shorterEndNode.key;
    });
    return longer.slice(longerStartIndex + 1, longerEndIndex);
  }
  return longer.slice(longerStartIndex + 1);
}
var init_diffUtil = __esm({
  "node_modules/rc-tree/es/utils/diffUtil.js"() {
  }
});

// node_modules/rc-tree/es/NodeList.js
function getMinimumRangeTransitionRange(list, virtual, height, itemHeight) {
  if (virtual === false || !height) {
    return list;
  }
  return list.slice(0, Math.ceil(height / itemHeight) + 1);
}
function itemKey2(item) {
  var key = item.key, pos = item.pos;
  return getKey2(key, pos);
}
function getAccessibilityPath(item) {
  var path = String(item.data.key);
  var current = item;
  while (current.parent) {
    current = current.parent;
    path = "".concat(current.data.key, " > ").concat(path);
  }
  return path;
}
var React131, _excluded39, HIDDEN_STYLE, noop, MOTION_KEY, MotionNode, MotionEntity, MotionFlattenData, NodeList, NodeList_default;
var init_NodeList = __esm({
  "node_modules/rc-tree/es/NodeList.js"() {
    init_extends();
    init_objectDestructuringEmpty();
    init_slicedToArray();
    init_objectWithoutProperties();
    init_useLayoutEffect();
    init_es8();
    React131 = __toESM(require_react());
    init_MotionTreeNode();
    init_diffUtil();
    init_treeUtil();
    _excluded39 = ["prefixCls", "data", "selectable", "checkable", "expandedKeys", "selectedKeys", "checkedKeys", "loadedKeys", "loadingKeys", "halfCheckedKeys", "keyEntities", "disabled", "dragging", "dragOverNodeKey", "dropPosition", "motion", "height", "itemHeight", "virtual", "scrollWidth", "focusable", "activeItem", "focused", "tabIndex", "onKeyDown", "onFocus", "onBlur", "onActiveChange", "onListChangeStart", "onListChangeEnd"];
    HIDDEN_STYLE = {
      width: 0,
      height: 0,
      display: "flex",
      overflow: "hidden",
      opacity: 0,
      border: 0,
      padding: 0,
      margin: 0
    };
    noop = function noop2() {
    };
    MOTION_KEY = "RC_TREE_MOTION_".concat(Math.random());
    MotionNode = {
      key: MOTION_KEY
    };
    MotionEntity = {
      key: MOTION_KEY,
      level: 0,
      index: 0,
      pos: "0",
      node: MotionNode,
      nodes: [MotionNode]
    };
    MotionFlattenData = {
      parent: null,
      children: [],
      pos: MotionEntity.pos,
      data: MotionNode,
      title: null,
      key: MOTION_KEY,
      /** Hold empty list here since we do not use it */
      isStart: [],
      isEnd: []
    };
    NodeList = React131.forwardRef(function(props, ref) {
      var prefixCls = props.prefixCls, data = props.data, selectable = props.selectable, checkable = props.checkable, expandedKeys = props.expandedKeys, selectedKeys = props.selectedKeys, checkedKeys = props.checkedKeys, loadedKeys = props.loadedKeys, loadingKeys = props.loadingKeys, halfCheckedKeys = props.halfCheckedKeys, keyEntities = props.keyEntities, disabled = props.disabled, dragging = props.dragging, dragOverNodeKey = props.dragOverNodeKey, dropPosition = props.dropPosition, motion = props.motion, height = props.height, itemHeight = props.itemHeight, virtual = props.virtual, scrollWidth = props.scrollWidth, focusable2 = props.focusable, activeItem = props.activeItem, focused = props.focused, tabIndex = props.tabIndex, onKeyDown = props.onKeyDown, onFocus = props.onFocus, onBlur = props.onBlur, onActiveChange = props.onActiveChange, onListChangeStart = props.onListChangeStart, onListChangeEnd = props.onListChangeEnd, domProps = _objectWithoutProperties(props, _excluded39);
      var listRef = React131.useRef(null);
      var indentMeasurerRef = React131.useRef(null);
      React131.useImperativeHandle(ref, function() {
        return {
          scrollTo: function scrollTo(scroll) {
            listRef.current.scrollTo(scroll);
          },
          getIndentWidth: function getIndentWidth() {
            return indentMeasurerRef.current.offsetWidth;
          }
        };
      });
      var _React$useState = React131.useState(expandedKeys), _React$useState2 = _slicedToArray(_React$useState, 2), prevExpandedKeys = _React$useState2[0], setPrevExpandedKeys = _React$useState2[1];
      var _React$useState3 = React131.useState(data), _React$useState4 = _slicedToArray(_React$useState3, 2), prevData = _React$useState4[0], setPrevData = _React$useState4[1];
      var _React$useState5 = React131.useState(data), _React$useState6 = _slicedToArray(_React$useState5, 2), transitionData = _React$useState6[0], setTransitionData = _React$useState6[1];
      var _React$useState7 = React131.useState([]), _React$useState8 = _slicedToArray(_React$useState7, 2), transitionRange = _React$useState8[0], setTransitionRange = _React$useState8[1];
      var _React$useState9 = React131.useState(null), _React$useState10 = _slicedToArray(_React$useState9, 2), motionType = _React$useState10[0], setMotionType = _React$useState10[1];
      var dataRef = React131.useRef(data);
      dataRef.current = data;
      function onMotionEnd() {
        var latestData = dataRef.current;
        setPrevData(latestData);
        setTransitionData(latestData);
        setTransitionRange([]);
        setMotionType(null);
        onListChangeEnd();
      }
      useLayoutEffect_default(function() {
        setPrevExpandedKeys(expandedKeys);
        var diffExpanded = findExpandedKeys(prevExpandedKeys, expandedKeys);
        if (diffExpanded.key !== null) {
          if (diffExpanded.add) {
            var keyIndex = prevData.findIndex(function(_ref) {
              var key = _ref.key;
              return key === diffExpanded.key;
            });
            var rangeNodes = getMinimumRangeTransitionRange(getExpandRange(prevData, data, diffExpanded.key), virtual, height, itemHeight);
            var newTransitionData = prevData.slice();
            newTransitionData.splice(keyIndex + 1, 0, MotionFlattenData);
            setTransitionData(newTransitionData);
            setTransitionRange(rangeNodes);
            setMotionType("show");
          } else {
            var _keyIndex = data.findIndex(function(_ref2) {
              var key = _ref2.key;
              return key === diffExpanded.key;
            });
            var _rangeNodes = getMinimumRangeTransitionRange(getExpandRange(data, prevData, diffExpanded.key), virtual, height, itemHeight);
            var _newTransitionData = data.slice();
            _newTransitionData.splice(_keyIndex + 1, 0, MotionFlattenData);
            setTransitionData(_newTransitionData);
            setTransitionRange(_rangeNodes);
            setMotionType("hide");
          }
        } else if (prevData !== data) {
          setPrevData(data);
          setTransitionData(data);
        }
      }, [expandedKeys, data]);
      React131.useEffect(function() {
        if (!dragging) {
          onMotionEnd();
        }
      }, [dragging]);
      var mergedData = motion ? transitionData : data;
      var treeNodeRequiredProps = {
        expandedKeys,
        selectedKeys,
        loadedKeys,
        loadingKeys,
        checkedKeys,
        halfCheckedKeys,
        dragOverNodeKey,
        dropPosition,
        keyEntities
      };
      return React131.createElement(React131.Fragment, null, focused && activeItem && React131.createElement("span", {
        style: HIDDEN_STYLE,
        "aria-live": "assertive"
      }, getAccessibilityPath(activeItem)), React131.createElement("div", null, React131.createElement("input", {
        style: HIDDEN_STYLE,
        disabled: focusable2 === false || disabled,
        tabIndex: focusable2 !== false ? tabIndex : null,
        onKeyDown,
        onFocus,
        onBlur,
        value: "",
        onChange: noop,
        "aria-label": "for screen reader"
      })), React131.createElement("div", {
        className: "".concat(prefixCls, "-treenode"),
        "aria-hidden": true,
        style: {
          position: "absolute",
          pointerEvents: "none",
          visibility: "hidden",
          height: 0,
          overflow: "hidden",
          border: 0,
          padding: 0
        }
      }, React131.createElement("div", {
        className: "".concat(prefixCls, "-indent")
      }, React131.createElement("div", {
        ref: indentMeasurerRef,
        className: "".concat(prefixCls, "-indent-unit")
      }))), React131.createElement(es_default6, _extends({}, domProps, {
        data: mergedData,
        itemKey: itemKey2,
        height,
        fullHeight: false,
        virtual,
        itemHeight,
        scrollWidth,
        prefixCls: "".concat(prefixCls, "-list"),
        ref: listRef,
        role: "tree",
        onVisibleChange: function onVisibleChange(originList) {
          if (originList.every(function(item) {
            return itemKey2(item) !== MOTION_KEY;
          })) {
            onMotionEnd();
          }
        }
      }), function(treeNode) {
        var pos = treeNode.pos, restProps = Object.assign({}, (_objectDestructuringEmpty(treeNode.data), treeNode.data)), title = treeNode.title, key = treeNode.key, isStart = treeNode.isStart, isEnd = treeNode.isEnd;
        var mergedKey = getKey2(key, pos);
        delete restProps.key;
        delete restProps.children;
        var treeNodeProps = getTreeNodeProps(mergedKey, treeNodeRequiredProps);
        return React131.createElement(MotionTreeNode_default, _extends({}, restProps, treeNodeProps, {
          title,
          active: !!activeItem && key === activeItem.key,
          pos,
          data: treeNode.data,
          isStart,
          isEnd,
          motion,
          motionNodes: key === MOTION_KEY ? transitionRange : null,
          motionType,
          onMotionStart: onListChangeStart,
          onMotionEnd,
          treeNodeRequiredProps,
          onMouseMove: function onMouseMove() {
            onActiveChange(null);
          }
        }));
      }));
    });
    if (true) {
      NodeList.displayName = "NodeList";
    }
    NodeList_default = NodeList;
  }
});

// node_modules/rc-tree/es/util.js
function arrDel(list, value) {
  if (!list) return [];
  var clone = list.slice();
  var index2 = clone.indexOf(value);
  if (index2 >= 0) {
    clone.splice(index2, 1);
  }
  return clone;
}
function arrAdd(list, value) {
  var clone = (list || []).slice();
  if (clone.indexOf(value) === -1) {
    clone.push(value);
  }
  return clone;
}
function posToArr(pos) {
  return pos.split("-");
}
function getDragChildrenKeys(dragNodeKey, keyEntities) {
  var dragChildrenKeys = [];
  var entity = getEntity(keyEntities, dragNodeKey);
  function dig() {
    var list = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
    list.forEach(function(_ref) {
      var key = _ref.key, children = _ref.children;
      dragChildrenKeys.push(key);
      dig(children);
    });
  }
  dig(entity.children);
  return dragChildrenKeys;
}
function isLastChild(treeNodeEntity) {
  if (treeNodeEntity.parent) {
    var posArr = posToArr(treeNodeEntity.pos);
    return Number(posArr[posArr.length - 1]) === treeNodeEntity.parent.children.length - 1;
  }
  return false;
}
function isFirstChild(treeNodeEntity) {
  var posArr = posToArr(treeNodeEntity.pos);
  return Number(posArr[posArr.length - 1]) === 0;
}
function calcDropPosition(event, dragNodeProps, targetNodeProps, indent, startMousePosition, allowDrop2, flattenedNodes, keyEntities, expandKeys, direction) {
  var _abstractDropNodeEnti;
  var clientX = event.clientX, clientY = event.clientY;
  var _getBoundingClientRec = event.target.getBoundingClientRect(), top = _getBoundingClientRec.top, height = _getBoundingClientRec.height;
  var horizontalMouseOffset = (direction === "rtl" ? -1 : 1) * (((startMousePosition === null || startMousePosition === void 0 ? void 0 : startMousePosition.x) || 0) - clientX);
  var rawDropLevelOffset = (horizontalMouseOffset - 12) / indent;
  var filteredExpandKeys = expandKeys.filter(function(key) {
    var _keyEntities$key;
    return (_keyEntities$key = keyEntities[key]) === null || _keyEntities$key === void 0 || (_keyEntities$key = _keyEntities$key.children) === null || _keyEntities$key === void 0 ? void 0 : _keyEntities$key.length;
  });
  var abstractDropNodeEntity = getEntity(keyEntities, targetNodeProps.eventKey);
  if (clientY < top + height / 2) {
    var nodeIndex = flattenedNodes.findIndex(function(flattenedNode) {
      return flattenedNode.key === abstractDropNodeEntity.key;
    });
    var prevNodeIndex = nodeIndex <= 0 ? 0 : nodeIndex - 1;
    var prevNodeKey = flattenedNodes[prevNodeIndex].key;
    abstractDropNodeEntity = getEntity(keyEntities, prevNodeKey);
  }
  var initialAbstractDropNodeKey = abstractDropNodeEntity.key;
  var abstractDragOverEntity = abstractDropNodeEntity;
  var dragOverNodeKey = abstractDropNodeEntity.key;
  var dropPosition = 0;
  var dropLevelOffset = 0;
  if (!filteredExpandKeys.includes(initialAbstractDropNodeKey)) {
    for (var i = 0; i < rawDropLevelOffset; i += 1) {
      if (isLastChild(abstractDropNodeEntity)) {
        abstractDropNodeEntity = abstractDropNodeEntity.parent;
        dropLevelOffset += 1;
      } else {
        break;
      }
    }
  }
  var abstractDragDataNode = dragNodeProps.data;
  var abstractDropDataNode = abstractDropNodeEntity.node;
  var dropAllowed = true;
  if (isFirstChild(abstractDropNodeEntity) && abstractDropNodeEntity.level === 0 && clientY < top + height / 2 && allowDrop2({
    dragNode: abstractDragDataNode,
    dropNode: abstractDropDataNode,
    dropPosition: -1
  }) && abstractDropNodeEntity.key === targetNodeProps.eventKey) {
    dropPosition = -1;
  } else if ((abstractDragOverEntity.children || []).length && filteredExpandKeys.includes(dragOverNodeKey)) {
    if (allowDrop2({
      dragNode: abstractDragDataNode,
      dropNode: abstractDropDataNode,
      dropPosition: 0
    })) {
      dropPosition = 0;
    } else {
      dropAllowed = false;
    }
  } else if (dropLevelOffset === 0) {
    if (rawDropLevelOffset > -1.5) {
      if (allowDrop2({
        dragNode: abstractDragDataNode,
        dropNode: abstractDropDataNode,
        dropPosition: 1
      })) {
        dropPosition = 1;
      } else {
        dropAllowed = false;
      }
    } else {
      if (allowDrop2({
        dragNode: abstractDragDataNode,
        dropNode: abstractDropDataNode,
        dropPosition: 0
      })) {
        dropPosition = 0;
      } else if (allowDrop2({
        dragNode: abstractDragDataNode,
        dropNode: abstractDropDataNode,
        dropPosition: 1
      })) {
        dropPosition = 1;
      } else {
        dropAllowed = false;
      }
    }
  } else {
    if (allowDrop2({
      dragNode: abstractDragDataNode,
      dropNode: abstractDropDataNode,
      dropPosition: 1
    })) {
      dropPosition = 1;
    } else {
      dropAllowed = false;
    }
  }
  return {
    dropPosition,
    dropLevelOffset,
    dropTargetKey: abstractDropNodeEntity.key,
    dropTargetPos: abstractDropNodeEntity.pos,
    dragOverNodeKey,
    dropContainerKey: dropPosition === 0 ? null : ((_abstractDropNodeEnti = abstractDropNodeEntity.parent) === null || _abstractDropNodeEnti === void 0 ? void 0 : _abstractDropNodeEnti.key) || null,
    dropAllowed
  };
}
function calcSelectedKeys(selectedKeys, props) {
  if (!selectedKeys) return void 0;
  var multiple = props.multiple;
  if (multiple) {
    return selectedKeys.slice();
  }
  if (selectedKeys.length) {
    return [selectedKeys[0]];
  }
  return selectedKeys;
}
function parseCheckedKeys(keys) {
  if (!keys) {
    return null;
  }
  var keyProps;
  if (Array.isArray(keys)) {
    keyProps = {
      checkedKeys: keys,
      halfCheckedKeys: void 0
    };
  } else if (_typeof(keys) === "object") {
    keyProps = {
      checkedKeys: keys.checked || void 0,
      halfCheckedKeys: keys.halfChecked || void 0
    };
  } else {
    warning_default(false, "`checkedKeys` is not an array or an object");
    return null;
  }
  return keyProps;
}
function conductExpandParent(keyList, keyEntities) {
  var expandedKeys = /* @__PURE__ */ new Set();
  function conductUp(key) {
    if (expandedKeys.has(key)) return;
    var entity = getEntity(keyEntities, key);
    if (!entity) return;
    expandedKeys.add(key);
    var parent = entity.parent, node = entity.node;
    if (node.disabled) return;
    if (parent) {
      conductUp(parent.key);
    }
  }
  (keyList || []).forEach(function(key) {
    conductUp(key);
  });
  return _toConsumableArray(expandedKeys);
}
var import_react25;
var init_util3 = __esm({
  "node_modules/rc-tree/es/util.js"() {
    init_toConsumableArray();
    init_typeof();
    init_extends();
    init_objectWithoutProperties();
    init_warning();
    import_react25 = __toESM(require_react());
    init_TreeNode();
    init_keyUtil2();
    init_treeUtil();
  }
});

// node_modules/rc-tree/es/utils/conductUtil.js
function removeFromCheckedKeys(halfCheckedKeys, checkedKeys) {
  var filteredKeys = /* @__PURE__ */ new Set();
  halfCheckedKeys.forEach(function(key) {
    if (!checkedKeys.has(key)) {
      filteredKeys.add(key);
    }
  });
  return filteredKeys;
}
function isCheckDisabled(node) {
  var _ref = node || {}, disabled = _ref.disabled, disableCheckbox = _ref.disableCheckbox, checkable = _ref.checkable;
  return !!(disabled || disableCheckbox) || checkable === false;
}
function fillConductCheck(keys, levelEntities, maxLevel, syntheticGetCheckDisabled) {
  var checkedKeys = new Set(keys);
  var halfCheckedKeys = /* @__PURE__ */ new Set();
  for (var level = 0; level <= maxLevel; level += 1) {
    var entities = levelEntities.get(level) || /* @__PURE__ */ new Set();
    entities.forEach(function(entity) {
      var key = entity.key, node = entity.node, _entity$children = entity.children, children = _entity$children === void 0 ? [] : _entity$children;
      if (checkedKeys.has(key) && !syntheticGetCheckDisabled(node)) {
        children.filter(function(childEntity) {
          return !syntheticGetCheckDisabled(childEntity.node);
        }).forEach(function(childEntity) {
          checkedKeys.add(childEntity.key);
        });
      }
    });
  }
  var visitedKeys = /* @__PURE__ */ new Set();
  for (var _level = maxLevel; _level >= 0; _level -= 1) {
    var _entities = levelEntities.get(_level) || /* @__PURE__ */ new Set();
    _entities.forEach(function(entity) {
      var parent = entity.parent, node = entity.node;
      if (syntheticGetCheckDisabled(node) || !entity.parent || visitedKeys.has(entity.parent.key)) {
        return;
      }
      if (syntheticGetCheckDisabled(entity.parent.node)) {
        visitedKeys.add(parent.key);
        return;
      }
      var allChecked = true;
      var partialChecked = false;
      (parent.children || []).filter(function(childEntity) {
        return !syntheticGetCheckDisabled(childEntity.node);
      }).forEach(function(_ref2) {
        var key = _ref2.key;
        var checked = checkedKeys.has(key);
        if (allChecked && !checked) {
          allChecked = false;
        }
        if (!partialChecked && (checked || halfCheckedKeys.has(key))) {
          partialChecked = true;
        }
      });
      if (allChecked) {
        checkedKeys.add(parent.key);
      }
      if (partialChecked) {
        halfCheckedKeys.add(parent.key);
      }
      visitedKeys.add(parent.key);
    });
  }
  return {
    checkedKeys: Array.from(checkedKeys),
    halfCheckedKeys: Array.from(removeFromCheckedKeys(halfCheckedKeys, checkedKeys))
  };
}
function cleanConductCheck(keys, halfKeys, levelEntities, maxLevel, syntheticGetCheckDisabled) {
  var checkedKeys = new Set(keys);
  var halfCheckedKeys = new Set(halfKeys);
  for (var level = 0; level <= maxLevel; level += 1) {
    var entities = levelEntities.get(level) || /* @__PURE__ */ new Set();
    entities.forEach(function(entity) {
      var key = entity.key, node = entity.node, _entity$children2 = entity.children, children = _entity$children2 === void 0 ? [] : _entity$children2;
      if (!checkedKeys.has(key) && !halfCheckedKeys.has(key) && !syntheticGetCheckDisabled(node)) {
        children.filter(function(childEntity) {
          return !syntheticGetCheckDisabled(childEntity.node);
        }).forEach(function(childEntity) {
          checkedKeys.delete(childEntity.key);
        });
      }
    });
  }
  halfCheckedKeys = /* @__PURE__ */ new Set();
  var visitedKeys = /* @__PURE__ */ new Set();
  for (var _level2 = maxLevel; _level2 >= 0; _level2 -= 1) {
    var _entities2 = levelEntities.get(_level2) || /* @__PURE__ */ new Set();
    _entities2.forEach(function(entity) {
      var parent = entity.parent, node = entity.node;
      if (syntheticGetCheckDisabled(node) || !entity.parent || visitedKeys.has(entity.parent.key)) {
        return;
      }
      if (syntheticGetCheckDisabled(entity.parent.node)) {
        visitedKeys.add(parent.key);
        return;
      }
      var allChecked = true;
      var partialChecked = false;
      (parent.children || []).filter(function(childEntity) {
        return !syntheticGetCheckDisabled(childEntity.node);
      }).forEach(function(_ref3) {
        var key = _ref3.key;
        var checked = checkedKeys.has(key);
        if (allChecked && !checked) {
          allChecked = false;
        }
        if (!partialChecked && (checked || halfCheckedKeys.has(key))) {
          partialChecked = true;
        }
      });
      if (!allChecked) {
        checkedKeys.delete(parent.key);
      }
      if (partialChecked) {
        halfCheckedKeys.add(parent.key);
      }
      visitedKeys.add(parent.key);
    });
  }
  return {
    checkedKeys: Array.from(checkedKeys),
    halfCheckedKeys: Array.from(removeFromCheckedKeys(halfCheckedKeys, checkedKeys))
  };
}
function conductCheck(keyList, checked, keyEntities, getCheckDisabled) {
  var warningMissKeys = [];
  var syntheticGetCheckDisabled;
  if (getCheckDisabled) {
    syntheticGetCheckDisabled = getCheckDisabled;
  } else {
    syntheticGetCheckDisabled = isCheckDisabled;
  }
  var keys = new Set(keyList.filter(function(key) {
    var hasEntity = !!getEntity(keyEntities, key);
    if (!hasEntity) {
      warningMissKeys.push(key);
    }
    return hasEntity;
  }));
  var levelEntities = /* @__PURE__ */ new Map();
  var maxLevel = 0;
  Object.keys(keyEntities).forEach(function(key) {
    var entity = keyEntities[key];
    var level = entity.level;
    var levelSet = levelEntities.get(level);
    if (!levelSet) {
      levelSet = /* @__PURE__ */ new Set();
      levelEntities.set(level, levelSet);
    }
    levelSet.add(entity);
    maxLevel = Math.max(maxLevel, level);
  });
  warning_default(!warningMissKeys.length, "Tree missing follow keys: ".concat(warningMissKeys.slice(0, 100).map(function(key) {
    return "'".concat(key, "'");
  }).join(", ")));
  var result;
  if (checked === true) {
    result = fillConductCheck(keys, levelEntities, maxLevel, syntheticGetCheckDisabled);
  } else {
    result = cleanConductCheck(keys, checked.halfCheckedKeys, levelEntities, maxLevel, syntheticGetCheckDisabled);
  }
  return result;
}
var init_conductUtil = __esm({
  "node_modules/rc-tree/es/utils/conductUtil.js"() {
    init_warning();
    init_keyUtil2();
  }
});

// node_modules/rc-tree/es/Tree.js
var import_classnames40, React133, MAX_RETRY_TIMES, Tree, Tree_default;
var init_Tree = __esm({
  "node_modules/rc-tree/es/Tree.js"() {
    init_extends();
    init_typeof();
    init_objectSpread2();
    init_toConsumableArray();
    init_classCallCheck();
    init_createClass();
    init_assertThisInitialized();
    init_inherits();
    init_createSuper();
    init_defineProperty();
    import_classnames40 = __toESM(require_classnames());
    init_KeyCode();
    init_pickAttrs();
    init_warning();
    React133 = __toESM(require_react());
    init_contextTypes();
    init_DropIndicator();
    init_NodeList();
    init_TreeNode();
    init_util3();
    init_conductUtil();
    init_keyUtil2();
    init_treeUtil();
    MAX_RETRY_TIMES = 10;
    Tree = (function(_React$Component) {
      _inherits(Tree2, _React$Component);
      var _super = _createSuper(Tree2);
      function Tree2() {
        var _this;
        _classCallCheck(this, Tree2);
        for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {
          _args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(_args));
        _defineProperty(_assertThisInitialized(_this), "destroyed", false);
        _defineProperty(_assertThisInitialized(_this), "delayedDragEnterLogic", void 0);
        _defineProperty(_assertThisInitialized(_this), "loadingRetryTimes", {});
        _defineProperty(_assertThisInitialized(_this), "state", {
          keyEntities: {},
          indent: null,
          selectedKeys: [],
          checkedKeys: [],
          halfCheckedKeys: [],
          loadedKeys: [],
          loadingKeys: [],
          expandedKeys: [],
          draggingNodeKey: null,
          dragChildrenKeys: [],
          // dropTargetKey is the key of abstract-drop-node
          // the abstract-drop-node is the real drop node when drag and drop
          // not the DOM drag over node
          dropTargetKey: null,
          dropPosition: null,
          // the drop position of abstract-drop-node, inside 0, top -1, bottom 1
          dropContainerKey: null,
          // the container key of abstract-drop-node if dropPosition is -1 or 1
          dropLevelOffset: null,
          // the drop level offset of abstract-drag-over-node
          dropTargetPos: null,
          // the pos of abstract-drop-node
          dropAllowed: true,
          // if drop to abstract-drop-node is allowed
          // the abstract-drag-over-node
          // if mouse is on the bottom of top dom node or no the top of the bottom dom node
          // abstract-drag-over-node is the top node
          dragOverNodeKey: null,
          treeData: [],
          flattenNodes: [],
          focused: false,
          activeKey: null,
          listChanging: false,
          prevProps: null,
          fieldNames: fillFieldNames2()
        });
        _defineProperty(_assertThisInitialized(_this), "dragStartMousePosition", null);
        _defineProperty(_assertThisInitialized(_this), "dragNodeProps", null);
        _defineProperty(_assertThisInitialized(_this), "currentMouseOverDroppableNodeKey", null);
        _defineProperty(_assertThisInitialized(_this), "listRef", React133.createRef());
        _defineProperty(_assertThisInitialized(_this), "onNodeDragStart", function(event, nodeProps) {
          var _this$state = _this.state, expandedKeys = _this$state.expandedKeys, keyEntities = _this$state.keyEntities;
          var onDragStart = _this.props.onDragStart;
          var eventKey = nodeProps.eventKey;
          _this.dragNodeProps = nodeProps;
          _this.dragStartMousePosition = {
            x: event.clientX,
            y: event.clientY
          };
          var newExpandedKeys = arrDel(expandedKeys, eventKey);
          _this.setState({
            draggingNodeKey: eventKey,
            dragChildrenKeys: getDragChildrenKeys(eventKey, keyEntities),
            indent: _this.listRef.current.getIndentWidth()
          });
          _this.setExpandedKeys(newExpandedKeys);
          window.addEventListener("dragend", _this.onWindowDragEnd);
          onDragStart === null || onDragStart === void 0 || onDragStart({
            event,
            node: convertNodePropsToEventData(nodeProps)
          });
        });
        _defineProperty(_assertThisInitialized(_this), "onNodeDragEnter", function(event, nodeProps) {
          var _this$state2 = _this.state, expandedKeys = _this$state2.expandedKeys, keyEntities = _this$state2.keyEntities, dragChildrenKeys = _this$state2.dragChildrenKeys, flattenNodes = _this$state2.flattenNodes, indent = _this$state2.indent;
          var _this$props = _this.props, onDragEnter = _this$props.onDragEnter, onExpand = _this$props.onExpand, allowDrop2 = _this$props.allowDrop, direction = _this$props.direction;
          var pos = nodeProps.pos, eventKey = nodeProps.eventKey;
          if (_this.currentMouseOverDroppableNodeKey !== eventKey) {
            _this.currentMouseOverDroppableNodeKey = eventKey;
          }
          if (!_this.dragNodeProps) {
            _this.resetDragState();
            return;
          }
          var _calcDropPosition = calcDropPosition(event, _this.dragNodeProps, nodeProps, indent, _this.dragStartMousePosition, allowDrop2, flattenNodes, keyEntities, expandedKeys, direction), dropPosition = _calcDropPosition.dropPosition, dropLevelOffset = _calcDropPosition.dropLevelOffset, dropTargetKey = _calcDropPosition.dropTargetKey, dropContainerKey = _calcDropPosition.dropContainerKey, dropTargetPos = _calcDropPosition.dropTargetPos, dropAllowed = _calcDropPosition.dropAllowed, dragOverNodeKey = _calcDropPosition.dragOverNodeKey;
          if (
            // don't allow drop inside its children
            dragChildrenKeys.includes(dropTargetKey) || // don't allow drop when drop is not allowed caculated by calcDropPosition
            !dropAllowed
          ) {
            _this.resetDragState();
            return;
          }
          if (!_this.delayedDragEnterLogic) {
            _this.delayedDragEnterLogic = {};
          }
          Object.keys(_this.delayedDragEnterLogic).forEach(function(key) {
            clearTimeout(_this.delayedDragEnterLogic[key]);
          });
          if (_this.dragNodeProps.eventKey !== nodeProps.eventKey) {
            event.persist();
            _this.delayedDragEnterLogic[pos] = window.setTimeout(function() {
              if (_this.state.draggingNodeKey === null) {
                return;
              }
              var newExpandedKeys = _toConsumableArray(expandedKeys);
              var entity = getEntity(keyEntities, nodeProps.eventKey);
              if (entity && (entity.children || []).length) {
                newExpandedKeys = arrAdd(expandedKeys, nodeProps.eventKey);
              }
              if (!_this.props.hasOwnProperty("expandedKeys")) {
                _this.setExpandedKeys(newExpandedKeys);
              }
              onExpand === null || onExpand === void 0 || onExpand(newExpandedKeys, {
                node: convertNodePropsToEventData(nodeProps),
                expanded: true,
                nativeEvent: event.nativeEvent
              });
            }, 800);
          }
          if (_this.dragNodeProps.eventKey === dropTargetKey && dropLevelOffset === 0) {
            _this.resetDragState();
            return;
          }
          _this.setState({
            dragOverNodeKey,
            dropPosition,
            dropLevelOffset,
            dropTargetKey,
            dropContainerKey,
            dropTargetPos,
            dropAllowed
          });
          onDragEnter === null || onDragEnter === void 0 || onDragEnter({
            event,
            node: convertNodePropsToEventData(nodeProps),
            expandedKeys
          });
        });
        _defineProperty(_assertThisInitialized(_this), "onNodeDragOver", function(event, nodeProps) {
          var _this$state3 = _this.state, dragChildrenKeys = _this$state3.dragChildrenKeys, flattenNodes = _this$state3.flattenNodes, keyEntities = _this$state3.keyEntities, expandedKeys = _this$state3.expandedKeys, indent = _this$state3.indent;
          var _this$props2 = _this.props, onDragOver = _this$props2.onDragOver, allowDrop2 = _this$props2.allowDrop, direction = _this$props2.direction;
          if (!_this.dragNodeProps) {
            return;
          }
          var _calcDropPosition2 = calcDropPosition(event, _this.dragNodeProps, nodeProps, indent, _this.dragStartMousePosition, allowDrop2, flattenNodes, keyEntities, expandedKeys, direction), dropPosition = _calcDropPosition2.dropPosition, dropLevelOffset = _calcDropPosition2.dropLevelOffset, dropTargetKey = _calcDropPosition2.dropTargetKey, dropContainerKey = _calcDropPosition2.dropContainerKey, dropTargetPos = _calcDropPosition2.dropTargetPos, dropAllowed = _calcDropPosition2.dropAllowed, dragOverNodeKey = _calcDropPosition2.dragOverNodeKey;
          if (dragChildrenKeys.includes(dropTargetKey) || !dropAllowed) {
            return;
          }
          if (_this.dragNodeProps.eventKey === dropTargetKey && dropLevelOffset === 0) {
            if (!(_this.state.dropPosition === null && _this.state.dropLevelOffset === null && _this.state.dropTargetKey === null && _this.state.dropContainerKey === null && _this.state.dropTargetPos === null && _this.state.dropAllowed === false && _this.state.dragOverNodeKey === null)) {
              _this.resetDragState();
            }
          } else if (!(dropPosition === _this.state.dropPosition && dropLevelOffset === _this.state.dropLevelOffset && dropTargetKey === _this.state.dropTargetKey && dropContainerKey === _this.state.dropContainerKey && dropTargetPos === _this.state.dropTargetPos && dropAllowed === _this.state.dropAllowed && dragOverNodeKey === _this.state.dragOverNodeKey)) {
            _this.setState({
              dropPosition,
              dropLevelOffset,
              dropTargetKey,
              dropContainerKey,
              dropTargetPos,
              dropAllowed,
              dragOverNodeKey
            });
          }
          onDragOver === null || onDragOver === void 0 || onDragOver({
            event,
            node: convertNodePropsToEventData(nodeProps)
          });
        });
        _defineProperty(_assertThisInitialized(_this), "onNodeDragLeave", function(event, nodeProps) {
          if (_this.currentMouseOverDroppableNodeKey === nodeProps.eventKey && !event.currentTarget.contains(event.relatedTarget)) {
            _this.resetDragState();
            _this.currentMouseOverDroppableNodeKey = null;
          }
          var onDragLeave = _this.props.onDragLeave;
          onDragLeave === null || onDragLeave === void 0 || onDragLeave({
            event,
            node: convertNodePropsToEventData(nodeProps)
          });
        });
        _defineProperty(_assertThisInitialized(_this), "onWindowDragEnd", function(event) {
          _this.onNodeDragEnd(event, null, true);
          window.removeEventListener("dragend", _this.onWindowDragEnd);
        });
        _defineProperty(_assertThisInitialized(_this), "onNodeDragEnd", function(event, nodeProps) {
          var onDragEnd = _this.props.onDragEnd;
          _this.setState({
            dragOverNodeKey: null
          });
          _this.cleanDragState();
          onDragEnd === null || onDragEnd === void 0 || onDragEnd({
            event,
            node: convertNodePropsToEventData(nodeProps)
          });
          _this.dragNodeProps = null;
          window.removeEventListener("dragend", _this.onWindowDragEnd);
        });
        _defineProperty(_assertThisInitialized(_this), "onNodeDrop", function(event, _) {
          var _this$getActiveItem;
          var outsideTree = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
          var _this$state4 = _this.state, dragChildrenKeys = _this$state4.dragChildrenKeys, dropPosition = _this$state4.dropPosition, dropTargetKey = _this$state4.dropTargetKey, dropTargetPos = _this$state4.dropTargetPos, dropAllowed = _this$state4.dropAllowed;
          if (!dropAllowed) {
            return;
          }
          var onDrop = _this.props.onDrop;
          _this.setState({
            dragOverNodeKey: null
          });
          _this.cleanDragState();
          if (dropTargetKey === null) return;
          var abstractDropNodeProps = _objectSpread2(_objectSpread2({}, getTreeNodeProps(dropTargetKey, _this.getTreeNodeRequiredProps())), {}, {
            active: ((_this$getActiveItem = _this.getActiveItem()) === null || _this$getActiveItem === void 0 ? void 0 : _this$getActiveItem.key) === dropTargetKey,
            data: getEntity(_this.state.keyEntities, dropTargetKey).node
          });
          var dropToChild = dragChildrenKeys.includes(dropTargetKey);
          warning_default(!dropToChild, "Can not drop to dragNode's children node. This is a bug of rc-tree. Please report an issue.");
          var posArr = posToArr(dropTargetPos);
          var dropResult = {
            event,
            node: convertNodePropsToEventData(abstractDropNodeProps),
            dragNode: _this.dragNodeProps ? convertNodePropsToEventData(_this.dragNodeProps) : null,
            dragNodesKeys: [_this.dragNodeProps.eventKey].concat(dragChildrenKeys),
            dropToGap: dropPosition !== 0,
            dropPosition: dropPosition + Number(posArr[posArr.length - 1])
          };
          if (!outsideTree) {
            onDrop === null || onDrop === void 0 || onDrop(dropResult);
          }
          _this.dragNodeProps = null;
        });
        _defineProperty(_assertThisInitialized(_this), "cleanDragState", function() {
          var draggingNodeKey = _this.state.draggingNodeKey;
          if (draggingNodeKey !== null) {
            _this.setState({
              draggingNodeKey: null,
              dropPosition: null,
              dropContainerKey: null,
              dropTargetKey: null,
              dropLevelOffset: null,
              dropAllowed: true,
              dragOverNodeKey: null
            });
          }
          _this.dragStartMousePosition = null;
          _this.currentMouseOverDroppableNodeKey = null;
        });
        _defineProperty(_assertThisInitialized(_this), "triggerExpandActionExpand", function(e, treeNode) {
          var _this$state5 = _this.state, expandedKeys = _this$state5.expandedKeys, flattenNodes = _this$state5.flattenNodes;
          var expanded = treeNode.expanded, key = treeNode.key, isLeaf = treeNode.isLeaf;
          if (isLeaf || e.shiftKey || e.metaKey || e.ctrlKey) {
            return;
          }
          var node = flattenNodes.filter(function(nodeItem) {
            return nodeItem.key === key;
          })[0];
          var eventNode = convertNodePropsToEventData(_objectSpread2(_objectSpread2({}, getTreeNodeProps(key, _this.getTreeNodeRequiredProps())), {}, {
            data: node.data
          }));
          _this.setExpandedKeys(expanded ? arrDel(expandedKeys, key) : arrAdd(expandedKeys, key));
          _this.onNodeExpand(e, eventNode);
        });
        _defineProperty(_assertThisInitialized(_this), "onNodeClick", function(e, treeNode) {
          var _this$props3 = _this.props, onClick = _this$props3.onClick, expandAction = _this$props3.expandAction;
          if (expandAction === "click") {
            _this.triggerExpandActionExpand(e, treeNode);
          }
          onClick === null || onClick === void 0 || onClick(e, treeNode);
        });
        _defineProperty(_assertThisInitialized(_this), "onNodeDoubleClick", function(e, treeNode) {
          var _this$props4 = _this.props, onDoubleClick = _this$props4.onDoubleClick, expandAction = _this$props4.expandAction;
          if (expandAction === "doubleClick") {
            _this.triggerExpandActionExpand(e, treeNode);
          }
          onDoubleClick === null || onDoubleClick === void 0 || onDoubleClick(e, treeNode);
        });
        _defineProperty(_assertThisInitialized(_this), "onNodeSelect", function(e, treeNode) {
          var selectedKeys = _this.state.selectedKeys;
          var _this$state6 = _this.state, keyEntities = _this$state6.keyEntities, fieldNames = _this$state6.fieldNames;
          var _this$props5 = _this.props, onSelect = _this$props5.onSelect, multiple = _this$props5.multiple;
          var selected = treeNode.selected;
          var key = treeNode[fieldNames.key];
          var targetSelected = !selected;
          if (!targetSelected) {
            selectedKeys = arrDel(selectedKeys, key);
          } else if (!multiple) {
            selectedKeys = [key];
          } else {
            selectedKeys = arrAdd(selectedKeys, key);
          }
          var selectedNodes = selectedKeys.map(function(selectedKey) {
            var entity = getEntity(keyEntities, selectedKey);
            return entity ? entity.node : null;
          }).filter(Boolean);
          _this.setUncontrolledState({
            selectedKeys
          });
          onSelect === null || onSelect === void 0 || onSelect(selectedKeys, {
            event: "select",
            selected: targetSelected,
            node: treeNode,
            selectedNodes,
            nativeEvent: e.nativeEvent
          });
        });
        _defineProperty(_assertThisInitialized(_this), "onNodeCheck", function(e, treeNode, checked) {
          var _this$state7 = _this.state, keyEntities = _this$state7.keyEntities, oriCheckedKeys = _this$state7.checkedKeys, oriHalfCheckedKeys = _this$state7.halfCheckedKeys;
          var _this$props6 = _this.props, checkStrictly = _this$props6.checkStrictly, onCheck = _this$props6.onCheck;
          var key = treeNode.key;
          var checkedObj;
          var eventObj = {
            event: "check",
            node: treeNode,
            checked,
            nativeEvent: e.nativeEvent
          };
          if (checkStrictly) {
            var checkedKeys = checked ? arrAdd(oriCheckedKeys, key) : arrDel(oriCheckedKeys, key);
            var halfCheckedKeys = arrDel(oriHalfCheckedKeys, key);
            checkedObj = {
              checked: checkedKeys,
              halfChecked: halfCheckedKeys
            };
            eventObj.checkedNodes = checkedKeys.map(function(checkedKey) {
              return getEntity(keyEntities, checkedKey);
            }).filter(Boolean).map(function(entity) {
              return entity.node;
            });
            _this.setUncontrolledState({
              checkedKeys
            });
          } else {
            var _conductCheck = conductCheck([].concat(_toConsumableArray(oriCheckedKeys), [key]), true, keyEntities), _checkedKeys = _conductCheck.checkedKeys, _halfCheckedKeys = _conductCheck.halfCheckedKeys;
            if (!checked) {
              var keySet = new Set(_checkedKeys);
              keySet.delete(key);
              var _conductCheck2 = conductCheck(Array.from(keySet), {
                checked: false,
                halfCheckedKeys: _halfCheckedKeys
              }, keyEntities);
              _checkedKeys = _conductCheck2.checkedKeys;
              _halfCheckedKeys = _conductCheck2.halfCheckedKeys;
            }
            checkedObj = _checkedKeys;
            eventObj.checkedNodes = [];
            eventObj.checkedNodesPositions = [];
            eventObj.halfCheckedKeys = _halfCheckedKeys;
            _checkedKeys.forEach(function(checkedKey) {
              var entity = getEntity(keyEntities, checkedKey);
              if (!entity) return;
              var node = entity.node, pos = entity.pos;
              eventObj.checkedNodes.push(node);
              eventObj.checkedNodesPositions.push({
                node,
                pos
              });
            });
            _this.setUncontrolledState({
              checkedKeys: _checkedKeys
            }, false, {
              halfCheckedKeys: _halfCheckedKeys
            });
          }
          onCheck === null || onCheck === void 0 || onCheck(checkedObj, eventObj);
        });
        _defineProperty(_assertThisInitialized(_this), "onNodeLoad", function(treeNode) {
          var _entity$children;
          var key = treeNode.key;
          var keyEntities = _this.state.keyEntities;
          var entity = getEntity(keyEntities, key);
          if (entity !== null && entity !== void 0 && (_entity$children = entity.children) !== null && _entity$children !== void 0 && _entity$children.length) {
            return;
          }
          var loadPromise = new Promise(function(resolve, reject) {
            _this.setState(function(_ref) {
              var _ref$loadedKeys = _ref.loadedKeys, loadedKeys = _ref$loadedKeys === void 0 ? [] : _ref$loadedKeys, _ref$loadingKeys = _ref.loadingKeys, loadingKeys = _ref$loadingKeys === void 0 ? [] : _ref$loadingKeys;
              var _this$props7 = _this.props, loadData = _this$props7.loadData, onLoad = _this$props7.onLoad;
              if (!loadData || loadedKeys.includes(key) || loadingKeys.includes(key)) {
                return null;
              }
              var promise = loadData(treeNode);
              promise.then(function() {
                var currentLoadedKeys = _this.state.loadedKeys;
                var newLoadedKeys = arrAdd(currentLoadedKeys, key);
                onLoad === null || onLoad === void 0 || onLoad(newLoadedKeys, {
                  event: "load",
                  node: treeNode
                });
                _this.setUncontrolledState({
                  loadedKeys: newLoadedKeys
                });
                _this.setState(function(prevState) {
                  return {
                    loadingKeys: arrDel(prevState.loadingKeys, key)
                  };
                });
                resolve();
              }).catch(function(e) {
                _this.setState(function(prevState) {
                  return {
                    loadingKeys: arrDel(prevState.loadingKeys, key)
                  };
                });
                _this.loadingRetryTimes[key] = (_this.loadingRetryTimes[key] || 0) + 1;
                if (_this.loadingRetryTimes[key] >= MAX_RETRY_TIMES) {
                  var currentLoadedKeys = _this.state.loadedKeys;
                  warning_default(false, "Retry for `loadData` many times but still failed. No more retry.");
                  _this.setUncontrolledState({
                    loadedKeys: arrAdd(currentLoadedKeys, key)
                  });
                  resolve();
                }
                reject(e);
              });
              return {
                loadingKeys: arrAdd(loadingKeys, key)
              };
            });
          });
          loadPromise.catch(function() {
          });
          return loadPromise;
        });
        _defineProperty(_assertThisInitialized(_this), "onNodeMouseEnter", function(event, node) {
          var onMouseEnter = _this.props.onMouseEnter;
          onMouseEnter === null || onMouseEnter === void 0 || onMouseEnter({
            event,
            node
          });
        });
        _defineProperty(_assertThisInitialized(_this), "onNodeMouseLeave", function(event, node) {
          var onMouseLeave = _this.props.onMouseLeave;
          onMouseLeave === null || onMouseLeave === void 0 || onMouseLeave({
            event,
            node
          });
        });
        _defineProperty(_assertThisInitialized(_this), "onNodeContextMenu", function(event, node) {
          var onRightClick = _this.props.onRightClick;
          if (onRightClick) {
            event.preventDefault();
            onRightClick({
              event,
              node
            });
          }
        });
        _defineProperty(_assertThisInitialized(_this), "onFocus", function() {
          var onFocus = _this.props.onFocus;
          _this.setState({
            focused: true
          });
          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
          }
          onFocus === null || onFocus === void 0 || onFocus.apply(void 0, args);
        });
        _defineProperty(_assertThisInitialized(_this), "onBlur", function() {
          var onBlur = _this.props.onBlur;
          _this.setState({
            focused: false
          });
          _this.onActiveChange(null);
          for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
            args[_key3] = arguments[_key3];
          }
          onBlur === null || onBlur === void 0 || onBlur.apply(void 0, args);
        });
        _defineProperty(_assertThisInitialized(_this), "getTreeNodeRequiredProps", function() {
          var _this$state8 = _this.state, expandedKeys = _this$state8.expandedKeys, selectedKeys = _this$state8.selectedKeys, loadedKeys = _this$state8.loadedKeys, loadingKeys = _this$state8.loadingKeys, checkedKeys = _this$state8.checkedKeys, halfCheckedKeys = _this$state8.halfCheckedKeys, dragOverNodeKey = _this$state8.dragOverNodeKey, dropPosition = _this$state8.dropPosition, keyEntities = _this$state8.keyEntities;
          return {
            expandedKeys: expandedKeys || [],
            selectedKeys: selectedKeys || [],
            loadedKeys: loadedKeys || [],
            loadingKeys: loadingKeys || [],
            checkedKeys: checkedKeys || [],
            halfCheckedKeys: halfCheckedKeys || [],
            dragOverNodeKey,
            dropPosition,
            keyEntities
          };
        });
        _defineProperty(_assertThisInitialized(_this), "setExpandedKeys", function(expandedKeys) {
          var _this$state9 = _this.state, treeData = _this$state9.treeData, fieldNames = _this$state9.fieldNames;
          var flattenNodes = flattenTreeData(treeData, expandedKeys, fieldNames);
          _this.setUncontrolledState({
            expandedKeys,
            flattenNodes
          }, true);
        });
        _defineProperty(_assertThisInitialized(_this), "onNodeExpand", function(e, treeNode) {
          var expandedKeys = _this.state.expandedKeys;
          var _this$state10 = _this.state, listChanging = _this$state10.listChanging, fieldNames = _this$state10.fieldNames;
          var _this$props8 = _this.props, onExpand = _this$props8.onExpand, loadData = _this$props8.loadData;
          var expanded = treeNode.expanded;
          var key = treeNode[fieldNames.key];
          if (listChanging) {
            return;
          }
          var certain = expandedKeys.includes(key);
          var targetExpanded = !expanded;
          warning_default(expanded && certain || !expanded && !certain, "Expand state not sync with index check");
          expandedKeys = targetExpanded ? arrAdd(expandedKeys, key) : arrDel(expandedKeys, key);
          _this.setExpandedKeys(expandedKeys);
          onExpand === null || onExpand === void 0 || onExpand(expandedKeys, {
            node: treeNode,
            expanded: targetExpanded,
            nativeEvent: e.nativeEvent
          });
          if (targetExpanded && loadData) {
            var loadPromise = _this.onNodeLoad(treeNode);
            if (loadPromise) {
              loadPromise.then(function() {
                var newFlattenTreeData = flattenTreeData(_this.state.treeData, expandedKeys, fieldNames);
                _this.setUncontrolledState({
                  flattenNodes: newFlattenTreeData
                });
              }).catch(function() {
                var currentExpandedKeys = _this.state.expandedKeys;
                var expandedKeysToRestore = arrDel(currentExpandedKeys, key);
                _this.setExpandedKeys(expandedKeysToRestore);
              });
            }
          }
        });
        _defineProperty(_assertThisInitialized(_this), "onListChangeStart", function() {
          _this.setUncontrolledState({
            listChanging: true
          });
        });
        _defineProperty(_assertThisInitialized(_this), "onListChangeEnd", function() {
          setTimeout(function() {
            _this.setUncontrolledState({
              listChanging: false
            });
          });
        });
        _defineProperty(_assertThisInitialized(_this), "onActiveChange", function(newActiveKey) {
          var activeKey = _this.state.activeKey;
          var _this$props9 = _this.props, onActiveChange = _this$props9.onActiveChange, _this$props9$itemScro = _this$props9.itemScrollOffset, itemScrollOffset = _this$props9$itemScro === void 0 ? 0 : _this$props9$itemScro;
          if (activeKey === newActiveKey) {
            return;
          }
          _this.setState({
            activeKey: newActiveKey
          });
          if (newActiveKey !== null) {
            _this.scrollTo({
              key: newActiveKey,
              offset: itemScrollOffset
            });
          }
          onActiveChange === null || onActiveChange === void 0 || onActiveChange(newActiveKey);
        });
        _defineProperty(_assertThisInitialized(_this), "getActiveItem", function() {
          var _this$state11 = _this.state, activeKey = _this$state11.activeKey, flattenNodes = _this$state11.flattenNodes;
          if (activeKey === null) {
            return null;
          }
          return flattenNodes.find(function(_ref2) {
            var key = _ref2.key;
            return key === activeKey;
          }) || null;
        });
        _defineProperty(_assertThisInitialized(_this), "offsetActiveKey", function(offset) {
          var _this$state12 = _this.state, flattenNodes = _this$state12.flattenNodes, activeKey = _this$state12.activeKey;
          var index2 = flattenNodes.findIndex(function(_ref3) {
            var key = _ref3.key;
            return key === activeKey;
          });
          if (index2 === -1 && offset < 0) {
            index2 = flattenNodes.length;
          }
          index2 = (index2 + offset + flattenNodes.length) % flattenNodes.length;
          var item = flattenNodes[index2];
          if (item) {
            var _key4 = item.key;
            _this.onActiveChange(_key4);
          } else {
            _this.onActiveChange(null);
          }
        });
        _defineProperty(_assertThisInitialized(_this), "onKeyDown", function(event) {
          var _this$state13 = _this.state, activeKey = _this$state13.activeKey, expandedKeys = _this$state13.expandedKeys, checkedKeys = _this$state13.checkedKeys, fieldNames = _this$state13.fieldNames;
          var _this$props10 = _this.props, onKeyDown = _this$props10.onKeyDown, checkable = _this$props10.checkable, selectable = _this$props10.selectable;
          switch (event.which) {
            case KeyCode_default.UP: {
              _this.offsetActiveKey(-1);
              event.preventDefault();
              break;
            }
            case KeyCode_default.DOWN: {
              _this.offsetActiveKey(1);
              event.preventDefault();
              break;
            }
          }
          var activeItem = _this.getActiveItem();
          if (activeItem && activeItem.data) {
            var treeNodeRequiredProps = _this.getTreeNodeRequiredProps();
            var expandable = activeItem.data.isLeaf === false || !!(activeItem.data[fieldNames.children] || []).length;
            var eventNode = convertNodePropsToEventData(_objectSpread2(_objectSpread2({}, getTreeNodeProps(activeKey, treeNodeRequiredProps)), {}, {
              data: activeItem.data,
              active: true
            }));
            switch (event.which) {
              // >>> Expand
              case KeyCode_default.LEFT: {
                if (expandable && expandedKeys.includes(activeKey)) {
                  _this.onNodeExpand({}, eventNode);
                } else if (activeItem.parent) {
                  _this.onActiveChange(activeItem.parent.key);
                }
                event.preventDefault();
                break;
              }
              case KeyCode_default.RIGHT: {
                if (expandable && !expandedKeys.includes(activeKey)) {
                  _this.onNodeExpand({}, eventNode);
                } else if (activeItem.children && activeItem.children.length) {
                  _this.onActiveChange(activeItem.children[0].key);
                }
                event.preventDefault();
                break;
              }
              // Selection
              case KeyCode_default.ENTER:
              case KeyCode_default.SPACE: {
                if (checkable && !eventNode.disabled && eventNode.checkable !== false && !eventNode.disableCheckbox) {
                  _this.onNodeCheck({}, eventNode, !checkedKeys.includes(activeKey));
                } else if (!checkable && selectable && !eventNode.disabled && eventNode.selectable !== false) {
                  _this.onNodeSelect({}, eventNode);
                }
                break;
              }
            }
          }
          onKeyDown === null || onKeyDown === void 0 || onKeyDown(event);
        });
        _defineProperty(_assertThisInitialized(_this), "setUncontrolledState", function(state) {
          var atomic = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
          var forceState = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
          if (!_this.destroyed) {
            var needSync = false;
            var allPassed = true;
            var newState = {};
            Object.keys(state).forEach(function(name) {
              if (_this.props.hasOwnProperty(name)) {
                allPassed = false;
                return;
              }
              needSync = true;
              newState[name] = state[name];
            });
            if (needSync && (!atomic || allPassed)) {
              _this.setState(_objectSpread2(_objectSpread2({}, newState), forceState));
            }
          }
        });
        _defineProperty(_assertThisInitialized(_this), "scrollTo", function(scroll) {
          _this.listRef.current.scrollTo(scroll);
        });
        return _this;
      }
      _createClass(Tree2, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          this.destroyed = false;
          this.onUpdated();
        }
      }, {
        key: "componentDidUpdate",
        value: function componentDidUpdate() {
          this.onUpdated();
        }
      }, {
        key: "onUpdated",
        value: function onUpdated() {
          var _this$props11 = this.props, activeKey = _this$props11.activeKey, _this$props11$itemScr = _this$props11.itemScrollOffset, itemScrollOffset = _this$props11$itemScr === void 0 ? 0 : _this$props11$itemScr;
          if (activeKey !== void 0 && activeKey !== this.state.activeKey) {
            this.setState({
              activeKey
            });
            if (activeKey !== null) {
              this.scrollTo({
                key: activeKey,
                offset: itemScrollOffset
              });
            }
          }
        }
      }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          window.removeEventListener("dragend", this.onWindowDragEnd);
          this.destroyed = true;
        }
      }, {
        key: "resetDragState",
        value: function resetDragState() {
          this.setState({
            dragOverNodeKey: null,
            dropPosition: null,
            dropLevelOffset: null,
            dropTargetKey: null,
            dropContainerKey: null,
            dropTargetPos: null,
            dropAllowed: false
          });
        }
      }, {
        key: "render",
        value: function render() {
          var _this$state14 = this.state, focused = _this$state14.focused, flattenNodes = _this$state14.flattenNodes, keyEntities = _this$state14.keyEntities, draggingNodeKey = _this$state14.draggingNodeKey, activeKey = _this$state14.activeKey, dropLevelOffset = _this$state14.dropLevelOffset, dropContainerKey = _this$state14.dropContainerKey, dropTargetKey = _this$state14.dropTargetKey, dropPosition = _this$state14.dropPosition, dragOverNodeKey = _this$state14.dragOverNodeKey, indent = _this$state14.indent;
          var _this$props12 = this.props, prefixCls = _this$props12.prefixCls, className = _this$props12.className, style2 = _this$props12.style, showLine = _this$props12.showLine, focusable2 = _this$props12.focusable, _this$props12$tabInde = _this$props12.tabIndex, tabIndex = _this$props12$tabInde === void 0 ? 0 : _this$props12$tabInde, selectable = _this$props12.selectable, showIcon = _this$props12.showIcon, icon = _this$props12.icon, switcherIcon = _this$props12.switcherIcon, draggable = _this$props12.draggable, checkable = _this$props12.checkable, checkStrictly = _this$props12.checkStrictly, disabled = _this$props12.disabled, motion = _this$props12.motion, loadData = _this$props12.loadData, filterTreeNode = _this$props12.filterTreeNode, height = _this$props12.height, itemHeight = _this$props12.itemHeight, scrollWidth = _this$props12.scrollWidth, virtual = _this$props12.virtual, titleRender = _this$props12.titleRender, dropIndicatorRender = _this$props12.dropIndicatorRender, onContextMenu = _this$props12.onContextMenu, onScroll = _this$props12.onScroll, direction = _this$props12.direction, rootClassName = _this$props12.rootClassName, rootStyle = _this$props12.rootStyle;
          var domProps = pickAttrs(this.props, {
            aria: true,
            data: true
          });
          var draggableConfig;
          if (draggable) {
            if (_typeof(draggable) === "object") {
              draggableConfig = draggable;
            } else if (typeof draggable === "function") {
              draggableConfig = {
                nodeDraggable: draggable
              };
            } else {
              draggableConfig = {};
            }
          }
          var contextValue = {
            prefixCls,
            selectable,
            showIcon,
            icon,
            switcherIcon,
            draggable: draggableConfig,
            draggingNodeKey,
            checkable,
            checkStrictly,
            disabled,
            keyEntities,
            dropLevelOffset,
            dropContainerKey,
            dropTargetKey,
            dropPosition,
            dragOverNodeKey,
            indent,
            direction,
            dropIndicatorRender,
            loadData,
            filterTreeNode,
            titleRender,
            onNodeClick: this.onNodeClick,
            onNodeDoubleClick: this.onNodeDoubleClick,
            onNodeExpand: this.onNodeExpand,
            onNodeSelect: this.onNodeSelect,
            onNodeCheck: this.onNodeCheck,
            onNodeLoad: this.onNodeLoad,
            onNodeMouseEnter: this.onNodeMouseEnter,
            onNodeMouseLeave: this.onNodeMouseLeave,
            onNodeContextMenu: this.onNodeContextMenu,
            onNodeDragStart: this.onNodeDragStart,
            onNodeDragEnter: this.onNodeDragEnter,
            onNodeDragOver: this.onNodeDragOver,
            onNodeDragLeave: this.onNodeDragLeave,
            onNodeDragEnd: this.onNodeDragEnd,
            onNodeDrop: this.onNodeDrop
          };
          return React133.createElement(TreeContext.Provider, {
            value: contextValue
          }, React133.createElement("div", {
            className: (0, import_classnames40.default)(prefixCls, className, rootClassName, _defineProperty(_defineProperty(_defineProperty({}, "".concat(prefixCls, "-show-line"), showLine), "".concat(prefixCls, "-focused"), focused), "".concat(prefixCls, "-active-focused"), activeKey !== null)),
            style: rootStyle
          }, React133.createElement(NodeList_default, _extends({
            ref: this.listRef,
            prefixCls,
            style: style2,
            data: flattenNodes,
            disabled,
            selectable,
            checkable: !!checkable,
            motion,
            dragging: draggingNodeKey !== null,
            height,
            itemHeight,
            virtual,
            focusable: focusable2,
            focused,
            tabIndex,
            activeItem: this.getActiveItem(),
            onFocus: this.onFocus,
            onBlur: this.onBlur,
            onKeyDown: this.onKeyDown,
            onActiveChange: this.onActiveChange,
            onListChangeStart: this.onListChangeStart,
            onListChangeEnd: this.onListChangeEnd,
            onContextMenu,
            onScroll,
            scrollWidth
          }, this.getTreeNodeRequiredProps(), domProps))));
        }
      }], [{
        key: "getDerivedStateFromProps",
        value: function getDerivedStateFromProps(props, prevState) {
          var prevProps = prevState.prevProps;
          var newState = {
            prevProps: props
          };
          function needSync(name) {
            return !prevProps && props.hasOwnProperty(name) || prevProps && prevProps[name] !== props[name];
          }
          var treeData;
          var fieldNames = prevState.fieldNames;
          if (needSync("fieldNames")) {
            fieldNames = fillFieldNames2(props.fieldNames);
            newState.fieldNames = fieldNames;
          }
          if (needSync("treeData")) {
            treeData = props.treeData;
          } else if (needSync("children")) {
            warning_default(false, "`children` of Tree is deprecated. Please use `treeData` instead.");
            treeData = convertTreeToData(props.children);
          }
          if (treeData) {
            newState.treeData = treeData;
            var entitiesMap = convertDataToEntities(treeData, {
              fieldNames
            });
            newState.keyEntities = _objectSpread2(_defineProperty({}, MOTION_KEY, MotionEntity), entitiesMap.keyEntities);
            if (true) {
              warningWithoutKey(treeData, fieldNames);
            }
          }
          var keyEntities = newState.keyEntities || prevState.keyEntities;
          if (needSync("expandedKeys") || prevProps && needSync("autoExpandParent")) {
            newState.expandedKeys = props.autoExpandParent || !prevProps && props.defaultExpandParent ? conductExpandParent(props.expandedKeys, keyEntities) : props.expandedKeys;
          } else if (!prevProps && props.defaultExpandAll) {
            var cloneKeyEntities = _objectSpread2({}, keyEntities);
            delete cloneKeyEntities[MOTION_KEY];
            var nextExpandedKeys = [];
            Object.keys(cloneKeyEntities).forEach(function(key) {
              var entity = cloneKeyEntities[key];
              if (entity.children && entity.children.length) {
                nextExpandedKeys.push(entity.key);
              }
            });
            newState.expandedKeys = nextExpandedKeys;
          } else if (!prevProps && props.defaultExpandedKeys) {
            newState.expandedKeys = props.autoExpandParent || props.defaultExpandParent ? conductExpandParent(props.defaultExpandedKeys, keyEntities) : props.defaultExpandedKeys;
          }
          if (!newState.expandedKeys) {
            delete newState.expandedKeys;
          }
          if (treeData || newState.expandedKeys) {
            var flattenNodes = flattenTreeData(treeData || prevState.treeData, newState.expandedKeys || prevState.expandedKeys, fieldNames);
            newState.flattenNodes = flattenNodes;
          }
          if (props.selectable) {
            if (needSync("selectedKeys")) {
              newState.selectedKeys = calcSelectedKeys(props.selectedKeys, props);
            } else if (!prevProps && props.defaultSelectedKeys) {
              newState.selectedKeys = calcSelectedKeys(props.defaultSelectedKeys, props);
            }
          }
          if (props.checkable) {
            var checkedKeyEntity;
            if (needSync("checkedKeys")) {
              checkedKeyEntity = parseCheckedKeys(props.checkedKeys) || {};
            } else if (!prevProps && props.defaultCheckedKeys) {
              checkedKeyEntity = parseCheckedKeys(props.defaultCheckedKeys) || {};
            } else if (treeData) {
              checkedKeyEntity = parseCheckedKeys(props.checkedKeys) || {
                checkedKeys: prevState.checkedKeys,
                halfCheckedKeys: prevState.halfCheckedKeys
              };
            }
            if (checkedKeyEntity) {
              var _checkedKeyEntity = checkedKeyEntity, _checkedKeyEntity$che = _checkedKeyEntity.checkedKeys, checkedKeys = _checkedKeyEntity$che === void 0 ? [] : _checkedKeyEntity$che, _checkedKeyEntity$hal = _checkedKeyEntity.halfCheckedKeys, halfCheckedKeys = _checkedKeyEntity$hal === void 0 ? [] : _checkedKeyEntity$hal;
              if (!props.checkStrictly) {
                var conductKeys = conductCheck(checkedKeys, true, keyEntities);
                checkedKeys = conductKeys.checkedKeys;
                halfCheckedKeys = conductKeys.halfCheckedKeys;
              }
              newState.checkedKeys = checkedKeys;
              newState.halfCheckedKeys = halfCheckedKeys;
            }
          }
          if (needSync("loadedKeys")) {
            newState.loadedKeys = props.loadedKeys;
          }
          return newState;
        }
      }]);
      return Tree2;
    })(React133.Component);
    _defineProperty(Tree, "defaultProps", {
      prefixCls: "rc-tree",
      showLine: false,
      showIcon: true,
      selectable: true,
      multiple: false,
      checkable: false,
      disabled: false,
      checkStrictly: false,
      draggable: false,
      defaultExpandParent: true,
      autoExpandParent: false,
      defaultExpandAll: false,
      defaultExpandedKeys: [],
      defaultCheckedKeys: [],
      defaultSelectedKeys: [],
      dropIndicatorRender: DropIndicator_default,
      allowDrop: function allowDrop() {
        return true;
      },
      expandAction: false
    });
    _defineProperty(Tree, "TreeNode", TreeNode_default);
    Tree_default = Tree;
  }
});

// node_modules/rc-tree/es/index.js
var es_exports7 = {};
__export(es_exports7, {
  TreeNode: () => TreeNode_default,
  UnstableContext: () => UnstableContext,
  default: () => es_default11
});
var es_default11;
var init_es14 = __esm({
  "node_modules/rc-tree/es/index.js"() {
    init_Tree();
    init_TreeNode();
    init_contextTypes();
    es_default11 = Tree_default;
  }
});

// node_modules/rc-collapse/es/PanelContent.js
var import_classnames41, import_react26, PanelContent, PanelContent_default;
var init_PanelContent = __esm({
  "node_modules/rc-collapse/es/PanelContent.js"() {
    init_defineProperty();
    init_slicedToArray();
    import_classnames41 = __toESM(require_classnames());
    import_react26 = __toESM(require_react());
    PanelContent = import_react26.default.forwardRef(function(props, ref) {
      var prefixCls = props.prefixCls, forceRender = props.forceRender, className = props.className, style2 = props.style, children = props.children, isActive2 = props.isActive, role = props.role, customizeClassNames = props.classNames, styles = props.styles;
      var _React$useState = import_react26.default.useState(isActive2 || forceRender), _React$useState2 = _slicedToArray(_React$useState, 2), rendered = _React$useState2[0], setRendered = _React$useState2[1];
      import_react26.default.useEffect(function() {
        if (forceRender || isActive2) {
          setRendered(true);
        }
      }, [forceRender, isActive2]);
      if (!rendered) {
        return null;
      }
      return import_react26.default.createElement("div", {
        ref,
        className: (0, import_classnames41.default)("".concat(prefixCls, "-content"), _defineProperty(_defineProperty({}, "".concat(prefixCls, "-content-active"), isActive2), "".concat(prefixCls, "-content-inactive"), !isActive2), className),
        style: style2,
        role
      }, import_react26.default.createElement("div", {
        className: (0, import_classnames41.default)("".concat(prefixCls, "-content-box"), customizeClassNames === null || customizeClassNames === void 0 ? void 0 : customizeClassNames.body),
        style: styles === null || styles === void 0 ? void 0 : styles.body
      }, children));
    });
    PanelContent.displayName = "PanelContent";
    PanelContent_default = PanelContent;
  }
});

// node_modules/rc-collapse/es/Panel.js
var import_classnames42, import_react27, _excluded40, CollapsePanel, Panel_default2;
var init_Panel2 = __esm({
  "node_modules/rc-collapse/es/Panel.js"() {
    init_objectSpread2();
    init_extends();
    init_defineProperty();
    init_objectWithoutProperties();
    import_classnames42 = __toESM(require_classnames());
    init_es4();
    init_KeyCode();
    import_react27 = __toESM(require_react());
    init_PanelContent();
    _excluded40 = ["showArrow", "headerClass", "isActive", "onItemClick", "forceRender", "className", "classNames", "styles", "prefixCls", "collapsible", "accordion", "panelKey", "extra", "header", "expandIcon", "openMotion", "destroyInactivePanel", "children"];
    CollapsePanel = import_react27.default.forwardRef(function(props, ref) {
      var _props$showArrow = props.showArrow, showArrow = _props$showArrow === void 0 ? true : _props$showArrow, headerClass = props.headerClass, isActive2 = props.isActive, onItemClick = props.onItemClick, forceRender = props.forceRender, className = props.className, _props$classNames = props.classNames, customizeClassNames = _props$classNames === void 0 ? {} : _props$classNames, _props$styles = props.styles, styles = _props$styles === void 0 ? {} : _props$styles, prefixCls = props.prefixCls, collapsible = props.collapsible, accordion = props.accordion, panelKey = props.panelKey, extra = props.extra, header = props.header, expandIcon = props.expandIcon, openMotion = props.openMotion, destroyInactivePanel = props.destroyInactivePanel, children = props.children, resetProps = _objectWithoutProperties(props, _excluded40);
      var disabled = collapsible === "disabled";
      var ifExtraExist = extra !== null && extra !== void 0 && typeof extra !== "boolean";
      var collapsibleProps = _defineProperty(_defineProperty(_defineProperty({
        onClick: function onClick() {
          onItemClick === null || onItemClick === void 0 || onItemClick(panelKey);
        },
        onKeyDown: function onKeyDown(e) {
          if (e.key === "Enter" || e.keyCode === KeyCode_default.ENTER || e.which === KeyCode_default.ENTER) {
            onItemClick === null || onItemClick === void 0 || onItemClick(panelKey);
          }
        },
        role: accordion ? "tab" : "button"
      }, "aria-expanded", isActive2), "aria-disabled", disabled), "tabIndex", disabled ? -1 : 0);
      var iconNodeInner = typeof expandIcon === "function" ? expandIcon(props) : import_react27.default.createElement("i", {
        className: "arrow"
      });
      var iconNode = iconNodeInner && import_react27.default.createElement("div", _extends({
        className: "".concat(prefixCls, "-expand-icon")
      }, ["header", "icon"].includes(collapsible) ? collapsibleProps : {}), iconNodeInner);
      var collapsePanelClassNames = (0, import_classnames42.default)("".concat(prefixCls, "-item"), _defineProperty(_defineProperty({}, "".concat(prefixCls, "-item-active"), isActive2), "".concat(prefixCls, "-item-disabled"), disabled), className);
      var headerClassName = (0, import_classnames42.default)(headerClass, "".concat(prefixCls, "-header"), _defineProperty({}, "".concat(prefixCls, "-collapsible-").concat(collapsible), !!collapsible), customizeClassNames.header);
      var headerProps = _objectSpread2({
        className: headerClassName,
        style: styles.header
      }, ["header", "icon"].includes(collapsible) ? {} : collapsibleProps);
      return import_react27.default.createElement("div", _extends({}, resetProps, {
        ref,
        className: collapsePanelClassNames
      }), import_react27.default.createElement("div", headerProps, showArrow && iconNode, import_react27.default.createElement("span", _extends({
        className: "".concat(prefixCls, "-header-text")
      }, collapsible === "header" ? collapsibleProps : {}), header), ifExtraExist && import_react27.default.createElement("div", {
        className: "".concat(prefixCls, "-extra")
      }, extra)), import_react27.default.createElement(es_default2, _extends({
        visible: isActive2,
        leavedClassName: "".concat(prefixCls, "-content-hidden")
      }, openMotion, {
        forceRender,
        removeOnLeave: destroyInactivePanel
      }), function(_ref, motionRef) {
        var motionClassName = _ref.className, motionStyle = _ref.style;
        return import_react27.default.createElement(PanelContent_default, {
          ref: motionRef,
          prefixCls,
          className: motionClassName,
          classNames: customizeClassNames,
          style: motionStyle,
          styles,
          isActive: isActive2,
          forceRender,
          role: accordion ? "tabpanel" : void 0
        }, children);
      }));
    });
    Panel_default2 = CollapsePanel;
  }
});

// node_modules/rc-collapse/es/hooks/useItems.js
function useItems(items, rawChildren, props) {
  if (Array.isArray(items)) {
    return convertItemsToNodes2(items, props);
  }
  return toArray(rawChildren).map(function(child, index2) {
    return getNewChild(child, index2, props);
  });
}
var import_react28, _excluded41, convertItemsToNodes2, getNewChild, useItems_default;
var init_useItems = __esm({
  "node_modules/rc-collapse/es/hooks/useItems.js"() {
    init_extends();
    init_objectWithoutProperties();
    init_toArray();
    import_react28 = __toESM(require_react());
    init_Panel2();
    _excluded41 = ["children", "label", "key", "collapsible", "onItemClick", "destroyInactivePanel"];
    convertItemsToNodes2 = function convertItemsToNodes3(items, props) {
      var prefixCls = props.prefixCls, accordion = props.accordion, collapsible = props.collapsible, destroyInactivePanel = props.destroyInactivePanel, onItemClick = props.onItemClick, activeKey = props.activeKey, openMotion = props.openMotion, expandIcon = props.expandIcon;
      return items.map(function(item, index2) {
        var children = item.children, label = item.label, rawKey = item.key, rawCollapsible = item.collapsible, rawOnItemClick = item.onItemClick, rawDestroyInactivePanel = item.destroyInactivePanel, restProps = _objectWithoutProperties(item, _excluded41);
        var key = String(rawKey !== null && rawKey !== void 0 ? rawKey : index2);
        var mergeCollapsible = rawCollapsible !== null && rawCollapsible !== void 0 ? rawCollapsible : collapsible;
        var mergeDestroyInactivePanel = rawDestroyInactivePanel !== null && rawDestroyInactivePanel !== void 0 ? rawDestroyInactivePanel : destroyInactivePanel;
        var handleItemClick = function handleItemClick2(value) {
          if (mergeCollapsible === "disabled") return;
          onItemClick(value);
          rawOnItemClick === null || rawOnItemClick === void 0 || rawOnItemClick(value);
        };
        var isActive2 = false;
        if (accordion) {
          isActive2 = activeKey[0] === key;
        } else {
          isActive2 = activeKey.indexOf(key) > -1;
        }
        return import_react28.default.createElement(Panel_default2, _extends({}, restProps, {
          prefixCls,
          key,
          panelKey: key,
          isActive: isActive2,
          accordion,
          openMotion,
          expandIcon,
          header: label,
          collapsible: mergeCollapsible,
          onItemClick: handleItemClick,
          destroyInactivePanel: mergeDestroyInactivePanel
        }), children);
      });
    };
    getNewChild = function getNewChild2(child, index2, props) {
      if (!child) return null;
      var prefixCls = props.prefixCls, accordion = props.accordion, collapsible = props.collapsible, destroyInactivePanel = props.destroyInactivePanel, onItemClick = props.onItemClick, activeKey = props.activeKey, openMotion = props.openMotion, expandIcon = props.expandIcon;
      var key = child.key || String(index2);
      var _child$props = child.props, header = _child$props.header, headerClass = _child$props.headerClass, childDestroyInactivePanel = _child$props.destroyInactivePanel, childCollapsible = _child$props.collapsible, childOnItemClick = _child$props.onItemClick;
      var isActive2 = false;
      if (accordion) {
        isActive2 = activeKey[0] === key;
      } else {
        isActive2 = activeKey.indexOf(key) > -1;
      }
      var mergeCollapsible = childCollapsible !== null && childCollapsible !== void 0 ? childCollapsible : collapsible;
      var handleItemClick = function handleItemClick2(value) {
        if (mergeCollapsible === "disabled") return;
        onItemClick(value);
        childOnItemClick === null || childOnItemClick === void 0 || childOnItemClick(value);
      };
      var childProps = {
        key,
        panelKey: key,
        header,
        headerClass,
        isActive: isActive2,
        prefixCls,
        destroyInactivePanel: childDestroyInactivePanel !== null && childDestroyInactivePanel !== void 0 ? childDestroyInactivePanel : destroyInactivePanel,
        openMotion,
        accordion,
        children: child.props.children,
        onItemClick: handleItemClick,
        expandIcon,
        collapsible: mergeCollapsible
      };
      if (typeof child.type === "string") {
        return child;
      }
      Object.keys(childProps).forEach(function(propName) {
        if (typeof childProps[propName] === "undefined") {
          delete childProps[propName];
        }
      });
      return import_react28.default.cloneElement(child, childProps);
    };
    useItems_default = useItems;
  }
});

// node_modules/rc-collapse/es/Collapse.js
function getActiveKeysArray(activeKey) {
  var currentActiveKey = activeKey;
  if (!Array.isArray(currentActiveKey)) {
    var activeKeyType = _typeof(currentActiveKey);
    currentActiveKey = activeKeyType === "number" || activeKeyType === "string" ? [currentActiveKey] : [];
  }
  return currentActiveKey.map(function(key) {
    return String(key);
  });
}
var import_classnames43, import_react29, Collapse, Collapse_default;
var init_Collapse = __esm({
  "node_modules/rc-collapse/es/Collapse.js"() {
    init_extends();
    init_toConsumableArray();
    init_slicedToArray();
    init_typeof();
    import_classnames43 = __toESM(require_classnames());
    init_useMergedState();
    init_warning();
    import_react29 = __toESM(require_react());
    init_useItems();
    init_Panel2();
    init_pickAttrs();
    Collapse = import_react29.default.forwardRef(function(props, ref) {
      var _props$prefixCls = props.prefixCls, prefixCls = _props$prefixCls === void 0 ? "rc-collapse" : _props$prefixCls, _props$destroyInactiv = props.destroyInactivePanel, destroyInactivePanel = _props$destroyInactiv === void 0 ? false : _props$destroyInactiv, style2 = props.style, accordion = props.accordion, className = props.className, children = props.children, collapsible = props.collapsible, openMotion = props.openMotion, expandIcon = props.expandIcon, rawActiveKey = props.activeKey, defaultActiveKey = props.defaultActiveKey, _onChange = props.onChange, items = props.items;
      var collapseClassName = (0, import_classnames43.default)(prefixCls, className);
      var _useMergedState = useMergedState([], {
        value: rawActiveKey,
        onChange: function onChange(v) {
          return _onChange === null || _onChange === void 0 ? void 0 : _onChange(v);
        },
        defaultValue: defaultActiveKey,
        postState: getActiveKeysArray
      }), _useMergedState2 = _slicedToArray(_useMergedState, 2), activeKey = _useMergedState2[0], setActiveKey = _useMergedState2[1];
      var onItemClick = function onItemClick2(key) {
        return setActiveKey(function() {
          if (accordion) {
            return activeKey[0] === key ? [] : [key];
          }
          var index2 = activeKey.indexOf(key);
          var isActive2 = index2 > -1;
          if (isActive2) {
            return activeKey.filter(function(item) {
              return item !== key;
            });
          }
          return [].concat(_toConsumableArray(activeKey), [key]);
        });
      };
      warning_default(!children, "[rc-collapse] `children` will be removed in next major version. Please use `items` instead.");
      var mergedChildren = useItems_default(items, children, {
        prefixCls,
        accordion,
        openMotion,
        expandIcon,
        collapsible,
        destroyInactivePanel,
        onItemClick,
        activeKey
      });
      return import_react29.default.createElement("div", _extends({
        ref,
        className: collapseClassName,
        style: style2,
        role: accordion ? "tablist" : void 0
      }, pickAttrs(props, {
        aria: true,
        data: true
      })), mergedChildren);
    });
    Collapse_default = Object.assign(Collapse, {
      /**
       * @deprecated use `items` instead, will be removed in `v4.0.0`
       */
      Panel: Panel_default2
    });
  }
});

// node_modules/rc-collapse/es/index.js
var es_exports8 = {};
__export(es_exports8, {
  Panel: () => Panel2,
  default: () => es_default12
});
var es_default12, Panel2;
var init_es15 = __esm({
  "node_modules/rc-collapse/es/index.js"() {
    init_Collapse();
    es_default12 = Collapse_default;
    Panel2 = Collapse_default.Panel;
  }
});

// node_modules/rc-dropdown/es/hooks/useAccessibility.js
function useAccessibility2(_ref) {
  var visible = _ref.visible, triggerRef = _ref.triggerRef, onVisibleChange = _ref.onVisibleChange, autoFocus = _ref.autoFocus, overlayRef = _ref.overlayRef;
  var focusMenuRef = React138.useRef(false);
  var handleCloseMenuAndReturnFocus = function handleCloseMenuAndReturnFocus2() {
    if (visible) {
      var _triggerRef$current, _triggerRef$current$f;
      (_triggerRef$current = triggerRef.current) === null || _triggerRef$current === void 0 || (_triggerRef$current$f = _triggerRef$current.focus) === null || _triggerRef$current$f === void 0 || _triggerRef$current$f.call(_triggerRef$current);
      onVisibleChange === null || onVisibleChange === void 0 || onVisibleChange(false);
    }
  };
  var focusMenu = function focusMenu2() {
    var _overlayRef$current;
    if ((_overlayRef$current = overlayRef.current) !== null && _overlayRef$current !== void 0 && _overlayRef$current.focus) {
      overlayRef.current.focus();
      focusMenuRef.current = true;
      return true;
    }
    return false;
  };
  var handleKeyDown = function handleKeyDown2(event) {
    switch (event.keyCode) {
      case ESC2:
        handleCloseMenuAndReturnFocus();
        break;
      case TAB: {
        var focusResult = false;
        if (!focusMenuRef.current) {
          focusResult = focusMenu();
        }
        if (focusResult) {
          event.preventDefault();
        } else {
          handleCloseMenuAndReturnFocus();
        }
        break;
      }
    }
  };
  React138.useEffect(function() {
    if (visible) {
      window.addEventListener("keydown", handleKeyDown);
      if (autoFocus) {
        raf_default(focusMenu, 3);
      }
      return function() {
        window.removeEventListener("keydown", handleKeyDown);
        focusMenuRef.current = false;
      };
    }
    return function() {
      focusMenuRef.current = false;
    };
  }, [visible]);
}
var React138, ESC2, TAB;
var init_useAccessibility2 = __esm({
  "node_modules/rc-dropdown/es/hooks/useAccessibility.js"() {
    init_KeyCode();
    init_raf();
    React138 = __toESM(require_react());
    ESC2 = KeyCode_default.ESC;
    TAB = KeyCode_default.TAB;
  }
});

// node_modules/rc-dropdown/es/Overlay.js
var import_react30, Overlay, Overlay_default;
var init_Overlay = __esm({
  "node_modules/rc-dropdown/es/Overlay.js"() {
    init_ref();
    import_react30 = __toESM(require_react());
    Overlay = (0, import_react30.forwardRef)(function(props, ref) {
      var overlay = props.overlay, arrow = props.arrow, prefixCls = props.prefixCls;
      var overlayNode = (0, import_react30.useMemo)(function() {
        var overlayElement;
        if (typeof overlay === "function") {
          overlayElement = overlay();
        } else {
          overlayElement = overlay;
        }
        return overlayElement;
      }, [overlay]);
      var composedRef = composeRef(ref, getNodeRef(overlayNode));
      return import_react30.default.createElement(import_react30.default.Fragment, null, arrow && import_react30.default.createElement("div", {
        className: "".concat(prefixCls, "-arrow")
      }), import_react30.default.cloneElement(overlayNode, {
        ref: supportRef(overlayNode) ? composedRef : void 0
      }));
    });
    Overlay_default = Overlay;
  }
});

// node_modules/rc-dropdown/es/placements.js
var autoAdjustOverflow2, targetOffset2, placements3, placements_default;
var init_placements3 = __esm({
  "node_modules/rc-dropdown/es/placements.js"() {
    autoAdjustOverflow2 = {
      adjustX: 1,
      adjustY: 1
    };
    targetOffset2 = [0, 0];
    placements3 = {
      topLeft: {
        points: ["bl", "tl"],
        overflow: autoAdjustOverflow2,
        offset: [0, -4],
        targetOffset: targetOffset2
      },
      top: {
        points: ["bc", "tc"],
        overflow: autoAdjustOverflow2,
        offset: [0, -4],
        targetOffset: targetOffset2
      },
      topRight: {
        points: ["br", "tr"],
        overflow: autoAdjustOverflow2,
        offset: [0, -4],
        targetOffset: targetOffset2
      },
      bottomLeft: {
        points: ["tl", "bl"],
        overflow: autoAdjustOverflow2,
        offset: [0, 4],
        targetOffset: targetOffset2
      },
      bottom: {
        points: ["tc", "bc"],
        overflow: autoAdjustOverflow2,
        offset: [0, 4],
        targetOffset: targetOffset2
      },
      bottomRight: {
        points: ["tr", "br"],
        overflow: autoAdjustOverflow2,
        offset: [0, 4],
        targetOffset: targetOffset2
      }
    };
    placements_default = placements3;
  }
});

// node_modules/rc-dropdown/es/Dropdown.js
function Dropdown(props, ref) {
  var _children$props;
  var _props$arrow = props.arrow, arrow = _props$arrow === void 0 ? false : _props$arrow, _props$prefixCls = props.prefixCls, prefixCls = _props$prefixCls === void 0 ? "rc-dropdown" : _props$prefixCls, transitionName = props.transitionName, animation = props.animation, align = props.align, _props$placement = props.placement, placement = _props$placement === void 0 ? "bottomLeft" : _props$placement, _props$placements = props.placements, placements4 = _props$placements === void 0 ? placements_default : _props$placements, getPopupContainer = props.getPopupContainer, showAction = props.showAction, hideAction = props.hideAction, overlayClassName = props.overlayClassName, overlayStyle = props.overlayStyle, visible = props.visible, _props$trigger = props.trigger, trigger = _props$trigger === void 0 ? ["hover"] : _props$trigger, autoFocus = props.autoFocus, overlay = props.overlay, children = props.children, onVisibleChange = props.onVisibleChange, otherProps = _objectWithoutProperties(props, _excluded42);
  var _React$useState = import_react31.default.useState(), _React$useState2 = _slicedToArray(_React$useState, 2), triggerVisible = _React$useState2[0], setTriggerVisible = _React$useState2[1];
  var mergedVisible = "visible" in props ? visible : triggerVisible;
  var triggerRef = import_react31.default.useRef(null);
  var overlayRef = import_react31.default.useRef(null);
  var childRef = import_react31.default.useRef(null);
  import_react31.default.useImperativeHandle(ref, function() {
    return triggerRef.current;
  });
  var handleVisibleChange = function handleVisibleChange2(newVisible) {
    setTriggerVisible(newVisible);
    onVisibleChange === null || onVisibleChange === void 0 || onVisibleChange(newVisible);
  };
  useAccessibility2({
    visible: mergedVisible,
    triggerRef: childRef,
    onVisibleChange: handleVisibleChange,
    autoFocus,
    overlayRef
  });
  var onClick = function onClick2(e) {
    var onOverlayClick = props.onOverlayClick;
    setTriggerVisible(false);
    if (onOverlayClick) {
      onOverlayClick(e);
    }
  };
  var getMenuElement = function getMenuElement2() {
    return import_react31.default.createElement(Overlay_default, {
      ref: overlayRef,
      overlay,
      prefixCls,
      arrow
    });
  };
  var getMenuElementOrLambda = function getMenuElementOrLambda2() {
    if (typeof overlay === "function") {
      return getMenuElement;
    }
    return getMenuElement();
  };
  var getMinOverlayWidthMatchTrigger = function getMinOverlayWidthMatchTrigger2() {
    var minOverlayWidthMatchTrigger = props.minOverlayWidthMatchTrigger, alignPoint = props.alignPoint;
    if ("minOverlayWidthMatchTrigger" in props) {
      return minOverlayWidthMatchTrigger;
    }
    return !alignPoint;
  };
  var getOpenClassName = function getOpenClassName2() {
    var openClassName = props.openClassName;
    if (openClassName !== void 0) {
      return openClassName;
    }
    return "".concat(prefixCls, "-open");
  };
  var childrenNode = import_react31.default.cloneElement(children, {
    className: (0, import_classnames44.default)((_children$props = children.props) === null || _children$props === void 0 ? void 0 : _children$props.className, mergedVisible && getOpenClassName()),
    ref: supportRef(children) ? composeRef(childRef, getNodeRef(children)) : void 0
  });
  var triggerHideAction = hideAction;
  if (!triggerHideAction && trigger.indexOf("contextMenu") !== -1) {
    triggerHideAction = ["click"];
  }
  return import_react31.default.createElement(es_default5, _extends({
    builtinPlacements: placements4
  }, otherProps, {
    prefixCls,
    ref: triggerRef,
    popupClassName: (0, import_classnames44.default)(overlayClassName, _defineProperty({}, "".concat(prefixCls, "-show-arrow"), arrow)),
    popupStyle: overlayStyle,
    action: trigger,
    showAction,
    hideAction: triggerHideAction,
    popupPlacement: placement,
    popupAlign: align,
    popupTransitionName: transitionName,
    popupAnimation: animation,
    popupVisible: mergedVisible,
    stretch: getMinOverlayWidthMatchTrigger() ? "minWidth" : "",
    popup: getMenuElementOrLambda(),
    onPopupVisibleChange: handleVisibleChange,
    onPopupClick: onClick,
    getPopupContainer
  }), childrenNode);
}
var import_classnames44, import_react31, _excluded42, Dropdown_default;
var init_Dropdown = __esm({
  "node_modules/rc-dropdown/es/Dropdown.js"() {
    init_extends();
    init_defineProperty();
    init_slicedToArray();
    init_objectWithoutProperties();
    init_es7();
    import_classnames44 = __toESM(require_classnames());
    init_ref();
    import_react31 = __toESM(require_react());
    init_useAccessibility2();
    init_Overlay();
    init_placements3();
    _excluded42 = ["arrow", "prefixCls", "transitionName", "animation", "align", "placement", "placements", "getPopupContainer", "showAction", "hideAction", "overlayClassName", "overlayStyle", "visible", "trigger", "autoFocus", "overlay", "children", "onVisibleChange"];
    Dropdown_default = import_react31.default.forwardRef(Dropdown);
  }
});

// node_modules/rc-dropdown/es/index.js
var es_exports9 = {};
__export(es_exports9, {
  default: () => es_default13
});
var es_default13;
var init_es16 = __esm({
  "node_modules/rc-dropdown/es/index.js"() {
    init_Dropdown();
    es_default13 = Dropdown_default;
  }
});

// node_modules/rc-checkbox/es/index.js
var es_exports10 = {};
__export(es_exports10, {
  Checkbox: () => Checkbox,
  default: () => es_default14
});
var import_classnames45, React141, import_react32, _excluded43, Checkbox, es_default14;
var init_es17 = __esm({
  "node_modules/rc-checkbox/es/index.js"() {
    init_extends();
    init_objectSpread2();
    init_defineProperty();
    init_slicedToArray();
    init_objectWithoutProperties();
    import_classnames45 = __toESM(require_classnames());
    init_useMergedState();
    React141 = __toESM(require_react());
    import_react32 = __toESM(require_react());
    _excluded43 = ["prefixCls", "className", "style", "checked", "disabled", "defaultChecked", "type", "title", "onChange"];
    Checkbox = (0, import_react32.forwardRef)(function(props, ref) {
      var _props$prefixCls = props.prefixCls, prefixCls = _props$prefixCls === void 0 ? "rc-checkbox" : _props$prefixCls, className = props.className, style2 = props.style, checked = props.checked, disabled = props.disabled, _props$defaultChecked = props.defaultChecked, defaultChecked = _props$defaultChecked === void 0 ? false : _props$defaultChecked, _props$type = props.type, type = _props$type === void 0 ? "checkbox" : _props$type, title = props.title, onChange = props.onChange, inputProps = _objectWithoutProperties(props, _excluded43);
      var inputRef = (0, import_react32.useRef)(null);
      var holderRef = (0, import_react32.useRef)(null);
      var _useMergedState = useMergedState(defaultChecked, {
        value: checked
      }), _useMergedState2 = _slicedToArray(_useMergedState, 2), rawValue = _useMergedState2[0], setRawValue = _useMergedState2[1];
      (0, import_react32.useImperativeHandle)(ref, function() {
        return {
          focus: function focus(options) {
            var _inputRef$current;
            (_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 || _inputRef$current.focus(options);
          },
          blur: function blur() {
            var _inputRef$current2;
            (_inputRef$current2 = inputRef.current) === null || _inputRef$current2 === void 0 || _inputRef$current2.blur();
          },
          input: inputRef.current,
          nativeElement: holderRef.current
        };
      });
      var classString = (0, import_classnames45.default)(prefixCls, className, _defineProperty(_defineProperty({}, "".concat(prefixCls, "-checked"), rawValue), "".concat(prefixCls, "-disabled"), disabled));
      var handleChange = function handleChange2(e) {
        if (disabled) {
          return;
        }
        if (!("checked" in props)) {
          setRawValue(e.target.checked);
        }
        onChange === null || onChange === void 0 || onChange({
          target: _objectSpread2(_objectSpread2({}, props), {}, {
            type,
            checked: e.target.checked
          }),
          stopPropagation: function stopPropagation() {
            e.stopPropagation();
          },
          preventDefault: function preventDefault() {
            e.preventDefault();
          },
          nativeEvent: e.nativeEvent
        });
      };
      return React141.createElement("span", {
        className: classString,
        title,
        style: style2,
        ref: holderRef
      }, React141.createElement("input", _extends({}, inputProps, {
        className: "".concat(prefixCls, "-input"),
        ref: inputRef,
        onChange: handleChange,
        disabled,
        checked: !!rawValue,
        type
      })), React141.createElement("span", {
        className: "".concat(prefixCls, "-inner")
      }));
    });
    es_default14 = Checkbox;
  }
});

// node_modules/rc-input/es/utils/commonUtils.js
function hasAddon(props) {
  return !!(props.addonBefore || props.addonAfter);
}
function hasPrefixSuffix(props) {
  return !!(props.prefix || props.suffix || props.allowClear);
}
function cloneEvent(event, target, value) {
  var currentTarget = target.cloneNode(true);
  var newEvent = Object.create(event, {
    target: {
      value: currentTarget
    },
    currentTarget: {
      value: currentTarget
    }
  });
  currentTarget.value = value;
  if (typeof target.selectionStart === "number" && typeof target.selectionEnd === "number") {
    currentTarget.selectionStart = target.selectionStart;
    currentTarget.selectionEnd = target.selectionEnd;
  }
  currentTarget.setSelectionRange = function() {
    target.setSelectionRange.apply(target, arguments);
  };
  return newEvent;
}
function resolveOnChange(target, e, onChange, targetValue) {
  if (!onChange) {
    return;
  }
  var event = e;
  if (e.type === "click") {
    event = cloneEvent(e, target, "");
    onChange(event);
    return;
  }
  if (target.type !== "file" && targetValue !== void 0) {
    event = cloneEvent(e, target, targetValue);
    onChange(event);
    return;
  }
  onChange(event);
}
function triggerFocus(element, option) {
  if (!element) return;
  element.focus(option);
  var _ref = option || {}, cursor = _ref.cursor;
  if (cursor) {
    var len = element.value.length;
    switch (cursor) {
      case "start":
        element.setSelectionRange(0, 0);
        break;
      case "end":
        element.setSelectionRange(len, len);
        break;
      default:
        element.setSelectionRange(0, len);
    }
  }
}
var init_commonUtils = __esm({
  "node_modules/rc-input/es/utils/commonUtils.js"() {
  }
});

// node_modules/rc-input/es/BaseInput.js
var import_classnames46, import_react33, BaseInput, BaseInput_default;
var init_BaseInput = __esm({
  "node_modules/rc-input/es/BaseInput.js"() {
    init_objectSpread2();
    init_extends();
    init_defineProperty();
    init_typeof();
    import_classnames46 = __toESM(require_classnames());
    import_react33 = __toESM(require_react());
    init_commonUtils();
    BaseInput = import_react33.default.forwardRef(function(props, ref) {
      var _props, _props2, _props3;
      var inputEl = props.inputElement, children = props.children, prefixCls = props.prefixCls, prefix = props.prefix, suffix = props.suffix, addonBefore = props.addonBefore, addonAfter = props.addonAfter, className = props.className, style2 = props.style, disabled = props.disabled, readOnly = props.readOnly, focused = props.focused, triggerFocus2 = props.triggerFocus, allowClear = props.allowClear, value = props.value, handleReset = props.handleReset, hidden = props.hidden, classes = props.classes, classNames51 = props.classNames, dataAttrs = props.dataAttrs, styles = props.styles, components = props.components, onClear = props.onClear;
      var inputElement = children !== null && children !== void 0 ? children : inputEl;
      var AffixWrapperComponent = (components === null || components === void 0 ? void 0 : components.affixWrapper) || "span";
      var GroupWrapperComponent = (components === null || components === void 0 ? void 0 : components.groupWrapper) || "span";
      var WrapperComponent = (components === null || components === void 0 ? void 0 : components.wrapper) || "span";
      var GroupAddonComponent = (components === null || components === void 0 ? void 0 : components.groupAddon) || "span";
      var containerRef = (0, import_react33.useRef)(null);
      var onInputClick = function onInputClick2(e) {
        var _containerRef$current;
        if ((_containerRef$current = containerRef.current) !== null && _containerRef$current !== void 0 && _containerRef$current.contains(e.target)) {
          triggerFocus2 === null || triggerFocus2 === void 0 || triggerFocus2();
        }
      };
      var hasAffix = hasPrefixSuffix(props);
      var element = (0, import_react33.cloneElement)(inputElement, {
        value,
        className: (0, import_classnames46.default)((_props = inputElement.props) === null || _props === void 0 ? void 0 : _props.className, !hasAffix && (classNames51 === null || classNames51 === void 0 ? void 0 : classNames51.variant)) || null
      });
      var groupRef = (0, import_react33.useRef)(null);
      import_react33.default.useImperativeHandle(ref, function() {
        return {
          nativeElement: groupRef.current || containerRef.current
        };
      });
      if (hasAffix) {
        var clearIcon = null;
        if (allowClear) {
          var needClear = !disabled && !readOnly && value;
          var clearIconCls = "".concat(prefixCls, "-clear-icon");
          var iconNode = _typeof(allowClear) === "object" && allowClear !== null && allowClear !== void 0 && allowClear.clearIcon ? allowClear.clearIcon : "✖";
          clearIcon = import_react33.default.createElement("button", {
            type: "button",
            tabIndex: -1,
            onClick: function onClick(event) {
              handleReset === null || handleReset === void 0 || handleReset(event);
              onClear === null || onClear === void 0 || onClear();
            },
            onMouseDown: function onMouseDown(e) {
              return e.preventDefault();
            },
            className: (0, import_classnames46.default)(clearIconCls, _defineProperty(_defineProperty({}, "".concat(clearIconCls, "-hidden"), !needClear), "".concat(clearIconCls, "-has-suffix"), !!suffix))
          }, iconNode);
        }
        var affixWrapperPrefixCls = "".concat(prefixCls, "-affix-wrapper");
        var affixWrapperCls = (0, import_classnames46.default)(affixWrapperPrefixCls, _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty({}, "".concat(prefixCls, "-disabled"), disabled), "".concat(affixWrapperPrefixCls, "-disabled"), disabled), "".concat(affixWrapperPrefixCls, "-focused"), focused), "".concat(affixWrapperPrefixCls, "-readonly"), readOnly), "".concat(affixWrapperPrefixCls, "-input-with-clear-btn"), suffix && allowClear && value), classes === null || classes === void 0 ? void 0 : classes.affixWrapper, classNames51 === null || classNames51 === void 0 ? void 0 : classNames51.affixWrapper, classNames51 === null || classNames51 === void 0 ? void 0 : classNames51.variant);
        var suffixNode = (suffix || allowClear) && import_react33.default.createElement("span", {
          className: (0, import_classnames46.default)("".concat(prefixCls, "-suffix"), classNames51 === null || classNames51 === void 0 ? void 0 : classNames51.suffix),
          style: styles === null || styles === void 0 ? void 0 : styles.suffix
        }, clearIcon, suffix);
        element = import_react33.default.createElement(AffixWrapperComponent, _extends({
          className: affixWrapperCls,
          style: styles === null || styles === void 0 ? void 0 : styles.affixWrapper,
          onClick: onInputClick
        }, dataAttrs === null || dataAttrs === void 0 ? void 0 : dataAttrs.affixWrapper, {
          ref: containerRef
        }), prefix && import_react33.default.createElement("span", {
          className: (0, import_classnames46.default)("".concat(prefixCls, "-prefix"), classNames51 === null || classNames51 === void 0 ? void 0 : classNames51.prefix),
          style: styles === null || styles === void 0 ? void 0 : styles.prefix
        }, prefix), element, suffixNode);
      }
      if (hasAddon(props)) {
        var wrapperCls = "".concat(prefixCls, "-group");
        var addonCls = "".concat(wrapperCls, "-addon");
        var groupWrapperCls = "".concat(wrapperCls, "-wrapper");
        var mergedWrapperClassName = (0, import_classnames46.default)("".concat(prefixCls, "-wrapper"), wrapperCls, classes === null || classes === void 0 ? void 0 : classes.wrapper, classNames51 === null || classNames51 === void 0 ? void 0 : classNames51.wrapper);
        var mergedGroupClassName = (0, import_classnames46.default)(groupWrapperCls, _defineProperty({}, "".concat(groupWrapperCls, "-disabled"), disabled), classes === null || classes === void 0 ? void 0 : classes.group, classNames51 === null || classNames51 === void 0 ? void 0 : classNames51.groupWrapper);
        element = import_react33.default.createElement(GroupWrapperComponent, {
          className: mergedGroupClassName,
          ref: groupRef
        }, import_react33.default.createElement(WrapperComponent, {
          className: mergedWrapperClassName
        }, addonBefore && import_react33.default.createElement(GroupAddonComponent, {
          className: addonCls
        }, addonBefore), element, addonAfter && import_react33.default.createElement(GroupAddonComponent, {
          className: addonCls
        }, addonAfter)));
      }
      return import_react33.default.cloneElement(element, {
        className: (0, import_classnames46.default)((_props2 = element.props) === null || _props2 === void 0 ? void 0 : _props2.className, className) || null,
        style: _objectSpread2(_objectSpread2({}, (_props3 = element.props) === null || _props3 === void 0 ? void 0 : _props3.style), style2),
        hidden
      });
    });
    BaseInput_default = BaseInput;
  }
});

// node_modules/rc-input/es/hooks/useCount.js
function useCount(count, showCount) {
  return React143.useMemo(function() {
    var mergedConfig = {};
    if (showCount) {
      mergedConfig.show = _typeof(showCount) === "object" && showCount.formatter ? showCount.formatter : !!showCount;
    }
    mergedConfig = _objectSpread2(_objectSpread2({}, mergedConfig), count);
    var _ref = mergedConfig, show = _ref.show, rest = _objectWithoutProperties(_ref, _excluded44);
    return _objectSpread2(_objectSpread2({}, rest), {}, {
      show: !!show,
      showFormatter: typeof show === "function" ? show : void 0,
      strategy: rest.strategy || function(value) {
        return value.length;
      }
    });
  }, [count, showCount]);
}
var React143, _excluded44;
var init_useCount = __esm({
  "node_modules/rc-input/es/hooks/useCount.js"() {
    init_objectWithoutProperties();
    init_objectSpread2();
    init_typeof();
    React143 = __toESM(require_react());
    _excluded44 = ["show"];
  }
});

// node_modules/rc-input/es/Input.js
var import_classnames47, import_react34, _excluded45, Input3, Input_default2;
var init_Input2 = __esm({
  "node_modules/rc-input/es/Input.js"() {
    init_objectSpread2();
    init_extends();
    init_defineProperty();
    init_toConsumableArray();
    init_slicedToArray();
    init_objectWithoutProperties();
    import_classnames47 = __toESM(require_classnames());
    init_useMergedState();
    init_omit();
    import_react34 = __toESM(require_react());
    init_BaseInput();
    init_useCount();
    init_commonUtils();
    _excluded45 = ["autoComplete", "onChange", "onFocus", "onBlur", "onPressEnter", "onKeyDown", "onKeyUp", "prefixCls", "disabled", "htmlSize", "className", "maxLength", "suffix", "showCount", "count", "type", "classes", "classNames", "styles", "onCompositionStart", "onCompositionEnd"];
    Input3 = (0, import_react34.forwardRef)(function(props, ref) {
      var autoComplete = props.autoComplete, onChange = props.onChange, onFocus = props.onFocus, onBlur = props.onBlur, onPressEnter = props.onPressEnter, onKeyDown = props.onKeyDown, onKeyUp = props.onKeyUp, _props$prefixCls = props.prefixCls, prefixCls = _props$prefixCls === void 0 ? "rc-input" : _props$prefixCls, disabled = props.disabled, htmlSize = props.htmlSize, className = props.className, maxLength = props.maxLength, suffix = props.suffix, showCount = props.showCount, count = props.count, _props$type = props.type, type = _props$type === void 0 ? "text" : _props$type, classes = props.classes, classNames51 = props.classNames, styles = props.styles, _onCompositionStart = props.onCompositionStart, onCompositionEnd = props.onCompositionEnd, rest = _objectWithoutProperties(props, _excluded45);
      var _useState = (0, import_react34.useState)(false), _useState2 = _slicedToArray(_useState, 2), focused = _useState2[0], setFocused = _useState2[1];
      var compositionRef = (0, import_react34.useRef)(false);
      var keyLockRef = (0, import_react34.useRef)(false);
      var inputRef = (0, import_react34.useRef)(null);
      var holderRef = (0, import_react34.useRef)(null);
      var focus = function focus2(option) {
        if (inputRef.current) {
          triggerFocus(inputRef.current, option);
        }
      };
      var _useMergedState = useMergedState(props.defaultValue, {
        value: props.value
      }), _useMergedState2 = _slicedToArray(_useMergedState, 2), value = _useMergedState2[0], setValue = _useMergedState2[1];
      var formatValue = value === void 0 || value === null ? "" : String(value);
      var _useState3 = (0, import_react34.useState)(null), _useState4 = _slicedToArray(_useState3, 2), selection = _useState4[0], setSelection = _useState4[1];
      var countConfig = useCount(count, showCount);
      var mergedMax = countConfig.max || maxLength;
      var valueLength = countConfig.strategy(formatValue);
      var isOutOfRange = !!mergedMax && valueLength > mergedMax;
      (0, import_react34.useImperativeHandle)(ref, function() {
        var _holderRef$current;
        return {
          focus,
          blur: function blur() {
            var _inputRef$current;
            (_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 || _inputRef$current.blur();
          },
          setSelectionRange: function setSelectionRange(start, end, direction) {
            var _inputRef$current2;
            (_inputRef$current2 = inputRef.current) === null || _inputRef$current2 === void 0 || _inputRef$current2.setSelectionRange(start, end, direction);
          },
          select: function select() {
            var _inputRef$current3;
            (_inputRef$current3 = inputRef.current) === null || _inputRef$current3 === void 0 || _inputRef$current3.select();
          },
          input: inputRef.current,
          nativeElement: ((_holderRef$current = holderRef.current) === null || _holderRef$current === void 0 ? void 0 : _holderRef$current.nativeElement) || inputRef.current
        };
      });
      (0, import_react34.useEffect)(function() {
        if (keyLockRef.current) {
          keyLockRef.current = false;
        }
        setFocused(function(prev) {
          return prev && disabled ? false : prev;
        });
      }, [disabled]);
      var triggerChange = function triggerChange2(e, currentValue, info) {
        var cutValue = currentValue;
        if (!compositionRef.current && countConfig.exceedFormatter && countConfig.max && countConfig.strategy(currentValue) > countConfig.max) {
          cutValue = countConfig.exceedFormatter(currentValue, {
            max: countConfig.max
          });
          if (currentValue !== cutValue) {
            var _inputRef$current4, _inputRef$current5;
            setSelection([((_inputRef$current4 = inputRef.current) === null || _inputRef$current4 === void 0 ? void 0 : _inputRef$current4.selectionStart) || 0, ((_inputRef$current5 = inputRef.current) === null || _inputRef$current5 === void 0 ? void 0 : _inputRef$current5.selectionEnd) || 0]);
          }
        } else if (info.source === "compositionEnd") {
          return;
        }
        setValue(cutValue);
        if (inputRef.current) {
          resolveOnChange(inputRef.current, e, onChange, cutValue);
        }
      };
      (0, import_react34.useEffect)(function() {
        if (selection) {
          var _inputRef$current6;
          (_inputRef$current6 = inputRef.current) === null || _inputRef$current6 === void 0 || _inputRef$current6.setSelectionRange.apply(_inputRef$current6, _toConsumableArray(selection));
        }
      }, [selection]);
      var onInternalChange = function onInternalChange2(e) {
        triggerChange(e, e.target.value, {
          source: "change"
        });
      };
      var onInternalCompositionEnd = function onInternalCompositionEnd2(e) {
        compositionRef.current = false;
        triggerChange(e, e.currentTarget.value, {
          source: "compositionEnd"
        });
        onCompositionEnd === null || onCompositionEnd === void 0 || onCompositionEnd(e);
      };
      var handleKeyDown = function handleKeyDown2(e) {
        if (onPressEnter && e.key === "Enter" && !keyLockRef.current) {
          keyLockRef.current = true;
          onPressEnter(e);
        }
        onKeyDown === null || onKeyDown === void 0 || onKeyDown(e);
      };
      var handleKeyUp = function handleKeyUp2(e) {
        if (e.key === "Enter") {
          keyLockRef.current = false;
        }
        onKeyUp === null || onKeyUp === void 0 || onKeyUp(e);
      };
      var handleFocus = function handleFocus2(e) {
        setFocused(true);
        onFocus === null || onFocus === void 0 || onFocus(e);
      };
      var handleBlur = function handleBlur2(e) {
        if (keyLockRef.current) {
          keyLockRef.current = false;
        }
        setFocused(false);
        onBlur === null || onBlur === void 0 || onBlur(e);
      };
      var handleReset = function handleReset2(e) {
        setValue("");
        focus();
        if (inputRef.current) {
          resolveOnChange(inputRef.current, e, onChange);
        }
      };
      var outOfRangeCls = isOutOfRange && "".concat(prefixCls, "-out-of-range");
      var getInputElement = function getInputElement2() {
        var otherProps = omit(props, [
          "prefixCls",
          "onPressEnter",
          "addonBefore",
          "addonAfter",
          "prefix",
          "suffix",
          "allowClear",
          // Input elements must be either controlled or uncontrolled,
          // specify either the value prop, or the defaultValue prop, but not both.
          "defaultValue",
          "showCount",
          "count",
          "classes",
          "htmlSize",
          "styles",
          "classNames",
          "onClear"
        ]);
        return import_react34.default.createElement("input", _extends({
          autoComplete
        }, otherProps, {
          onChange: onInternalChange,
          onFocus: handleFocus,
          onBlur: handleBlur,
          onKeyDown: handleKeyDown,
          onKeyUp: handleKeyUp,
          className: (0, import_classnames47.default)(prefixCls, _defineProperty({}, "".concat(prefixCls, "-disabled"), disabled), classNames51 === null || classNames51 === void 0 ? void 0 : classNames51.input),
          style: styles === null || styles === void 0 ? void 0 : styles.input,
          ref: inputRef,
          size: htmlSize,
          type,
          onCompositionStart: function onCompositionStart(e) {
            compositionRef.current = true;
            _onCompositionStart === null || _onCompositionStart === void 0 || _onCompositionStart(e);
          },
          onCompositionEnd: onInternalCompositionEnd
        }));
      };
      var getSuffix = function getSuffix2() {
        var hasMaxLength = Number(mergedMax) > 0;
        if (suffix || countConfig.show) {
          var dataCount = countConfig.showFormatter ? countConfig.showFormatter({
            value: formatValue,
            count: valueLength,
            maxLength: mergedMax
          }) : "".concat(valueLength).concat(hasMaxLength ? " / ".concat(mergedMax) : "");
          return import_react34.default.createElement(import_react34.default.Fragment, null, countConfig.show && import_react34.default.createElement("span", {
            className: (0, import_classnames47.default)("".concat(prefixCls, "-show-count-suffix"), _defineProperty({}, "".concat(prefixCls, "-show-count-has-suffix"), !!suffix), classNames51 === null || classNames51 === void 0 ? void 0 : classNames51.count),
            style: _objectSpread2({}, styles === null || styles === void 0 ? void 0 : styles.count)
          }, dataCount), suffix);
        }
        return null;
      };
      return import_react34.default.createElement(BaseInput_default, _extends({}, rest, {
        prefixCls,
        className: (0, import_classnames47.default)(className, outOfRangeCls),
        handleReset,
        value: formatValue,
        focused,
        triggerFocus: focus,
        suffix: getSuffix(),
        disabled,
        classes,
        classNames: classNames51,
        styles,
        ref: holderRef
      }), getInputElement());
    });
    Input_default2 = Input3;
  }
});

// node_modules/rc-input/es/index.js
var es_exports11 = {};
__export(es_exports11, {
  BaseInput: () => BaseInput_default,
  default: () => es_default15
});
var es_default15;
var init_es18 = __esm({
  "node_modules/rc-input/es/index.js"() {
    init_BaseInput();
    init_Input2();
    es_default15 = Input_default2;
  }
});

// node_modules/rc-pagination/es/locale/zh_CN.js
var locale, zh_CN_default;
var init_zh_CN = __esm({
  "node_modules/rc-pagination/es/locale/zh_CN.js"() {
    locale = {
      // Options
      items_per_page: "条/页",
      jump_to: "跳至",
      jump_to_confirm: "确定",
      page: "页",
      // Pagination
      prev_page: "上一页",
      next_page: "下一页",
      prev_5: "向前 5 页",
      next_5: "向后 5 页",
      prev_3: "向前 3 页",
      next_3: "向后 3 页",
      page_size: "页码"
    };
    zh_CN_default = locale;
  }
});

// node_modules/rc-pagination/es/Options.js
var import_react35, defaultPageSizeOptions, Options, Options_default;
var init_Options = __esm({
  "node_modules/rc-pagination/es/Options.js"() {
    init_slicedToArray();
    init_KeyCode();
    import_react35 = __toESM(require_react());
    defaultPageSizeOptions = [10, 20, 50, 100];
    Options = function Options2(props) {
      var _props$pageSizeOption = props.pageSizeOptions, pageSizeOptions = _props$pageSizeOption === void 0 ? defaultPageSizeOptions : _props$pageSizeOption, locale2 = props.locale, changeSize = props.changeSize, pageSize = props.pageSize, goButton = props.goButton, quickGo = props.quickGo, rootPrefixCls = props.rootPrefixCls, disabled = props.disabled, buildOptionText = props.buildOptionText, showSizeChanger = props.showSizeChanger, sizeChangerRender = props.sizeChangerRender;
      var _React$useState = import_react35.default.useState(""), _React$useState2 = _slicedToArray(_React$useState, 2), goInputText = _React$useState2[0], setGoInputText = _React$useState2[1];
      var getValidValue = function getValidValue2() {
        return !goInputText || Number.isNaN(goInputText) ? void 0 : Number(goInputText);
      };
      var mergeBuildOptionText = typeof buildOptionText === "function" ? buildOptionText : function(value) {
        return "".concat(value, " ").concat(locale2.items_per_page);
      };
      var handleChange = function handleChange2(e) {
        setGoInputText(e.target.value);
      };
      var handleBlur = function handleBlur2(e) {
        if (goButton || goInputText === "") {
          return;
        }
        setGoInputText("");
        if (e.relatedTarget && (e.relatedTarget.className.indexOf("".concat(rootPrefixCls, "-item-link")) >= 0 || e.relatedTarget.className.indexOf("".concat(rootPrefixCls, "-item")) >= 0)) {
          return;
        }
        quickGo === null || quickGo === void 0 || quickGo(getValidValue());
      };
      var go = function go2(e) {
        if (goInputText === "") {
          return;
        }
        if (e.keyCode === KeyCode_default.ENTER || e.type === "click") {
          setGoInputText("");
          quickGo === null || quickGo === void 0 || quickGo(getValidValue());
        }
      };
      var getPageSizeOptions = function getPageSizeOptions2() {
        if (pageSizeOptions.some(function(option) {
          return option.toString() === pageSize.toString();
        })) {
          return pageSizeOptions;
        }
        return pageSizeOptions.concat([pageSize]).sort(function(a, b) {
          var numberA = Number.isNaN(Number(a)) ? 0 : Number(a);
          var numberB = Number.isNaN(Number(b)) ? 0 : Number(b);
          return numberA - numberB;
        });
      };
      var prefixCls = "".concat(rootPrefixCls, "-options");
      if (!showSizeChanger && !quickGo) {
        return null;
      }
      var changeSelect = null;
      var goInput = null;
      var gotoButton = null;
      if (showSizeChanger && sizeChangerRender) {
        changeSelect = sizeChangerRender({
          disabled,
          size: pageSize,
          onSizeChange: function onSizeChange(nextValue) {
            changeSize === null || changeSize === void 0 || changeSize(Number(nextValue));
          },
          "aria-label": locale2.page_size,
          className: "".concat(prefixCls, "-size-changer"),
          options: getPageSizeOptions().map(function(opt) {
            return {
              label: mergeBuildOptionText(opt),
              value: opt
            };
          })
        });
      }
      if (quickGo) {
        if (goButton) {
          gotoButton = typeof goButton === "boolean" ? import_react35.default.createElement("button", {
            type: "button",
            onClick: go,
            onKeyUp: go,
            disabled,
            className: "".concat(prefixCls, "-quick-jumper-button")
          }, locale2.jump_to_confirm) : import_react35.default.createElement("span", {
            onClick: go,
            onKeyUp: go
          }, goButton);
        }
        goInput = import_react35.default.createElement("div", {
          className: "".concat(prefixCls, "-quick-jumper")
        }, locale2.jump_to, import_react35.default.createElement("input", {
          disabled,
          type: "text",
          value: goInputText,
          onChange: handleChange,
          onKeyUp: go,
          onBlur: handleBlur,
          "aria-label": locale2.page
        }), locale2.page, gotoButton);
      }
      return import_react35.default.createElement("li", {
        className: prefixCls
      }, changeSelect, goInput);
    };
    if (true) {
      Options.displayName = "Options";
    }
    Options_default = Options;
  }
});

// node_modules/rc-pagination/es/Pager.js
var import_classnames48, import_react36, Pager, Pager_default;
var init_Pager = __esm({
  "node_modules/rc-pagination/es/Pager.js"() {
    init_defineProperty();
    import_classnames48 = __toESM(require_classnames());
    import_react36 = __toESM(require_react());
    Pager = function Pager2(props) {
      var rootPrefixCls = props.rootPrefixCls, page = props.page, active = props.active, className = props.className, showTitle = props.showTitle, onClick = props.onClick, onKeyPress = props.onKeyPress, itemRender = props.itemRender;
      var prefixCls = "".concat(rootPrefixCls, "-item");
      var cls = (0, import_classnames48.default)(prefixCls, "".concat(prefixCls, "-").concat(page), _defineProperty(_defineProperty({}, "".concat(prefixCls, "-active"), active), "".concat(prefixCls, "-disabled"), !page), className);
      var handleClick = function handleClick2() {
        onClick(page);
      };
      var handleKeyPress = function handleKeyPress2(e) {
        onKeyPress(e, onClick, page);
      };
      var pager = itemRender(page, "page", import_react36.default.createElement("a", {
        rel: "nofollow"
      }, page));
      return pager ? import_react36.default.createElement("li", {
        title: showTitle ? String(page) : null,
        className: cls,
        onClick: handleClick,
        onKeyDown: handleKeyPress,
        tabIndex: 0
      }, pager) : null;
    };
    if (true) {
      Pager.displayName = "Pager";
    }
    Pager_default = Pager;
  }
});

// node_modules/rc-pagination/es/Pagination.js
function noop3() {
}
function isInteger(v) {
  var value = Number(v);
  return typeof value === "number" && !Number.isNaN(value) && isFinite(value) && Math.floor(value) === value;
}
function calculatePage(p, pageSize, total) {
  var _pageSize = typeof p === "undefined" ? pageSize : p;
  return Math.floor((total - 1) / _pageSize) + 1;
}
var import_classnames49, import_react37, defaultItemRender, Pagination, Pagination_default;
var init_Pagination = __esm({
  "node_modules/rc-pagination/es/Pagination.js"() {
    init_defineProperty();
    init_extends();
    init_typeof();
    init_objectSpread2();
    init_slicedToArray();
    import_classnames49 = __toESM(require_classnames());
    init_useMergedState();
    init_KeyCode();
    init_pickAttrs();
    init_warning();
    import_react37 = __toESM(require_react());
    init_zh_CN();
    init_Options();
    init_Pager();
    defaultItemRender = function defaultItemRender2(page, type, element) {
      return element;
    };
    Pagination = function Pagination2(props) {
      var _props$prefixCls = props.prefixCls, prefixCls = _props$prefixCls === void 0 ? "rc-pagination" : _props$prefixCls, _props$selectPrefixCl = props.selectPrefixCls, selectPrefixCls = _props$selectPrefixCl === void 0 ? "rc-select" : _props$selectPrefixCl, className = props.className, currentProp = props.current, _props$defaultCurrent = props.defaultCurrent, defaultCurrent = _props$defaultCurrent === void 0 ? 1 : _props$defaultCurrent, _props$total = props.total, total = _props$total === void 0 ? 0 : _props$total, pageSizeProp = props.pageSize, _props$defaultPageSiz = props.defaultPageSize, defaultPageSize = _props$defaultPageSiz === void 0 ? 10 : _props$defaultPageSiz, _props$onChange = props.onChange, onChange = _props$onChange === void 0 ? noop3 : _props$onChange, hideOnSinglePage = props.hideOnSinglePage, align = props.align, _props$showPrevNextJu = props.showPrevNextJumpers, showPrevNextJumpers = _props$showPrevNextJu === void 0 ? true : _props$showPrevNextJu, showQuickJumper = props.showQuickJumper, showLessItems = props.showLessItems, _props$showTitle = props.showTitle, showTitle = _props$showTitle === void 0 ? true : _props$showTitle, _props$onShowSizeChan = props.onShowSizeChange, onShowSizeChange = _props$onShowSizeChan === void 0 ? noop3 : _props$onShowSizeChan, _props$locale = props.locale, locale2 = _props$locale === void 0 ? zh_CN_default : _props$locale, style2 = props.style, _props$totalBoundaryS = props.totalBoundaryShowSizeChanger, totalBoundaryShowSizeChanger = _props$totalBoundaryS === void 0 ? 50 : _props$totalBoundaryS, disabled = props.disabled, simple = props.simple, showTotal = props.showTotal, _props$showSizeChange = props.showSizeChanger, showSizeChanger = _props$showSizeChange === void 0 ? total > totalBoundaryShowSizeChanger : _props$showSizeChange, sizeChangerRender = props.sizeChangerRender, pageSizeOptions = props.pageSizeOptions, _props$itemRender = props.itemRender, itemRender = _props$itemRender === void 0 ? defaultItemRender : _props$itemRender, jumpPrevIcon = props.jumpPrevIcon, jumpNextIcon = props.jumpNextIcon, prevIcon = props.prevIcon, nextIcon = props.nextIcon;
      var paginationRef = import_react37.default.useRef(null);
      var _useMergedState = useMergedState(10, {
        value: pageSizeProp,
        defaultValue: defaultPageSize
      }), _useMergedState2 = _slicedToArray(_useMergedState, 2), pageSize = _useMergedState2[0], setPageSize = _useMergedState2[1];
      var _useMergedState3 = useMergedState(1, {
        value: currentProp,
        defaultValue: defaultCurrent,
        postState: function postState(c) {
          return Math.max(1, Math.min(c, calculatePage(void 0, pageSize, total)));
        }
      }), _useMergedState4 = _slicedToArray(_useMergedState3, 2), current = _useMergedState4[0], setCurrent = _useMergedState4[1];
      var _React$useState = import_react37.default.useState(current), _React$useState2 = _slicedToArray(_React$useState, 2), internalInputVal = _React$useState2[0], setInternalInputVal = _React$useState2[1];
      (0, import_react37.useEffect)(function() {
        setInternalInputVal(current);
      }, [current]);
      var hasOnChange = onChange !== noop3;
      var hasCurrent = "current" in props;
      if (true) {
        warning_default(hasCurrent ? hasOnChange : true, "You provided a `current` prop to a Pagination component without an `onChange` handler. This will render a read-only component.");
      }
      var jumpPrevPage = Math.max(1, current - (showLessItems ? 3 : 5));
      var jumpNextPage = Math.min(calculatePage(void 0, pageSize, total), current + (showLessItems ? 3 : 5));
      function getItemIcon(icon, label) {
        var iconNode = icon || import_react37.default.createElement("button", {
          type: "button",
          "aria-label": label,
          className: "".concat(prefixCls, "-item-link")
        });
        if (typeof icon === "function") {
          iconNode = import_react37.default.createElement(icon, _objectSpread2({}, props));
        }
        return iconNode;
      }
      function getValidValue(e) {
        var inputValue = e.target.value;
        var allPages2 = calculatePage(void 0, pageSize, total);
        var value;
        if (inputValue === "") {
          value = inputValue;
        } else if (Number.isNaN(Number(inputValue))) {
          value = internalInputVal;
        } else if (inputValue >= allPages2) {
          value = allPages2;
        } else {
          value = Number(inputValue);
        }
        return value;
      }
      function isValid(page) {
        return isInteger(page) && page !== current && isInteger(total) && total > 0;
      }
      var shouldDisplayQuickJumper = total > pageSize ? showQuickJumper : false;
      function handleKeyDown(event) {
        if (event.keyCode === KeyCode_default.UP || event.keyCode === KeyCode_default.DOWN) {
          event.preventDefault();
        }
      }
      function handleKeyUp(event) {
        var value = getValidValue(event);
        if (value !== internalInputVal) {
          setInternalInputVal(value);
        }
        switch (event.keyCode) {
          case KeyCode_default.ENTER:
            handleChange(value);
            break;
          case KeyCode_default.UP:
            handleChange(value - 1);
            break;
          case KeyCode_default.DOWN:
            handleChange(value + 1);
            break;
          default:
            break;
        }
      }
      function handleBlur(event) {
        handleChange(getValidValue(event));
      }
      function changePageSize(size) {
        var newCurrent = calculatePage(size, pageSize, total);
        var nextCurrent = current > newCurrent && newCurrent !== 0 ? newCurrent : current;
        setPageSize(size);
        setInternalInputVal(nextCurrent);
        onShowSizeChange === null || onShowSizeChange === void 0 || onShowSizeChange(current, size);
        setCurrent(nextCurrent);
        onChange === null || onChange === void 0 || onChange(nextCurrent, size);
      }
      function handleChange(page) {
        if (isValid(page) && !disabled) {
          var currentPage = calculatePage(void 0, pageSize, total);
          var newPage = page;
          if (page > currentPage) {
            newPage = currentPage;
          } else if (page < 1) {
            newPage = 1;
          }
          if (newPage !== internalInputVal) {
            setInternalInputVal(newPage);
          }
          setCurrent(newPage);
          onChange === null || onChange === void 0 || onChange(newPage, pageSize);
          return newPage;
        }
        return current;
      }
      var hasPrev = current > 1;
      var hasNext = current < calculatePage(void 0, pageSize, total);
      function prevHandle() {
        if (hasPrev) handleChange(current - 1);
      }
      function nextHandle() {
        if (hasNext) handleChange(current + 1);
      }
      function jumpPrevHandle() {
        handleChange(jumpPrevPage);
      }
      function jumpNextHandle() {
        handleChange(jumpNextPage);
      }
      function runIfEnter(event, callback) {
        if (event.key === "Enter" || event.charCode === KeyCode_default.ENTER || event.keyCode === KeyCode_default.ENTER) {
          for (var _len = arguments.length, restParams = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
            restParams[_key - 2] = arguments[_key];
          }
          callback.apply(void 0, restParams);
        }
      }
      function runIfEnterPrev(event) {
        runIfEnter(event, prevHandle);
      }
      function runIfEnterNext(event) {
        runIfEnter(event, nextHandle);
      }
      function runIfEnterJumpPrev(event) {
        runIfEnter(event, jumpPrevHandle);
      }
      function runIfEnterJumpNext(event) {
        runIfEnter(event, jumpNextHandle);
      }
      function renderPrev(prevPage2) {
        var prevButton = itemRender(prevPage2, "prev", getItemIcon(prevIcon, "prev page"));
        return import_react37.default.isValidElement(prevButton) ? import_react37.default.cloneElement(prevButton, {
          disabled: !hasPrev
        }) : prevButton;
      }
      function renderNext(nextPage2) {
        var nextButton = itemRender(nextPage2, "next", getItemIcon(nextIcon, "next page"));
        return import_react37.default.isValidElement(nextButton) ? import_react37.default.cloneElement(nextButton, {
          disabled: !hasNext
        }) : nextButton;
      }
      function handleGoTO(event) {
        if (event.type === "click" || event.keyCode === KeyCode_default.ENTER) {
          handleChange(internalInputVal);
        }
      }
      var jumpPrev = null;
      var dataOrAriaAttributeProps = pickAttrs(props, {
        aria: true,
        data: true
      });
      var totalText = showTotal && import_react37.default.createElement("li", {
        className: "".concat(prefixCls, "-total-text")
      }, showTotal(total, [total === 0 ? 0 : (current - 1) * pageSize + 1, current * pageSize > total ? total : current * pageSize]));
      var jumpNext = null;
      var allPages = calculatePage(void 0, pageSize, total);
      if (hideOnSinglePage && total <= pageSize) {
        return null;
      }
      var pagerList = [];
      var pagerProps = {
        rootPrefixCls: prefixCls,
        onClick: handleChange,
        onKeyPress: runIfEnter,
        showTitle,
        itemRender,
        page: -1
      };
      var prevPage = current - 1 > 0 ? current - 1 : 0;
      var nextPage = current + 1 < allPages ? current + 1 : allPages;
      var goButton = showQuickJumper && showQuickJumper.goButton;
      var isReadOnly = _typeof(simple) === "object" ? simple.readOnly : !simple;
      var gotoButton = goButton;
      var simplePager = null;
      if (simple) {
        if (goButton) {
          if (typeof goButton === "boolean") {
            gotoButton = import_react37.default.createElement("button", {
              type: "button",
              onClick: handleGoTO,
              onKeyUp: handleGoTO
            }, locale2.jump_to_confirm);
          } else {
            gotoButton = import_react37.default.createElement("span", {
              onClick: handleGoTO,
              onKeyUp: handleGoTO
            }, goButton);
          }
          gotoButton = import_react37.default.createElement("li", {
            title: showTitle ? "".concat(locale2.jump_to).concat(current, "/").concat(allPages) : null,
            className: "".concat(prefixCls, "-simple-pager")
          }, gotoButton);
        }
        simplePager = import_react37.default.createElement("li", {
          title: showTitle ? "".concat(current, "/").concat(allPages) : null,
          className: "".concat(prefixCls, "-simple-pager")
        }, isReadOnly ? internalInputVal : import_react37.default.createElement("input", {
          type: "text",
          "aria-label": locale2.jump_to,
          value: internalInputVal,
          disabled,
          onKeyDown: handleKeyDown,
          onKeyUp: handleKeyUp,
          onChange: handleKeyUp,
          onBlur: handleBlur,
          size: 3
        }), import_react37.default.createElement("span", {
          className: "".concat(prefixCls, "-slash")
        }, "/"), allPages);
      }
      var pageBufferSize = showLessItems ? 1 : 2;
      if (allPages <= 3 + pageBufferSize * 2) {
        if (!allPages) {
          pagerList.push(import_react37.default.createElement(Pager_default, _extends({}, pagerProps, {
            key: "noPager",
            page: 1,
            className: "".concat(prefixCls, "-item-disabled")
          })));
        }
        for (var i = 1; i <= allPages; i += 1) {
          pagerList.push(import_react37.default.createElement(Pager_default, _extends({}, pagerProps, {
            key: i,
            page: i,
            active: current === i
          })));
        }
      } else {
        var prevItemTitle = showLessItems ? locale2.prev_3 : locale2.prev_5;
        var nextItemTitle = showLessItems ? locale2.next_3 : locale2.next_5;
        var jumpPrevContent = itemRender(jumpPrevPage, "jump-prev", getItemIcon(jumpPrevIcon, "prev page"));
        var jumpNextContent = itemRender(jumpNextPage, "jump-next", getItemIcon(jumpNextIcon, "next page"));
        if (showPrevNextJumpers) {
          jumpPrev = jumpPrevContent ? import_react37.default.createElement("li", {
            title: showTitle ? prevItemTitle : null,
            key: "prev",
            onClick: jumpPrevHandle,
            tabIndex: 0,
            onKeyDown: runIfEnterJumpPrev,
            className: (0, import_classnames49.default)("".concat(prefixCls, "-jump-prev"), _defineProperty({}, "".concat(prefixCls, "-jump-prev-custom-icon"), !!jumpPrevIcon))
          }, jumpPrevContent) : null;
          jumpNext = jumpNextContent ? import_react37.default.createElement("li", {
            title: showTitle ? nextItemTitle : null,
            key: "next",
            onClick: jumpNextHandle,
            tabIndex: 0,
            onKeyDown: runIfEnterJumpNext,
            className: (0, import_classnames49.default)("".concat(prefixCls, "-jump-next"), _defineProperty({}, "".concat(prefixCls, "-jump-next-custom-icon"), !!jumpNextIcon))
          }, jumpNextContent) : null;
        }
        var left = Math.max(1, current - pageBufferSize);
        var right = Math.min(current + pageBufferSize, allPages);
        if (current - 1 <= pageBufferSize) {
          right = 1 + pageBufferSize * 2;
        }
        if (allPages - current <= pageBufferSize) {
          left = allPages - pageBufferSize * 2;
        }
        for (var _i = left; _i <= right; _i += 1) {
          pagerList.push(import_react37.default.createElement(Pager_default, _extends({}, pagerProps, {
            key: _i,
            page: _i,
            active: current === _i
          })));
        }
        if (current - 1 >= pageBufferSize * 2 && current !== 1 + 2) {
          pagerList[0] = import_react37.default.cloneElement(pagerList[0], {
            className: (0, import_classnames49.default)("".concat(prefixCls, "-item-after-jump-prev"), pagerList[0].props.className)
          });
          pagerList.unshift(jumpPrev);
        }
        if (allPages - current >= pageBufferSize * 2 && current !== allPages - 2) {
          var lastOne = pagerList[pagerList.length - 1];
          pagerList[pagerList.length - 1] = import_react37.default.cloneElement(lastOne, {
            className: (0, import_classnames49.default)("".concat(prefixCls, "-item-before-jump-next"), lastOne.props.className)
          });
          pagerList.push(jumpNext);
        }
        if (left !== 1) {
          pagerList.unshift(import_react37.default.createElement(Pager_default, _extends({}, pagerProps, {
            key: 1,
            page: 1
          })));
        }
        if (right !== allPages) {
          pagerList.push(import_react37.default.createElement(Pager_default, _extends({}, pagerProps, {
            key: allPages,
            page: allPages
          })));
        }
      }
      var prev = renderPrev(prevPage);
      if (prev) {
        var prevDisabled = !hasPrev || !allPages;
        prev = import_react37.default.createElement("li", {
          title: showTitle ? locale2.prev_page : null,
          onClick: prevHandle,
          tabIndex: prevDisabled ? null : 0,
          onKeyDown: runIfEnterPrev,
          className: (0, import_classnames49.default)("".concat(prefixCls, "-prev"), _defineProperty({}, "".concat(prefixCls, "-disabled"), prevDisabled)),
          "aria-disabled": prevDisabled
        }, prev);
      }
      var next = renderNext(nextPage);
      if (next) {
        var nextDisabled, nextTabIndex;
        if (simple) {
          nextDisabled = !hasNext;
          nextTabIndex = hasPrev ? 0 : null;
        } else {
          nextDisabled = !hasNext || !allPages;
          nextTabIndex = nextDisabled ? null : 0;
        }
        next = import_react37.default.createElement("li", {
          title: showTitle ? locale2.next_page : null,
          onClick: nextHandle,
          tabIndex: nextTabIndex,
          onKeyDown: runIfEnterNext,
          className: (0, import_classnames49.default)("".concat(prefixCls, "-next"), _defineProperty({}, "".concat(prefixCls, "-disabled"), nextDisabled)),
          "aria-disabled": nextDisabled
        }, next);
      }
      var cls = (0, import_classnames49.default)(prefixCls, className, _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty({}, "".concat(prefixCls, "-start"), align === "start"), "".concat(prefixCls, "-center"), align === "center"), "".concat(prefixCls, "-end"), align === "end"), "".concat(prefixCls, "-simple"), simple), "".concat(prefixCls, "-disabled"), disabled));
      return import_react37.default.createElement("ul", _extends({
        className: cls,
        style: style2,
        ref: paginationRef
      }, dataOrAriaAttributeProps), totalText, prev, simple ? simplePager : pagerList, next, import_react37.default.createElement(Options_default, {
        locale: locale2,
        rootPrefixCls: prefixCls,
        disabled,
        selectPrefixCls,
        changeSize: changePageSize,
        pageSize,
        pageSizeOptions,
        quickGo: shouldDisplayQuickJumper ? handleChange : null,
        goButton: gotoButton,
        showSizeChanger,
        sizeChangerRender
      }));
    };
    if (true) {
      Pagination.displayName = "Pagination";
    }
    Pagination_default = Pagination;
  }
});

// node_modules/rc-pagination/es/index.js
var es_exports12 = {};
__export(es_exports12, {
  default: () => Pagination_default
});
var init_es19 = __esm({
  "node_modules/rc-pagination/es/index.js"() {
    init_Pagination();
  }
});

// node_modules/@rc-component/color-picker/es/color.js
var _excluded46, _excluded211, getRoundNumber, convertHsb2Hsv, Color;
var init_color = __esm({
  "node_modules/@rc-component/color-picker/es/color.js"() {
    init_classCallCheck();
    init_createClass();
    init_inherits();
    init_createSuper();
    init_objectSpread2();
    init_objectWithoutProperties();
    init_typeof();
    init_es();
    _excluded46 = ["b"];
    _excluded211 = ["v"];
    getRoundNumber = function getRoundNumber2(value) {
      return Math.round(Number(value || 0));
    };
    convertHsb2Hsv = function convertHsb2Hsv2(color) {
      if (color instanceof FastColor) {
        return color;
      }
      if (color && _typeof(color) === "object" && "h" in color && "b" in color) {
        var _ref = color, b = _ref.b, resets = _objectWithoutProperties(_ref, _excluded46);
        return _objectSpread2(_objectSpread2({}, resets), {}, {
          v: b
        });
      }
      if (typeof color === "string" && /hsb/.test(color)) {
        return color.replace(/hsb/, "hsv");
      }
      return color;
    };
    Color = (function(_FastColor) {
      _inherits(Color2, _FastColor);
      var _super = _createSuper(Color2);
      function Color2(color) {
        _classCallCheck(this, Color2);
        return _super.call(this, convertHsb2Hsv(color));
      }
      _createClass(Color2, [{
        key: "toHsbString",
        value: function toHsbString() {
          var hsb = this.toHsb();
          var saturation = getRoundNumber(hsb.s * 100);
          var lightness = getRoundNumber(hsb.b * 100);
          var hue = getRoundNumber(hsb.h);
          var alpha = hsb.a;
          var hsbString = "hsb(".concat(hue, ", ").concat(saturation, "%, ").concat(lightness, "%)");
          var hsbaString = "hsba(".concat(hue, ", ").concat(saturation, "%, ").concat(lightness, "%, ").concat(alpha.toFixed(alpha === 0 ? 0 : 2), ")");
          return alpha === 1 ? hsbString : hsbaString;
        }
      }, {
        key: "toHsb",
        value: function toHsb() {
          var _this$toHsv = this.toHsv(), v = _this$toHsv.v, resets = _objectWithoutProperties(_this$toHsv, _excluded211);
          return _objectSpread2(_objectSpread2({}, resets), {}, {
            b: v,
            a: this.a
          });
        }
      }]);
      return Color2;
    })(FastColor);
  }
});

// node_modules/@rc-component/color-picker/es/components/ColorBlock.js
var import_classnames50, import_react38, ColorBlock, ColorBlock_default;
var init_ColorBlock = __esm({
  "node_modules/@rc-component/color-picker/es/components/ColorBlock.js"() {
    import_classnames50 = __toESM(require_classnames());
    import_react38 = __toESM(require_react());
    ColorBlock = function ColorBlock2(_ref) {
      var color = _ref.color, prefixCls = _ref.prefixCls, className = _ref.className, style2 = _ref.style, onClick = _ref.onClick;
      var colorBlockCls = "".concat(prefixCls, "-color-block");
      return import_react38.default.createElement("div", {
        className: (0, import_classnames50.default)(colorBlockCls, className),
        style: style2,
        onClick
      }, import_react38.default.createElement("div", {
        className: "".concat(colorBlockCls, "-inner"),
        style: {
          background: color
        }
      }));
    };
    ColorBlock_default = ColorBlock;
  }
});

// node_modules/@rc-component/color-picker/es/util.js
var ColorPickerPrefixCls, generateColor, defaultColor, calculateColor, calcOffset;
var init_util4 = __esm({
  "node_modules/@rc-component/color-picker/es/util.js"() {
    init_objectSpread2();
    init_color();
    ColorPickerPrefixCls = "rc-color-picker";
    generateColor = function generateColor2(color) {
      if (color instanceof Color) {
        return color;
      }
      return new Color(color);
    };
    defaultColor = generateColor("#1677ff");
    calculateColor = function calculateColor2(props) {
      var offset = props.offset, targetRef = props.targetRef, containerRef = props.containerRef, color = props.color, type = props.type;
      var _containerRef$current = containerRef.current.getBoundingClientRect(), width = _containerRef$current.width, height = _containerRef$current.height;
      var _targetRef$current$ge = targetRef.current.getBoundingClientRect(), targetWidth = _targetRef$current$ge.width, targetHeight = _targetRef$current$ge.height;
      var centerOffsetX = targetWidth / 2;
      var centerOffsetY = targetHeight / 2;
      var saturation = (offset.x + centerOffsetX) / width;
      var bright = 1 - (offset.y + centerOffsetY) / height;
      var hsb = color.toHsb();
      var alphaOffset = saturation;
      var hueOffset = (offset.x + centerOffsetX) / width * 360;
      if (type) {
        switch (type) {
          case "hue":
            return generateColor(_objectSpread2(_objectSpread2({}, hsb), {}, {
              h: hueOffset <= 0 ? 0 : hueOffset
            }));
          case "alpha":
            return generateColor(_objectSpread2(_objectSpread2({}, hsb), {}, {
              a: alphaOffset <= 0 ? 0 : alphaOffset
            }));
        }
      }
      return generateColor({
        h: hsb.h,
        s: saturation <= 0 ? 0 : saturation,
        b: bright >= 1 ? 1 : bright,
        a: hsb.a
      });
    };
    calcOffset = function calcOffset2(color, type) {
      var hsb = color.toHsb();
      switch (type) {
        case "hue":
          return {
            x: hsb.h / 360 * 100,
            y: 50
          };
        case "alpha":
          return {
            x: color.a * 100,
            y: 50
          };
        // Picker panel
        default:
          return {
            x: hsb.s * 100,
            y: (1 - hsb.b) * 100
          };
      }
    };
  }
});

// node_modules/@rc-component/color-picker/es/hooks/useColorDrag.js
function getPosition2(e) {
  var obj = "touches" in e ? e.touches[0] : e;
  var scrollXOffset = document.documentElement.scrollLeft || document.body.scrollLeft || window.pageXOffset;
  var scrollYOffset = document.documentElement.scrollTop || document.body.scrollTop || window.pageYOffset;
  return {
    pageX: obj.pageX - scrollXOffset,
    pageY: obj.pageY - scrollYOffset
  };
}
function useColorDrag(props) {
  var targetRef = props.targetRef, containerRef = props.containerRef, direction = props.direction, onDragChange = props.onDragChange, onDragChangeComplete = props.onDragChangeComplete, calculate = props.calculate, color = props.color, disabledDrag = props.disabledDrag;
  var _useState = (0, import_react39.useState)({
    x: 0,
    y: 0
  }), _useState2 = _slicedToArray(_useState, 2), offsetValue = _useState2[0], setOffsetValue = _useState2[1];
  var mouseMoveRef = (0, import_react39.useRef)(null);
  var mouseUpRef = (0, import_react39.useRef)(null);
  (0, import_react39.useEffect)(function() {
    setOffsetValue(calculate());
  }, [color]);
  (0, import_react39.useEffect)(function() {
    return function() {
      document.removeEventListener("mousemove", mouseMoveRef.current);
      document.removeEventListener("mouseup", mouseUpRef.current);
      document.removeEventListener("touchmove", mouseMoveRef.current);
      document.removeEventListener("touchend", mouseUpRef.current);
      mouseMoveRef.current = null;
      mouseUpRef.current = null;
    };
  }, []);
  var updateOffset = function updateOffset2(e) {
    var _getPosition = getPosition2(e), pageX = _getPosition.pageX, pageY = _getPosition.pageY;
    var _containerRef$current = containerRef.current.getBoundingClientRect(), rectX = _containerRef$current.x, rectY = _containerRef$current.y, width = _containerRef$current.width, height = _containerRef$current.height;
    var _targetRef$current$ge = targetRef.current.getBoundingClientRect(), targetWidth = _targetRef$current$ge.width, targetHeight = _targetRef$current$ge.height;
    var centerOffsetX = targetWidth / 2;
    var centerOffsetY = targetHeight / 2;
    var offsetX = Math.max(0, Math.min(pageX - rectX, width)) - centerOffsetX;
    var offsetY = Math.max(0, Math.min(pageY - rectY, height)) - centerOffsetY;
    var calcOffset3 = {
      x: offsetX,
      y: direction === "x" ? offsetValue.y : offsetY
    };
    if (targetWidth === 0 && targetHeight === 0 || targetWidth !== targetHeight) {
      return false;
    }
    onDragChange === null || onDragChange === void 0 || onDragChange(calcOffset3);
  };
  var onDragMove = function onDragMove2(e) {
    e.preventDefault();
    updateOffset(e);
  };
  var onDragStop = function onDragStop2(e) {
    e.preventDefault();
    document.removeEventListener("mousemove", mouseMoveRef.current);
    document.removeEventListener("mouseup", mouseUpRef.current);
    document.removeEventListener("touchmove", mouseMoveRef.current);
    document.removeEventListener("touchend", mouseUpRef.current);
    mouseMoveRef.current = null;
    mouseUpRef.current = null;
    onDragChangeComplete === null || onDragChangeComplete === void 0 || onDragChangeComplete();
  };
  var onDragStart = function onDragStart2(e) {
    document.removeEventListener("mousemove", mouseMoveRef.current);
    document.removeEventListener("mouseup", mouseUpRef.current);
    if (disabledDrag) {
      return;
    }
    updateOffset(e);
    document.addEventListener("mousemove", onDragMove);
    document.addEventListener("mouseup", onDragStop);
    document.addEventListener("touchmove", onDragMove);
    document.addEventListener("touchend", onDragStop);
    mouseMoveRef.current = onDragMove;
    mouseUpRef.current = onDragStop;
  };
  return [offsetValue, onDragStart];
}
var import_react39, useColorDrag_default;
var init_useColorDrag = __esm({
  "node_modules/@rc-component/color-picker/es/hooks/useColorDrag.js"() {
    init_slicedToArray();
    import_react39 = __toESM(require_react());
    useColorDrag_default = useColorDrag;
  }
});

// node_modules/@rc-component/color-picker/es/components/Handler.js
var import_classnames51, import_react40, Handler, Handler_default;
var init_Handler = __esm({
  "node_modules/@rc-component/color-picker/es/components/Handler.js"() {
    init_defineProperty();
    import_classnames51 = __toESM(require_classnames());
    import_react40 = __toESM(require_react());
    Handler = function Handler2(_ref) {
      var _ref$size = _ref.size, size = _ref$size === void 0 ? "default" : _ref$size, color = _ref.color, prefixCls = _ref.prefixCls;
      return import_react40.default.createElement("div", {
        className: (0, import_classnames51.default)("".concat(prefixCls, "-handler"), _defineProperty({}, "".concat(prefixCls, "-handler-sm"), size === "small")),
        style: {
          backgroundColor: color
        }
      });
    };
    Handler_default = Handler;
  }
});

// node_modules/@rc-component/color-picker/es/components/Palette.js
var import_react41, Palette, Palette_default;
var init_Palette = __esm({
  "node_modules/@rc-component/color-picker/es/components/Palette.js"() {
    init_objectSpread2();
    import_react41 = __toESM(require_react());
    Palette = function Palette2(_ref) {
      var children = _ref.children, style2 = _ref.style, prefixCls = _ref.prefixCls;
      return import_react41.default.createElement("div", {
        className: "".concat(prefixCls, "-palette"),
        style: _objectSpread2({
          position: "relative"
        }, style2)
      }, children);
    };
    Palette_default = Palette;
  }
});

// node_modules/@rc-component/color-picker/es/components/Transform.js
var import_react42, Transform, Transform_default;
var init_Transform = __esm({
  "node_modules/@rc-component/color-picker/es/components/Transform.js"() {
    import_react42 = __toESM(require_react());
    Transform = (0, import_react42.forwardRef)(function(props, ref) {
      var children = props.children, x = props.x, y = props.y;
      return import_react42.default.createElement("div", {
        ref,
        style: {
          position: "absolute",
          left: "".concat(x, "%"),
          top: "".concat(y, "%"),
          zIndex: 1,
          transform: "translate(-50%, -50%)"
        }
      }, children);
    });
    Transform_default = Transform;
  }
});

// node_modules/@rc-component/color-picker/es/components/Picker.js
var import_react43, Picker, Picker_default;
var init_Picker = __esm({
  "node_modules/@rc-component/color-picker/es/components/Picker.js"() {
    init_slicedToArray();
    import_react43 = __toESM(require_react());
    init_useColorDrag();
    init_util4();
    init_es2();
    init_Handler();
    init_Palette();
    init_Transform();
    Picker = function Picker2(_ref) {
      var color = _ref.color, onChange = _ref.onChange, prefixCls = _ref.prefixCls, onChangeComplete = _ref.onChangeComplete, disabled = _ref.disabled;
      var pickerRef = (0, import_react43.useRef)();
      var transformRef = (0, import_react43.useRef)();
      var colorRef = (0, import_react43.useRef)(color);
      var onDragChange = useEvent(function(offsetValue) {
        var calcColor = calculateColor({
          offset: offsetValue,
          targetRef: transformRef,
          containerRef: pickerRef,
          color
        });
        colorRef.current = calcColor;
        onChange(calcColor);
      });
      var _useColorDrag = useColorDrag_default({
        color,
        containerRef: pickerRef,
        targetRef: transformRef,
        calculate: function calculate() {
          return calcOffset(color);
        },
        onDragChange,
        onDragChangeComplete: function onDragChangeComplete() {
          return onChangeComplete === null || onChangeComplete === void 0 ? void 0 : onChangeComplete(colorRef.current);
        },
        disabledDrag: disabled
      }), _useColorDrag2 = _slicedToArray(_useColorDrag, 2), offset = _useColorDrag2[0], dragStartHandle = _useColorDrag2[1];
      return import_react43.default.createElement("div", {
        ref: pickerRef,
        className: "".concat(prefixCls, "-select"),
        onMouseDown: dragStartHandle,
        onTouchStart: dragStartHandle
      }, import_react43.default.createElement(Palette_default, {
        prefixCls
      }, import_react43.default.createElement(Transform_default, {
        x: offset.x,
        y: offset.y,
        ref: transformRef
      }, import_react43.default.createElement(Handler_default, {
        color: color.toRgbString(),
        prefixCls
      })), import_react43.default.createElement("div", {
        className: "".concat(prefixCls, "-saturation"),
        style: {
          backgroundColor: "hsl(".concat(color.toHsb().h, ",100%, 50%)"),
          backgroundImage: "linear-gradient(0deg, #000, transparent),linear-gradient(90deg, #fff, hsla(0, 0%, 100%, 0))"
        }
      })));
    };
    Picker_default = Picker;
  }
});

// node_modules/@rc-component/color-picker/es/hooks/useColorState.js
var import_react44, useColorState, useColorState_default;
var init_useColorState = __esm({
  "node_modules/@rc-component/color-picker/es/hooks/useColorState.js"() {
    init_slicedToArray();
    init_es2();
    import_react44 = __toESM(require_react());
    init_util4();
    useColorState = function useColorState2(defaultValue, value) {
      var _useMergedState = useMergedState(defaultValue, {
        value
      }), _useMergedState2 = _slicedToArray(_useMergedState, 2), mergedValue = _useMergedState2[0], setValue = _useMergedState2[1];
      var color = (0, import_react44.useMemo)(function() {
        return generateColor(mergedValue);
      }, [mergedValue]);
      return [color, setValue];
    };
    useColorState_default = useColorState;
  }
});

// node_modules/@rc-component/color-picker/es/components/Gradient.js
var import_react45, Gradient, Gradient_default;
var init_Gradient = __esm({
  "node_modules/@rc-component/color-picker/es/components/Gradient.js"() {
    import_react45 = __toESM(require_react());
    init_color();
    init_util4();
    Gradient = function Gradient2(_ref) {
      var colors = _ref.colors, children = _ref.children, _ref$direction = _ref.direction, direction = _ref$direction === void 0 ? "to right" : _ref$direction, type = _ref.type, prefixCls = _ref.prefixCls;
      var gradientColors = (0, import_react45.useMemo)(function() {
        return colors.map(function(color, idx) {
          var result = generateColor(color);
          if (type === "alpha" && idx === colors.length - 1) {
            result = new Color(result.setA(1));
          }
          return result.toRgbString();
        }).join(",");
      }, [colors, type]);
      return import_react45.default.createElement("div", {
        className: "".concat(prefixCls, "-gradient"),
        style: {
          position: "absolute",
          inset: 0,
          background: "linear-gradient(".concat(direction, ", ").concat(gradientColors, ")")
        }
      }, children);
    };
    Gradient_default = Gradient;
  }
});

// node_modules/@rc-component/color-picker/es/components/Slider.js
var import_react46, import_classnames52, Slider, Slider_default;
var init_Slider = __esm({
  "node_modules/@rc-component/color-picker/es/components/Slider.js"() {
    init_slicedToArray();
    import_react46 = __toESM(require_react());
    init_useColorDrag();
    init_Palette();
    import_classnames52 = __toESM(require_classnames());
    init_es2();
    init_color();
    init_util4();
    init_Gradient();
    init_Handler();
    init_Transform();
    Slider = function Slider2(props) {
      var prefixCls = props.prefixCls, colors = props.colors, disabled = props.disabled, onChange = props.onChange, onChangeComplete = props.onChangeComplete, color = props.color, type = props.type;
      var sliderRef = (0, import_react46.useRef)();
      var transformRef = (0, import_react46.useRef)();
      var colorRef = (0, import_react46.useRef)(color);
      var getValue = function getValue2(c) {
        return type === "hue" ? c.getHue() : c.a * 100;
      };
      var onDragChange = useEvent(function(offsetValue) {
        var calcColor = calculateColor({
          offset: offsetValue,
          targetRef: transformRef,
          containerRef: sliderRef,
          color,
          type
        });
        colorRef.current = calcColor;
        onChange(getValue(calcColor));
      });
      var _useColorDrag = useColorDrag_default({
        color,
        targetRef: transformRef,
        containerRef: sliderRef,
        calculate: function calculate() {
          return calcOffset(color, type);
        },
        onDragChange,
        onDragChangeComplete: function onDragChangeComplete() {
          onChangeComplete(getValue(colorRef.current));
        },
        direction: "x",
        disabledDrag: disabled
      }), _useColorDrag2 = _slicedToArray(_useColorDrag, 2), offset = _useColorDrag2[0], dragStartHandle = _useColorDrag2[1];
      var handleColor = import_react46.default.useMemo(function() {
        if (type === "hue") {
          var hsb = color.toHsb();
          hsb.s = 1;
          hsb.b = 1;
          hsb.a = 1;
          var lightColor = new Color(hsb);
          return lightColor;
        }
        return color;
      }, [color, type]);
      var gradientList = import_react46.default.useMemo(function() {
        return colors.map(function(info) {
          return "".concat(info.color, " ").concat(info.percent, "%");
        });
      }, [colors]);
      return import_react46.default.createElement("div", {
        ref: sliderRef,
        className: (0, import_classnames52.default)("".concat(prefixCls, "-slider"), "".concat(prefixCls, "-slider-").concat(type)),
        onMouseDown: dragStartHandle,
        onTouchStart: dragStartHandle
      }, import_react46.default.createElement(Palette_default, {
        prefixCls
      }, import_react46.default.createElement(Transform_default, {
        x: offset.x,
        y: offset.y,
        ref: transformRef
      }, import_react46.default.createElement(Handler_default, {
        size: "small",
        color: handleColor.toHexString(),
        prefixCls
      })), import_react46.default.createElement(Gradient_default, {
        colors: gradientList,
        type,
        prefixCls
      })));
    };
    Slider_default = Slider;
  }
});

// node_modules/@rc-component/color-picker/es/hooks/useComponent.js
function useComponent(components) {
  return React155.useMemo(function() {
    var _ref = components || {}, slider = _ref.slider;
    return [slider || Slider_default];
  }, [components]);
}
var React155;
var init_useComponent = __esm({
  "node_modules/@rc-component/color-picker/es/hooks/useComponent.js"() {
    React155 = __toESM(require_react());
    init_Slider();
  }
});

// node_modules/@rc-component/color-picker/es/ColorPicker.js
var import_react47, import_classnames53, HUE_COLORS, ColorPicker, ColorPicker_default;
var init_ColorPicker = __esm({
  "node_modules/@rc-component/color-picker/es/ColorPicker.js"() {
    init_extends();
    init_defineProperty();
    init_slicedToArray();
    import_react47 = __toESM(require_react());
    init_util4();
    import_classnames53 = __toESM(require_classnames());
    init_color();
    init_ColorBlock();
    init_Picker();
    init_useColorState();
    init_useComponent();
    HUE_COLORS = [{
      color: "rgb(255, 0, 0)",
      percent: 0
    }, {
      color: "rgb(255, 255, 0)",
      percent: 17
    }, {
      color: "rgb(0, 255, 0)",
      percent: 33
    }, {
      color: "rgb(0, 255, 255)",
      percent: 50
    }, {
      color: "rgb(0, 0, 255)",
      percent: 67
    }, {
      color: "rgb(255, 0, 255)",
      percent: 83
    }, {
      color: "rgb(255, 0, 0)",
      percent: 100
    }];
    ColorPicker = (0, import_react47.forwardRef)(function(props, ref) {
      var value = props.value, defaultValue = props.defaultValue, _props$prefixCls = props.prefixCls, prefixCls = _props$prefixCls === void 0 ? ColorPickerPrefixCls : _props$prefixCls, onChange = props.onChange, onChangeComplete = props.onChangeComplete, className = props.className, style2 = props.style, panelRender = props.panelRender, _props$disabledAlpha = props.disabledAlpha, disabledAlpha = _props$disabledAlpha === void 0 ? false : _props$disabledAlpha, _props$disabled = props.disabled, disabled = _props$disabled === void 0 ? false : _props$disabled, components = props.components;
      var _useComponent = useComponent(components), _useComponent2 = _slicedToArray(_useComponent, 1), Slider3 = _useComponent2[0];
      var _useColorState = useColorState_default(defaultValue || defaultColor, value), _useColorState2 = _slicedToArray(_useColorState, 2), colorValue = _useColorState2[0], setColorValue = _useColorState2[1];
      var alphaColor = (0, import_react47.useMemo)(function() {
        return colorValue.setA(1).toRgbString();
      }, [colorValue]);
      var handleChange = function handleChange2(data, type) {
        if (!value) {
          setColorValue(data);
        }
        onChange === null || onChange === void 0 || onChange(data, type);
      };
      var getHueColor = function getHueColor2(hue) {
        return new Color(colorValue.setHue(hue));
      };
      var getAlphaColor = function getAlphaColor2(alpha) {
        return new Color(colorValue.setA(alpha / 100));
      };
      var onHueChange = function onHueChange2(hue) {
        handleChange(getHueColor(hue), {
          type: "hue",
          value: hue
        });
      };
      var onAlphaChange = function onAlphaChange2(alpha) {
        handleChange(getAlphaColor(alpha), {
          type: "alpha",
          value: alpha
        });
      };
      var onHueChangeComplete = function onHueChangeComplete2(hue) {
        if (onChangeComplete) {
          onChangeComplete(getHueColor(hue));
        }
      };
      var onAlphaChangeComplete = function onAlphaChangeComplete2(alpha) {
        if (onChangeComplete) {
          onChangeComplete(getAlphaColor(alpha));
        }
      };
      var mergeCls = (0, import_classnames53.default)("".concat(prefixCls, "-panel"), className, _defineProperty({}, "".concat(prefixCls, "-panel-disabled"), disabled));
      var sharedSliderProps = {
        prefixCls,
        disabled,
        color: colorValue
      };
      var defaultPanel = import_react47.default.createElement(import_react47.default.Fragment, null, import_react47.default.createElement(Picker_default, _extends({
        onChange: handleChange
      }, sharedSliderProps, {
        onChangeComplete
      })), import_react47.default.createElement("div", {
        className: "".concat(prefixCls, "-slider-container")
      }, import_react47.default.createElement("div", {
        className: (0, import_classnames53.default)("".concat(prefixCls, "-slider-group"), _defineProperty({}, "".concat(prefixCls, "-slider-group-disabled-alpha"), disabledAlpha))
      }, import_react47.default.createElement(Slider3, _extends({}, sharedSliderProps, {
        type: "hue",
        colors: HUE_COLORS,
        min: 0,
        max: 359,
        value: colorValue.getHue(),
        onChange: onHueChange,
        onChangeComplete: onHueChangeComplete
      })), !disabledAlpha && import_react47.default.createElement(Slider3, _extends({}, sharedSliderProps, {
        type: "alpha",
        colors: [{
          percent: 0,
          color: "rgba(255, 0, 4, 0)"
        }, {
          percent: 100,
          color: alphaColor
        }],
        min: 0,
        max: 100,
        value: colorValue.a * 100,
        onChange: onAlphaChange,
        onChangeComplete: onAlphaChangeComplete
      }))), import_react47.default.createElement(ColorBlock_default, {
        color: colorValue.toRgbString(),
        prefixCls
      })));
      return import_react47.default.createElement("div", {
        className: mergeCls,
        style: style2,
        ref
      }, typeof panelRender === "function" ? panelRender(defaultPanel) : defaultPanel);
    });
    if (true) {
      ColorPicker.displayName = "ColorPicker";
    }
    ColorPicker_default = ColorPicker;
  }
});

// node_modules/@rc-component/color-picker/es/interface.js
var init_interface2 = __esm({
  "node_modules/@rc-component/color-picker/es/interface.js"() {
  }
});

// node_modules/@rc-component/color-picker/es/index.js
var es_exports13 = {};
__export(es_exports13, {
  Color: () => Color,
  ColorBlock: () => ColorBlock_default,
  default: () => es_default16
});
var es_default16;
var init_es20 = __esm({
  "node_modules/@rc-component/color-picker/es/index.js"() {
    init_ColorPicker();
    init_color();
    init_ColorBlock();
    init_interface2();
    es_default16 = ColorPicker_default;
  }
});

export {
  getDOM,
  findDOMNode,
  init_findDOMNode,
  ResizeObserver_es_default,
  init_ResizeObserver_es,
  es_default,
  es_exports,
  init_es3 as init_es,
  raf_default,
  init_raf,
  MotionProvider,
  CSSMotionList_default,
  es_default2,
  es_exports2,
  init_es4 as init_es2,
  pickAttrs,
  init_pickAttrs,
  KeyCode_default,
  init_KeyCode,
  omit,
  init_omit,
  isVisible_default,
  init_isVisible,
  Color,
  ColorBlock_default,
  es_default16 as es_default3,
  es_exports13 as es_exports3,
  init_es20 as init_es3,
  es_default12 as es_default4,
  es_exports8 as es_exports4,
  init_es15 as init_es4,
  es_default4 as es_default5,
  init_es6 as init_es5,
  useId_default,
  init_useId,
  isStyleSupport,
  init_styleChecker,
  isMobile_default,
  init_isMobile,
  useBaseProps,
  es_default3 as es_default6,
  init_es5 as init_es6,
  es_default5 as es_default7,
  init_es7,
  BaseSelect_default,
  OptGroup_default,
  Option_default,
  useId2 as useId,
  init_useId2,
  es_default7 as es_default8,
  es_exports3 as es_exports5,
  init_es9 as init_es8,
  Popup2 as Popup,
  es_default8 as es_default9,
  es_exports4 as es_exports6,
  init_es10 as init_es9,
  es_default13 as es_default10,
  es_exports9 as es_exports7,
  init_es16 as init_es10,
  useFullPath,
  MenuItem_default,
  SubMenu_default,
  Divider,
  MenuItemGroup_default,
  es_default9 as es_default11,
  es_exports5 as es_exports8,
  init_es11,
  es_default14 as es_default12,
  es_exports10 as es_exports9,
  init_es17 as init_es12,
  debounce,
  init_esm,
  fillFieldNames2 as fillFieldNames,
  convertTreeToData,
  convertDataToEntities,
  init_treeUtil,
  conductCheck,
  init_conductUtil,
  resolveOnChange,
  triggerFocus,
  init_commonUtils,
  BaseInput_default,
  useCount,
  init_useCount,
  es_default15 as es_default13,
  es_exports11 as es_exports10,
  init_es18 as init_es13,
  addEventListenerWrap,
  init_addEventListener,
  Pagination_default,
  es_exports12 as es_exports11,
  init_es19 as init_es14,
  EXPAND_COLUMN,
  INTERNAL_HOOKS,
  FooterComponents,
  INTERNAL_COL_DEFINE,
  convertChildrenToColumns,
  init_useColumns,
  genTable,
  genVirtualTable,
  es_exports6 as es_exports12,
  init_es13 as init_es15,
  UnstableContext,
  TreeNode_default,
  arrDel,
  arrAdd,
  conductExpandParent,
  init_util3 as init_util,
  es_default11 as es_default14,
  es_exports7 as es_exports13,
  init_es14 as init_es16
};
//# sourceMappingURL=chunk-EXTFX6M6.js.map
