import {
  require_react
} from "./chunk-FDMQADGV.js";
import {
  __toESM
} from "./chunk-V4OQ3NZ2.js";

// node_modules/react-simple-wysiwyg/lib/index.es.mjs
var import_react = __toESM(require_react(), 1);
var __assign = function() {
  __assign = Object.assign || function __assign2(t2) {
    for (var s, i = 1, n2 = arguments.length; i < n2; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t2[p] = s[p];
    }
    return t2;
  };
  return __assign.apply(this, arguments);
};
function __rest(s, e2) {
  var t2 = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e2.indexOf(p) < 0)
    t2[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e2.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t2[p[i]] = s[p[i]];
    }
  return t2;
}
function autoconfigureTextDirection(el) {
  if (el) {
    var text = el.textContent;
    var rtlPattern = /[\u0591-\u07FF\uFB1D-\uFDFD\uFE70-\uFEFC]/;
    el.style.direction = text && rtlPattern.test(text[0]) ? "rtl" : "ltr";
  }
}
function cls() {
  var classNames = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    classNames[_i] = arguments[_i];
  }
  return classNames.filter(Boolean).join(" ");
}
function getSelectedNode() {
  if (document.selection) {
    return document.selection.createRange().parentElement();
  }
  var selection = window.getSelection();
  if (selection && selection.rangeCount > 0) {
    return selection.getRangeAt(0).startContainer.parentNode || void 0;
  }
  return void 0;
}
function normalizeHtml(str) {
  return str ? str.replace(/&nbsp;|\u202F|\u00A0/g, " ").replace(/<br \/>/g, "<br>") : "";
}
function replaceCaret(el) {
  var target = document.createTextNode("");
  el.appendChild(target);
  var isTargetFocused = document.activeElement === el;
  if (target !== null && target.nodeValue !== null && isTargetFocused) {
    var sel = window.getSelection();
    if (sel !== null) {
      var range = document.createRange();
      range.setStart(target, target.nodeValue.length);
      range.collapse(true);
      sel.removeAllRanges();
      sel.addRange(range);
    }
    if (el instanceof HTMLElement)
      el.focus();
  }
}
function setForwardRef(el, ref) {
  if (typeof ref === "function") {
    ref(el);
  } else if (typeof ref === "object" && ref) {
    ref.current = el;
  }
}
var ContentEditable = import_react.default.memo(import_react.default.forwardRef(function ContentEditable2(_a, ref) {
  var className = _a.className, disabled = _a.disabled, tagName = _a.tagName, _b = _a.value, value = _b === void 0 ? "" : _b, placeholder = _a.placeholder, rest = __rest(_a, ["className", "disabled", "tagName", "value", "placeholder"]);
  var elRef = import_react.default.useRef(null);
  var htmlRef = import_react.default.useRef(value);
  var restRef = import_react.default.useRef(rest);
  import_react.default.useEffect(function() {
    restRef.current = rest;
    var el = elRef.current;
    if (el && normalizeHtml(htmlRef.current) !== normalizeHtml(value)) {
      htmlRef.current = value;
      el.innerHTML = value;
      replaceCaret(el);
    }
  });
  return import_react.default.useMemo(function() {
    function onSetRef($el) {
      elRef.current = $el;
      autoconfigureTextDirection($el);
      setForwardRef($el, ref);
    }
    function onChange(event) {
      var _a2, _b2;
      var el = elRef.current;
      if (!el) {
        return;
      }
      var elementHtml = el.innerHTML;
      if (elementHtml !== htmlRef.current) {
        (_b2 = (_a2 = restRef.current).onChange) === null || _b2 === void 0 ? void 0 : _b2.call(_a2, __assign(__assign({}, event), { target: {
          value: elementHtml,
          name: rest.name
        } }));
      }
      autoconfigureTextDirection(el);
      htmlRef.current = elementHtml;
    }
    var cssClass = cls("rsw-ce", className);
    return import_react.default.createElement(tagName || "div", __assign(__assign({}, rest), { className: cssClass, contentEditable: !disabled, dangerouslySetInnerHTML: { __html: value }, onBlur: function(e2) {
      return (restRef.current.onBlur || onChange)(e2);
    }, onInput: onChange, onKeyDown: function(e2) {
      return (restRef.current.onKeyDown || onChange)(e2);
    }, onKeyUp: function(e2) {
      return (restRef.current.onKeyUp || onChange)(e2);
    }, placeholder, ref: onSetRef }));
  }, [className, disabled, placeholder, tagName]);
}));
var EditorContext = import_react.default.createContext(void 0);
function EditorProvider(_a) {
  var children = _a.children;
  var _b = import_react.default.useState({
    htmlMode: false,
    update
  }), state = _b[0], setState = _b[1];
  function update(attrs) {
    setState(function(prevState) {
      return __assign(__assign({}, prevState), attrs);
    });
  }
  return import_react.default.createElement(EditorContext.Provider, { value: state }, children);
}
function useEditorState() {
  var context = import_react.default.useContext(EditorContext);
  if (!context) {
    throw new Error("You should wrap your component by EditorProvider");
  }
  return context;
}
var e = [];
var t = [];
function n(n2, r) {
  if (n2 && "undefined" != typeof document) {
    var a, s = true === r.prepend ? "prepend" : "append", d = true === r.singleTag, i = "string" == typeof r.container ? document.querySelector(r.container) : document.getElementsByTagName("head")[0];
    if (d) {
      var u = e.indexOf(i);
      -1 === u && (u = e.push(i) - 1, t[u] = {}), a = t[u] && t[u][s] ? t[u][s] : t[u][s] = c();
    } else a = c();
    65279 === n2.charCodeAt(0) && (n2 = n2.substring(1)), a.styleSheet ? a.styleSheet.cssText += n2 : a.appendChild(document.createTextNode(n2));
  }
  function c() {
    var e2 = document.createElement("style");
    if (e2.setAttribute("type", "text/css"), r.attributes) for (var t2 = Object.keys(r.attributes), n3 = 0; n3 < t2.length; n3++) e2.setAttribute(t2[n3], r.attributes[t2[n3]]);
    var a2 = "prepend" === s ? "afterbegin" : "beforeend";
    return i.insertAdjacentElement(a2, e2), e2;
  }
}
var css = ".rsw-editor{border:1px solid #ddd;border-radius:.375rem;display:flex;flex-direction:column;min-height:100px;overflow:hidden}.rsw-ce{flex:1 1 auto;overflow:auto;padding:.5rem}.rsw-ce:focus{outline:1px solid #668}.rsw-ce[contentEditable=true]:empty:not(:focus):before{color:grey;content:attr(placeholder);pointer-events:none}.rsw-html{background:transparent;border:none;font-family:monospace,Courier New}.rsw-separator{align-self:stretch;border-right:1px solid #ddd;display:flex;margin:0 3px}.rsw-dd{box-sizing:border-box;outline:none}.rsw-btn{background:transparent;border:0;color:#222;cursor:pointer;font-size:1em;height:2em;outline:none;padding:0;width:2em}.rsw-btn:hover{background:#eaeaea}.rsw-btn[data-active=true]{background:#e0e0e0}.rsw-toolbar{align-items:center;background-color:#f5f5f5;border-bottom:1px solid #ddd;display:flex}";
n(css, {});
var Editor = import_react.default.forwardRef(function Editor2(_a, ref) {
  var autoFocus = _a.autoFocus, children = _a.children, containerProps = _a.containerProps, onSelect = _a.onSelect, rest = __rest(_a, ["autoFocus", "children", "containerProps", "onSelect"]);
  var editorState = useEditorState();
  import_react.default.useEffect(function() {
    document.addEventListener("click", onClickOutside);
    return function() {
      return document.removeEventListener("click", onClickOutside);
    };
  });
  function onClickOutside(event) {
    var _a2;
    if (event.target === editorState.$el) {
      return;
    }
    if ((_a2 = editorState.$el) === null || _a2 === void 0 ? void 0 : _a2.contains(event.target)) {
      return;
    }
    editorState.update({ $selection: void 0 });
  }
  function onTextSelect(event) {
    onSelect === null || onSelect === void 0 ? void 0 : onSelect(event);
    editorState.update({ $selection: getSelectedNode() });
  }
  function setContentEditableRef($el) {
    editorState.update({ $el });
    setForwardRef($el, ref);
    if (autoFocus && $el && editorState.$el === void 0) {
      $el.focus();
    }
  }
  var cssClass = cls("rsw-editor", containerProps === null || containerProps === void 0 ? void 0 : containerProps.className);
  if (editorState.htmlMode) {
    return import_react.default.createElement(
      "div",
      __assign({}, containerProps, { className: cssClass }),
      children,
      import_react.default.createElement("textarea", __assign({}, rest, { className: "rsw-ce rsw-html" }))
    );
  }
  return import_react.default.createElement(
    "div",
    __assign({}, containerProps, { className: cssClass }),
    children,
    import_react.default.createElement(ContentEditable, __assign({}, rest, { ref: setContentEditableRef, onSelect: onTextSelect }))
  );
});
function OrderedListIcon() {
  return import_react.default.createElement(
    "svg",
    { xmlns: "http://www.w3.org/2000/svg", width: "20", height: "20", viewBox: "0 0 24 24", style: { verticalAlign: "text-top" } },
    import_react.default.createElement("path", { fill: "currentColor", d: "M6.99938 12.998v-2H20.9994v2H6.99938zm0 6.0001v-2H20.9994v2H6.99938zm0-12.00001v-2H20.9994v2H6.99938zm-4 1v-3h-1v-1h2v4h-1zm-1 9.00001v-1h3v4h-3v-1h2v-.5h-1v-1h1v-.5h-2zM4.25 10c.41421 0 .75.3358.75.75 0 .2024-.08017.3861-.2105.521L3.11983 13H5v1H2v-.9218L4 11H2v-1h2.25z" })
  );
}
function UnorderedListIcon() {
  return import_react.default.createElement(
    "svg",
    { xmlns: "http://www.w3.org/2000/svg", width: "20", height: "20", viewBox: "0 0 24 24", style: { verticalAlign: "text-top" } },
    import_react.default.createElement("path", { fill: "currentColor", d: "M7 5h14v2H7V5zm0 8v-2h14v2H7zM4 4.50001c.83 0 1.5.66992 1.5 1.5 0 .83007-.67 1.5-1.5 1.5s-1.5-.66993-1.5-1.5c0-.83008.67-1.5 1.5-1.5zM4 10.5c.83 0 1.5.67 1.5 1.5s-.67 1.5-1.5 1.5-1.5-.67-1.5-1.5.67-1.5 1.5-1.5zM7 19v-2h14v2H7zm-3-2.5c.83 0 1.5.67 1.5 1.5s-.67 1.5-1.5 1.5-1.5-.67-1.5-1.5.67-1.5 1.5-1.5z" })
  );
}
var BtnBold = createButton("Bold", "𝐁", "bold");
var BtnBulletList = createButton("Bullet list", import_react.default.createElement(UnorderedListIcon, null), "insertUnorderedList");
var BtnClearFormatting = createButton("Clear formatting", "T̲ₓ", "removeFormat");
var BtnItalic = createButton("Italic", "𝑰", "italic");
var BtnStrikeThrough = createButton("Strike through", import_react.default.createElement("s", null, "ab"), "strikeThrough");
var BtnLink = createButton("Link", "🔗", function(_a) {
  var $selection = _a.$selection;
  if (($selection === null || $selection === void 0 ? void 0 : $selection.nodeName) === "A") {
    document.execCommand("unlink");
  } else {
    document.execCommand("createLink", false, prompt("URL", "") || void 0);
  }
});
var BtnNumberedList = createButton("Numbered list", import_react.default.createElement(OrderedListIcon, null), "insertOrderedList");
var BtnRedo = createButton("Redo", "↷", "redo");
var BtnUnderline = createButton("Underline", import_react.default.createElement("span", { style: { textDecoration: "underline" } }, "𝐔"), "underline");
var BtnUndo = createButton("Undo", "↶", "undo");
function createButton(title, content, command) {
  ButtonFactory.displayName = title.replace(/\s/g, "");
  return ButtonFactory;
  function ButtonFactory(props) {
    var editorState = useEditorState();
    var $el = editorState.$el;
    var isElFocused = function() {
      return Boolean($el === null || $el === void 0 ? void 0 : $el.contains(document.activeElement));
    };
    var active = false;
    if (typeof command === "string") {
      active = isElFocused() && document.queryCommandState(command);
    }
    function onAction(e2) {
      e2.preventDefault();
      if (!isElFocused()) {
        $el === null || $el === void 0 ? void 0 : $el.focus();
      }
      if (typeof command === "function") {
        command(editorState);
      } else {
        document.execCommand(command);
      }
    }
    if (editorState.htmlMode) {
      return null;
    }
    return import_react.default.createElement("button", __assign({ className: "rsw-btn", "data-active": active, onMouseDown: onAction, tabIndex: -1, title, type: "button" }, props), content);
  }
}
var BtnStyles = createDropdown("Styles", [
  ["Normal", "formatBlock", "DIV"],
  ["𝗛𝗲𝗮𝗱𝗲𝗿 𝟭", "formatBlock", "H1"],
  ["Header 2", "formatBlock", "H2"],
  ["𝙲𝚘𝚍𝚎", "formatBlock", "PRE"]
]);
function createDropdown(title, items) {
  DropdownFactory.displayName = title;
  return DropdownFactory;
  function DropdownFactory(props) {
    var editorState = useEditorState();
    var $el = editorState.$el, $selection = editorState.$selection, htmlMode = editorState.htmlMode;
    if (htmlMode) {
      return null;
    }
    var activeIndex = items.findIndex(function(item) {
      return item[1] === "formatBlock" && ($selection === null || $selection === void 0 ? void 0 : $selection.nodeName) === item[2];
    });
    return import_react.default.createElement(Dropdown, __assign({}, props, { items, onChange, selected: activeIndex, tabIndex: -1, title }));
    function onChange(e2) {
      var target = e2.target;
      var selectedValue = target.value;
      var selectedIndex = parseInt(selectedValue, 10);
      var _a = items[selectedIndex] || [], command = _a[1], commandArgument = _a[2];
      e2.preventDefault();
      if (document.activeElement !== $el) {
        $el === null || $el === void 0 ? void 0 : $el.focus();
      }
      if (typeof command === "function") {
        command(editorState);
      } else if (command) {
        document.execCommand(command, false, commandArgument);
      }
      setTimeout(function() {
        return target.value = selectedValue;
      }, 10);
    }
  }
}
function Dropdown(_a) {
  var items = _a.items, selected = _a.selected, inputProps = __rest(_a, ["items", "selected"]);
  return import_react.default.createElement(
    "select",
    __assign({ className: "rsw-dd" }, inputProps, { value: selected }),
    import_react.default.createElement("option", { hidden: true }, inputProps.title),
    items.map(function(item, index) {
      return import_react.default.createElement("option", { key: item[2], value: index }, item[0]);
    })
  );
}
function HtmlButton(_a) {
  var rest = __rest(_a, []);
  var editorState = useEditorState();
  function onClick() {
    editorState.update({
      htmlMode: !editorState.htmlMode
    });
  }
  return import_react.default.createElement("button", __assign({ className: "rsw-btn", "data-active": editorState.htmlMode, onClick, tabIndex: -1, title: "HTML mode", type: "button" }, rest), "</>");
}
function Separator(props) {
  var editorState = useEditorState();
  if (editorState.htmlMode) {
    return null;
  }
  return import_react.default.createElement("div", __assign({ className: "rsw-separator" }, props));
}
function Toolbar(props) {
  return import_react.default.createElement("div", __assign({ className: "rsw-toolbar" }, props));
}
var DefaultEditor = import_react.default.forwardRef(function DefaultEditor2(props, ref) {
  return import_react.default.createElement(
    EditorProvider,
    null,
    import_react.default.createElement(Editor, __assign({}, props, { ref }), props.children || import_react.default.createElement(
      Toolbar,
      null,
      import_react.default.createElement(BtnUndo, null),
      import_react.default.createElement(BtnRedo, null),
      import_react.default.createElement(Separator, null),
      import_react.default.createElement(BtnBold, null),
      import_react.default.createElement(BtnItalic, null),
      import_react.default.createElement(BtnUnderline, null),
      import_react.default.createElement(BtnStrikeThrough, null),
      import_react.default.createElement(Separator, null),
      import_react.default.createElement(BtnNumberedList, null),
      import_react.default.createElement(BtnBulletList, null),
      import_react.default.createElement(Separator, null),
      import_react.default.createElement(BtnLink, null),
      import_react.default.createElement(BtnClearFormatting, null),
      import_react.default.createElement(HtmlButton, null),
      import_react.default.createElement(Separator, null),
      import_react.default.createElement(BtnStyles, null)
    ))
  );
});
export {
  BtnBold,
  BtnBulletList,
  BtnClearFormatting,
  BtnItalic,
  BtnLink,
  BtnNumberedList,
  BtnRedo,
  BtnStrikeThrough,
  BtnStyles,
  BtnUnderline,
  BtnUndo,
  ContentEditable,
  DefaultEditor,
  Dropdown,
  Editor,
  EditorContext,
  EditorProvider,
  HtmlButton,
  Separator,
  Toolbar,
  createButton,
  createDropdown,
  DefaultEditor as default,
  useEditorState
};
//# sourceMappingURL=react-simple-wysiwyg.js.map
